// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Actions 1`] = `children: ReactNode`;

exports[`Alert 1`] = `
tone?: 
  | "info"
  | "critical"
  | "positive"
weight?: 
  | "strong"
  | "regular"
children: ReactNode
id?: string
`;

exports[`Box 1`] = `
paddingTop?: ResponsiveProp<
  | "none"
  | "xxsmall"
  | "xsmall"
  | "small"
  | "medium"
  | "large"
  | "xlarge"
  | "xxlarge"
>
paddingBottom?: ResponsiveProp<
  | "none"
  | "xxsmall"
  | "xsmall"
  | "small"
  | "medium"
  | "large"
  | "xlarge"
  | "xxlarge"
>
paddingLeft?: ResponsiveProp<
  | "none"
  | "xxsmall"
  | "xsmall"
  | "small"
  | "medium"
  | "large"
  | "xlarge"
  | "xxlarge"
  | "gutter"
>
paddingRight?: ResponsiveProp<
  | "none"
  | "xxsmall"
  | "xsmall"
  | "small"
  | "medium"
  | "large"
  | "xlarge"
  | "xxlarge"
  | "gutter"
>
marginTop?: ResponsiveProp<
  | "none"
  | "xxsmall"
  | "xsmall"
  | "small"
  | "medium"
  | "large"
  | "xlarge"
  | "xxlarge"
>
marginBottom?: ResponsiveProp<
  | "none"
  | "xxsmall"
  | "xsmall"
  | "small"
  | "medium"
  | "large"
  | "xlarge"
  | "xxlarge"
>
marginLeft?: ResponsiveProp<
  | "none"
  | "xxsmall"
  | "xsmall"
  | "small"
  | "medium"
  | "large"
  | "xlarge"
  | "xxlarge"
  | "gutter"
>
marginRight?: ResponsiveProp<
  | "none"
  | "xxsmall"
  | "xsmall"
  | "small"
  | "medium"
  | "large"
  | "xlarge"
  | "xxlarge"
  | "gutter"
>
display?: ResponsiveProp<
  | "flex"
  | "none"
  | "block"
  | "inline"
  | "inlineBlock"
>
flexDirection?: ResponsiveProp<
  | "row"
  | "column"
>
borderRadius?: "standard"
backgroundColor?: 
  | "info"
  | "critical"
  | "positive"
  | "input"
  | "inputDisabled"
  | "brandAccent"
  | "formAccent"
  | "formAccentDisabled"
  | "selection"
  | "card"
  | "formAccentActive"
  | "formAccentHover"
  | "brandAccentActive"
  | "brandAccentHover"
  | "infoLight"
  | "criticalLight"
  | "positiveLight"
boxShadow?: 
  | "outlineFocus"
  | "borderStandard"
  | "borderCritical"
  | "borderFormAccent"
  | "borderFormAccentLarge"
transform?: "touchable"
transition?: 
  | "touchable"
  | "fast"
width?: "full"
component?: 
  | "symbol"
  | "object"
  | "strong"
  | "cite"
  | "data"
  | "form"
  | "label"
  | "pattern"
  | "span"
  | "summary"
  | "style"
  | "title"
  | "clipPath"
  | "filter"
  | "mask"
  | "marker"
  | "small"
  | "input"
  | "a"
  | "abbr"
  | "address"
  | "area"
  | "article"
  | "aside"
  | "audio"
  | "b"
  | "base"
  | "bdi"
  | "bdo"
  | "big"
  | "blockquote"
  | "body"
  | "br"
  | "button"
  | "canvas"
  | "caption"
  | "code"
  | "col"
  | "colgroup"
  | "datalist"
  | "dd"
  | "del"
  | "details"
  | "dfn"
  | "dialog"
  | "div"
  | "dl"
  | "dt"
  | "em"
  | "embed"
  | "fieldset"
  | "figcaption"
  | "figure"
  | "footer"
  | "h1"
  | "h2"
  | "h3"
  | "h4"
  | "h5"
  | "h6"
  | "head"
  | "header"
  | "hgroup"
  | "hr"
  | "html"
  | "i"
  | "iframe"
  | "img"
  | "ins"
  | "kbd"
  | "keygen"
  | "legend"
  | "li"
  | "link"
  | "main"
  | "map"
  | "mark"
  | "menu"
  | "menuitem"
  | "meta"
  | "meter"
  | "nav"
  | "noindex"
  | "noscript"
  | "ol"
  | "optgroup"
  | "option"
  | "output"
  | "p"
  | "param"
  | "picture"
  | "pre"
  | "progress"
  | "q"
  | "rp"
  | "rt"
  | "ruby"
  | "s"
  | "samp"
  | "script"
  | "section"
  | "select"
  | "source"
  | "sub"
  | "sup"
  | "table"
  | "tbody"
  | "td"
  | "textarea"
  | "tfoot"
  | "th"
  | "thead"
  | "time"
  | "tr"
  | "track"
  | "u"
  | "ul"
  | "var"
  | "video"
  | "wbr"
  | "webview"
  | "svg"
  | "animate"
  | "animateMotion"
  | "animateTransform"
  | "circle"
  | "defs"
  | "desc"
  | "ellipse"
  | "feBlend"
  | "feColorMatrix"
  | "feComponentTransfer"
  | "feComposite"
  | "feConvolveMatrix"
  | "feDiffuseLighting"
  | "feDisplacementMap"
  | "feDistantLight"
  | "feDropShadow"
  | "feFlood"
  | "feFuncA"
  | "feFuncB"
  | "feFuncG"
  | "feFuncR"
  | "feGaussianBlur"
  | "feImage"
  | "feMerge"
  | "feMergeNode"
  | "feMorphology"
  | "feOffset"
  | "fePointLight"
  | "feSpecularLighting"
  | "feSpotLight"
  | "feTile"
  | "feTurbulence"
  | "foreignObject"
  | "g"
  | "image"
  | "line"
  | "linearGradient"
  | "metadata"
  | "mpath"
  | "path"
  | "polygon"
  | "polyline"
  | "radialGradient"
  | "rect"
  | "stop"
  | "switch"
  | "text"
  | "textPath"
  | "tspan"
  | "use"
  | "view"
  | ComponentClass<any, any>
  | FunctionComponent<any>
children?: ReactNode
id?: string
accept?: string
acceptCharset?: string
action?: string
allowFullScreen?: boolean
allowTransparency?: boolean
alt?: string
as?: string
async?: boolean
autoComplete?: string
autoFocus?: boolean
autoPlay?: boolean
capture?: 
  | string
  | false
  | true
cellPadding?: 
  | string
  | number
cellSpacing?: 
  | string
  | number
charSet?: string
challenge?: string
checked?: boolean
cite?: string
classID?: string
cols?: number
colSpan?: number
content?: string
controls?: boolean
coords?: string
crossOrigin?: string
data?: string
dateTime?: string
default?: boolean
defer?: boolean
disabled?: boolean
download?: any
encType?: string
form?: string
formAction?: string
formEncType?: string
formMethod?: string
formNoValidate?: boolean
formTarget?: string
frameBorder?: 
  | string
  | number
headers?: string
height?: 
  | string
  | number
high?: number
href?: string
hrefLang?: string
htmlFor?: string
httpEquiv?: string
integrity?: string
keyParams?: string
keyType?: string
kind?: string
label?: string
list?: string
loop?: boolean
low?: number
manifest?: string
marginHeight?: number
marginWidth?: number
max?: 
  | string
  | number
maxLength?: number
media?: string
mediaGroup?: string
method?: string
min?: 
  | string
  | number
minLength?: number
multiple?: boolean
muted?: boolean
name?: string
nonce?: string
noValidate?: boolean
open?: boolean
optimum?: number
pattern?: string
placeholder?: string
playsInline?: boolean
poster?: string
preload?: string
readOnly?: boolean
rel?: string
required?: boolean
reversed?: boolean
rows?: number
rowSpan?: number
sandbox?: string
scope?: string
scoped?: boolean
scrolling?: string
seamless?: boolean
selected?: boolean
shape?: string
size?: number
sizes?: string
span?: number
src?: string
srcDoc?: string
srcLang?: string
srcSet?: string
start?: number
step?: 
  | string
  | number
summary?: string
target?: string
type?: string
useMap?: string
value?: 
  | string
  | number
  | string[]
wmode?: string
wrap?: string
defaultChecked?: boolean
defaultValue?: 
  | string
  | string[]
suppressContentEditableWarning?: boolean
suppressHydrationWarning?: boolean
accessKey?: string
className?: string
contentEditable?: boolean
contextMenu?: string
dir?: string
draggable?: boolean
hidden?: boolean
lang?: string
slot?: string
spellCheck?: boolean
style?: CSSProperties
tabIndex?: number
title?: string
inputMode?: string
is?: string
radioGroup?: string
role?: string
about?: string
datatype?: string
inlist?: any
prefix?: string
property?: string
resource?: string
typeof?: string
vocab?: string
autoCapitalize?: string
autoCorrect?: string
autoSave?: string
color?: string
itemProp?: string
itemScope?: boolean
itemType?: string
itemID?: string
itemRef?: string
results?: number
security?: string
unselectable?: 
  | "on"
  | "off"
aria-activedescendant?: string
aria-atomic?: 
  | false
  | true
  | "false"
  | "true"
aria-autocomplete?: 
  | "list"
  | "none"
  | "inline"
  | "both"
aria-busy?: 
  | false
  | true
  | "false"
  | "true"
aria-checked?: 
  | false
  | true
  | "false"
  | "true"
  | "mixed"
aria-colcount?: number
aria-colindex?: number
aria-colspan?: number
aria-controls?: string
aria-current?: 
  | false
  | true
  | "step"
  | "time"
  | "false"
  | "true"
  | "page"
  | "location"
  | "date"
aria-describedby?: string
aria-details?: string
aria-disabled?: 
  | false
  | true
  | "false"
  | "true"
aria-dropeffect?: 
  | "none"
  | "link"
  | "copy"
  | "execute"
  | "move"
  | "popup"
aria-errormessage?: string
aria-expanded?: 
  | false
  | true
  | "false"
  | "true"
aria-flowto?: string
aria-grabbed?: 
  | false
  | true
  | "false"
  | "true"
aria-haspopup?: 
  | false
  | true
  | "grid"
  | "dialog"
  | "menu"
  | "false"
  | "true"
  | "listbox"
  | "tree"
aria-hidden?: 
  | false
  | true
  | "false"
  | "true"
aria-invalid?: 
  | false
  | true
  | "false"
  | "true"
  | "grammar"
  | "spelling"
aria-keyshortcuts?: string
aria-label?: string
aria-labelledby?: string
aria-level?: number
aria-live?: 
  | "off"
  | "assertive"
  | "polite"
aria-modal?: 
  | false
  | true
  | "false"
  | "true"
aria-multiline?: 
  | false
  | true
  | "false"
  | "true"
aria-multiselectable?: 
  | false
  | true
  | "false"
  | "true"
aria-orientation?: 
  | "horizontal"
  | "vertical"
aria-owns?: string
aria-placeholder?: string
aria-posinset?: number
aria-pressed?: 
  | false
  | true
  | "false"
  | "true"
  | "mixed"
aria-readonly?: 
  | false
  | true
  | "false"
  | "true"
aria-relevant?: 
  | "all"
  | "text"
  | "additions"
  | "additions text"
  | "removals"
aria-required?: 
  | false
  | true
  | "false"
  | "true"
aria-roledescription?: string
aria-rowcount?: number
aria-rowindex?: number
aria-rowspan?: number
aria-selected?: 
  | false
  | true
  | "false"
  | "true"
aria-setsize?: number
aria-sort?: 
  | "none"
  | "ascending"
  | "descending"
  | "other"
aria-valuemax?: number
aria-valuemin?: number
aria-valuenow?: number
aria-valuetext?: string
dangerouslySetInnerHTML?: { __html: string; }
onCopy?: (event: ClipboardEvent<HTMLElement>) => void
onCopyCapture?: (event: ClipboardEvent<HTMLElement>) => void
onCut?: (event: ClipboardEvent<HTMLElement>) => void
onCutCapture?: (event: ClipboardEvent<HTMLElement>) => void
onPaste?: (event: ClipboardEvent<HTMLElement>) => void
onPasteCapture?: (event: ClipboardEvent<HTMLElement>) => void
onCompositionEnd?: (event: CompositionEvent<HTMLElement>) => void
onCompositionEndCapture?: (event: CompositionEvent<HTMLElement>) => void
onCompositionStart?: (event: CompositionEvent<HTMLElement>) => void
onCompositionStartCapture?: (event: CompositionEvent<HTMLElement>) => void
onCompositionUpdate?: (event: CompositionEvent<HTMLElement>) => void
onCompositionUpdateCapture?: (event: CompositionEvent<HTMLElement>) => void
onFocus?: (event: FocusEvent<HTMLElement>) => void
onFocusCapture?: (event: FocusEvent<HTMLElement>) => void
onBlur?: (event: FocusEvent<HTMLElement>) => void
onBlurCapture?: (event: FocusEvent<HTMLElement>) => void
onChange?: (event: FormEvent<HTMLElement>) => void
onChangeCapture?: (event: FormEvent<HTMLElement>) => void
onBeforeInput?: (event: FormEvent<HTMLElement>) => void
onBeforeInputCapture?: (event: FormEvent<HTMLElement>) => void
onInput?: (event: FormEvent<HTMLElement>) => void
onInputCapture?: (event: FormEvent<HTMLElement>) => void
onReset?: (event: FormEvent<HTMLElement>) => void
onResetCapture?: (event: FormEvent<HTMLElement>) => void
onSubmit?: (event: FormEvent<HTMLElement>) => void
onSubmitCapture?: (event: FormEvent<HTMLElement>) => void
onInvalid?: (event: FormEvent<HTMLElement>) => void
onInvalidCapture?: (event: FormEvent<HTMLElement>) => void
onLoad?: (event: SyntheticEvent<HTMLElement, Event>) => void
onLoadCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onError?: (event: SyntheticEvent<HTMLElement, Event>) => void
onErrorCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onKeyDown?: (event: KeyboardEvent<HTMLElement>) => void
onKeyDownCapture?: (event: KeyboardEvent<HTMLElement>) => void
onKeyPress?: (event: KeyboardEvent<HTMLElement>) => void
onKeyPressCapture?: (event: KeyboardEvent<HTMLElement>) => void
onKeyUp?: (event: KeyboardEvent<HTMLElement>) => void
onKeyUpCapture?: (event: KeyboardEvent<HTMLElement>) => void
onAbort?: (event: SyntheticEvent<HTMLElement, Event>) => void
onAbortCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onCanPlay?: (event: SyntheticEvent<HTMLElement, Event>) => void
onCanPlayCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onCanPlayThrough?: (event: SyntheticEvent<HTMLElement, Event>) => void
onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onDurationChange?: (event: SyntheticEvent<HTMLElement, Event>) => void
onDurationChangeCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onEmptied?: (event: SyntheticEvent<HTMLElement, Event>) => void
onEmptiedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onEncrypted?: (event: SyntheticEvent<HTMLElement, Event>) => void
onEncryptedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onEnded?: (event: SyntheticEvent<HTMLElement, Event>) => void
onEndedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onLoadedData?: (event: SyntheticEvent<HTMLElement, Event>) => void
onLoadedDataCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onLoadedMetadata?: (event: SyntheticEvent<HTMLElement, Event>) => void
onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onLoadStart?: (event: SyntheticEvent<HTMLElement, Event>) => void
onLoadStartCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onPause?: (event: SyntheticEvent<HTMLElement, Event>) => void
onPauseCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onPlay?: (event: SyntheticEvent<HTMLElement, Event>) => void
onPlayCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onPlaying?: (event: SyntheticEvent<HTMLElement, Event>) => void
onPlayingCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onProgress?: (event: SyntheticEvent<HTMLElement, Event>) => void
onProgressCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onRateChange?: (event: SyntheticEvent<HTMLElement, Event>) => void
onRateChangeCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onSeeked?: (event: SyntheticEvent<HTMLElement, Event>) => void
onSeekedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onSeeking?: (event: SyntheticEvent<HTMLElement, Event>) => void
onSeekingCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onStalled?: (event: SyntheticEvent<HTMLElement, Event>) => void
onStalledCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onSuspend?: (event: SyntheticEvent<HTMLElement, Event>) => void
onSuspendCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onTimeUpdate?: (event: SyntheticEvent<HTMLElement, Event>) => void
onTimeUpdateCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onVolumeChange?: (event: SyntheticEvent<HTMLElement, Event>) => void
onVolumeChangeCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onWaiting?: (event: SyntheticEvent<HTMLElement, Event>) => void
onWaitingCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onAuxClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onAuxClickCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onClickCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onContextMenu?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onContextMenuCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onDoubleClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onDoubleClickCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onDrag?: (event: DragEvent<HTMLElement>) => void
onDragCapture?: (event: DragEvent<HTMLElement>) => void
onDragEnd?: (event: DragEvent<HTMLElement>) => void
onDragEndCapture?: (event: DragEvent<HTMLElement>) => void
onDragEnter?: (event: DragEvent<HTMLElement>) => void
onDragEnterCapture?: (event: DragEvent<HTMLElement>) => void
onDragExit?: (event: DragEvent<HTMLElement>) => void
onDragExitCapture?: (event: DragEvent<HTMLElement>) => void
onDragLeave?: (event: DragEvent<HTMLElement>) => void
onDragLeaveCapture?: (event: DragEvent<HTMLElement>) => void
onDragOver?: (event: DragEvent<HTMLElement>) => void
onDragOverCapture?: (event: DragEvent<HTMLElement>) => void
onDragStart?: (event: DragEvent<HTMLElement>) => void
onDragStartCapture?: (event: DragEvent<HTMLElement>) => void
onDrop?: (event: DragEvent<HTMLElement>) => void
onDropCapture?: (event: DragEvent<HTMLElement>) => void
onMouseDown?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onMouseDownCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onMouseEnter?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onMouseLeave?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onMouseMove?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onMouseMoveCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onMouseOut?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onMouseOutCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onMouseOver?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onMouseOverCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onMouseUp?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onMouseUpCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
onSelect?: (event: SyntheticEvent<HTMLElement, Event>) => void
onSelectCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
onTouchCancel?: (event: TouchEvent<HTMLElement>) => void
onTouchCancelCapture?: (event: TouchEvent<HTMLElement>) => void
onTouchEnd?: (event: TouchEvent<HTMLElement>) => void
onTouchEndCapture?: (event: TouchEvent<HTMLElement>) => void
onTouchMove?: (event: TouchEvent<HTMLElement>) => void
onTouchMoveCapture?: (event: TouchEvent<HTMLElement>) => void
onTouchStart?: (event: TouchEvent<HTMLElement>) => void
onTouchStartCapture?: (event: TouchEvent<HTMLElement>) => void
onPointerDown?: (event: PointerEvent<HTMLElement>) => void
onPointerDownCapture?: (event: PointerEvent<HTMLElement>) => void
onPointerMove?: (event: PointerEvent<HTMLElement>) => void
onPointerMoveCapture?: (event: PointerEvent<HTMLElement>) => void
onPointerUp?: (event: PointerEvent<HTMLElement>) => void
onPointerUpCapture?: (event: PointerEvent<HTMLElement>) => void
onPointerCancel?: (event: PointerEvent<HTMLElement>) => void
onPointerCancelCapture?: (event: PointerEvent<HTMLElement>) => void
onPointerEnter?: (event: PointerEvent<HTMLElement>) => void
onPointerEnterCapture?: (event: PointerEvent<HTMLElement>) => void
onPointerLeave?: (event: PointerEvent<HTMLElement>) => void
onPointerLeaveCapture?: (event: PointerEvent<HTMLElement>) => void
onPointerOver?: (event: PointerEvent<HTMLElement>) => void
onPointerOverCapture?: (event: PointerEvent<HTMLElement>) => void
onPointerOut?: (event: PointerEvent<HTMLElement>) => void
onPointerOutCapture?: (event: PointerEvent<HTMLElement>) => void
onGotPointerCapture?: (event: PointerEvent<HTMLElement>) => void
onGotPointerCaptureCapture?: (event: PointerEvent<HTMLElement>) => void
onLostPointerCapture?: (event: PointerEvent<HTMLElement>) => void
onLostPointerCaptureCapture?: (event: PointerEvent<HTMLElement>) => void
onScroll?: (event: UIEvent<HTMLElement>) => void
onScrollCapture?: (event: UIEvent<HTMLElement>) => void
onWheel?: (event: WheelEvent<HTMLElement>) => void
onWheelCapture?: (event: WheelEvent<HTMLElement>) => void
onAnimationStart?: (event: AnimationEvent<HTMLElement>) => void
onAnimationStartCapture?: (event: AnimationEvent<HTMLElement>) => void
onAnimationEnd?: (event: AnimationEvent<HTMLElement>) => void
onAnimationEndCapture?: (event: AnimationEvent<HTMLElement>) => void
onAnimationIteration?: (event: AnimationEvent<HTMLElement>) => void
onAnimationIterationCapture?: (event: AnimationEvent<HTMLElement>) => void
onTransitionEnd?: (event: TransitionEvent<HTMLElement>) => void
onTransitionEndCapture?: (event: TransitionEvent<HTMLElement>) => void
ref?: 
  | (instance: HTMLElement | null) => void
  | RefObject<HTMLElement>
`;

exports[`Bullet 1`] = `children?: ReactNode`;

exports[`BulletList 1`] = `children?: ReactNode`;

exports[`Button 1`] = `
id?: string
onClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
type?: string
children?: ReactNode
weight?: 
  | "strong"
  | "regular"
  | "weak"
aria-describedby?: string
`;

exports[`Card 1`] = `children?: ReactNode`;

exports[`Checkbox 1`] = `
id: string
label: ReactNode
onChange: (event: FormEvent<HTMLFormElement>) => void
checked: boolean
value?: 
  | string
  | number
  | string[]
name?: string
disabled?: boolean
message?: ReactNode
reserveMessageSpace?: boolean
tone?: 
  | "critical"
  | "neutral"
children?: ReactNode
data?: Record<string, ReactText>
ref?: 
  | (instance: HTMLInputElement | null) => void
  | RefObject<HTMLInputElement>
`;

exports[`ChevronIcon 1`] = `
direction?: 
  | "left"
  | "right"
  | "up"
  | "down"
tone?: 
  | "info"
  | "critical"
  | "positive"
  | "formAccent"
  | "link"
  | "neutral"
  | "secondary"
size?: 
  | "fill"
  | "small"
  | "large"
  | "standard"
inline?: boolean
`;

exports[`Column 1`] = `children: ReactNode`;

exports[`Columns 1`] = `
children: 
  | ReactElement<ColumnProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
  | ReactElement<ColumnProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>[]
`;

exports[`Divider 1`] = ``;

exports[`Dropdown 1`] = `
children: 
  | AllHTMLAttributes<HTMLOptGroupElement | HTMLOptionElement>
  | AllHTMLAttributes<HTMLOptGroupElement | HTMLOptionElement>[]
value: 
  | string
  | number
  | string[]
onChange: (event: FormEvent<HTMLSelectElement>) => void
onBlur?: (event: FocusEvent<HTMLSelectElement>) => void
onFocus?: (event: FocusEvent<HTMLSelectElement>) => void
placeholder?: string
tone?: 
  | "critical"
  | "positive"
  | "neutral"
id: string
autoComplete?: string
data?: Record<string, ReactText>
disabled?: boolean
label?: ReactNode
name?: string
aria-describedby?: string
message?: ReactNode
reserveMessageSpace?: boolean
secondaryLabel?: ReactNode
tertiaryLabel?: ReactNode
description?: ReactNode
ref?: 
  | (instance: HTMLSelectElement | null) => void
  | RefObject<HTMLSelectElement>
`;

exports[`ErrorIcon 1`] = `
tone?: 
  | "info"
  | "critical"
  | "positive"
  | "formAccent"
  | "link"
  | "neutral"
  | "secondary"
size?: 
  | "fill"
  | "small"
  | "large"
  | "standard"
inline?: boolean
`;

exports[`FieldLabel 1`] = `
id: 
  | string
  | false
label?: ReactNode
secondaryLabel?: ReactNode
tertiaryLabel?: ReactNode
description?: ReactNode
`;

exports[`FieldMessage 1`] = `
id: string
message: ReactNode
reserveMessageSpace?: boolean
tone?: 
  | "critical"
  | "positive"
  | "neutral"
secondaryMessage?: ReactNode
disabled?: boolean
`;

exports[`Heading 1`] = `
children: ReactNode
level: 
  | "1"
  | "2"
  | "3"
weight?: 
  | "regular"
  | "weak"
component?: 
  | "symbol"
  | "object"
  | "strong"
  | "cite"
  | "data"
  | "form"
  | "label"
  | "pattern"
  | "span"
  | "summary"
  | "style"
  | "title"
  | "clipPath"
  | "filter"
  | "mask"
  | "marker"
  | "small"
  | "input"
  | "a"
  | "abbr"
  | "address"
  | "area"
  | "article"
  | "aside"
  | "audio"
  | "b"
  | "base"
  | "bdi"
  | "bdo"
  | "big"
  | "blockquote"
  | "body"
  | "br"
  | "button"
  | "canvas"
  | "caption"
  | "code"
  | "col"
  | "colgroup"
  | "datalist"
  | "dd"
  | "del"
  | "details"
  | "dfn"
  | "dialog"
  | "div"
  | "dl"
  | "dt"
  | "em"
  | "embed"
  | "fieldset"
  | "figcaption"
  | "figure"
  | "footer"
  | "h1"
  | "h2"
  | "h3"
  | "h4"
  | "h5"
  | "h6"
  | "head"
  | "header"
  | "hgroup"
  | "hr"
  | "html"
  | "i"
  | "iframe"
  | "img"
  | "ins"
  | "kbd"
  | "keygen"
  | "legend"
  | "li"
  | "link"
  | "main"
  | "map"
  | "mark"
  | "menu"
  | "menuitem"
  | "meta"
  | "meter"
  | "nav"
  | "noindex"
  | "noscript"
  | "ol"
  | "optgroup"
  | "option"
  | "output"
  | "p"
  | "param"
  | "picture"
  | "pre"
  | "progress"
  | "q"
  | "rp"
  | "rt"
  | "ruby"
  | "s"
  | "samp"
  | "script"
  | "section"
  | "select"
  | "source"
  | "sub"
  | "sup"
  | "table"
  | "tbody"
  | "td"
  | "textarea"
  | "tfoot"
  | "th"
  | "thead"
  | "time"
  | "tr"
  | "track"
  | "u"
  | "ul"
  | "var"
  | "video"
  | "wbr"
  | "webview"
  | "svg"
  | "animate"
  | "animateMotion"
  | "animateTransform"
  | "circle"
  | "defs"
  | "desc"
  | "ellipse"
  | "feBlend"
  | "feColorMatrix"
  | "feComponentTransfer"
  | "feComposite"
  | "feConvolveMatrix"
  | "feDiffuseLighting"
  | "feDisplacementMap"
  | "feDistantLight"
  | "feDropShadow"
  | "feFlood"
  | "feFuncA"
  | "feFuncB"
  | "feFuncG"
  | "feFuncR"
  | "feGaussianBlur"
  | "feImage"
  | "feMerge"
  | "feMergeNode"
  | "feMorphology"
  | "feOffset"
  | "fePointLight"
  | "feSpecularLighting"
  | "feSpotLight"
  | "feTile"
  | "feTurbulence"
  | "foreignObject"
  | "g"
  | "image"
  | "line"
  | "linearGradient"
  | "metadata"
  | "mpath"
  | "path"
  | "polygon"
  | "polyline"
  | "radialGradient"
  | "rect"
  | "stop"
  | "switch"
  | "text"
  | "textPath"
  | "tspan"
  | "use"
  | "view"
  | ComponentClass<any, any>
  | FunctionComponent<any>
id?: string
`;

exports[`Hidden 1`] = `
children: ReactNode
mobile?: boolean
desktop?: boolean
screen?: boolean
print?: boolean
inline?: boolean
`;

exports[`InfoIcon 1`] = `
tone?: 
  | "info"
  | "critical"
  | "positive"
  | "formAccent"
  | "link"
  | "neutral"
  | "secondary"
size?: 
  | "fill"
  | "small"
  | "large"
  | "standard"
inline?: boolean
`;

exports[`MonthPicker 1`] = `
value: MonthPickerValue
onChange: ChangeHandler
onBlur?: FocusHandler
onFocus?: FocusHandler
minYear?: number
maxYear?: number
ascendingYears?: boolean
tone?: 
  | "critical"
  | "positive"
  | "neutral"
id: string
disabled?: boolean
label?: ReactNode
message?: ReactNode
reserveMessageSpace?: boolean
secondaryLabel?: ReactNode
tertiaryLabel?: ReactNode
description?: ReactNode
`;

exports[`Paragraph 1`] = `children: ReactNode`;

exports[`Radio 1`] = `
children?: ReactNode
tone?: 
  | "critical"
  | "neutral"
id: string
checked: boolean
data?: Record<string, ReactText>
disabled?: boolean
label: ReactNode
name?: string
value?: 
  | string
  | number
  | string[]
onChange: (event: FormEvent<HTMLFormElement>) => void
ref?: 
  | (instance: HTMLInputElement | null) => void
  | RefObject<HTMLInputElement>
`;

exports[`Secondary 1`] = `
children: ReactNode
id?: string
`;

exports[`Strong 1`] = `
children: ReactNode
id?: string
`;

exports[`Text 1`] = `
id?: string
children?: ReactNode
size?: 
  | "small"
  | "large"
  | "standard"
tone?: 
  | "info"
  | "critical"
  | "positive"
  | "formAccent"
  | "link"
  | "neutral"
  | "secondary"
weight?: 
  | "strong"
  | "regular"
  | "medium"
baseline?: boolean
component?: 
  | "symbol"
  | "object"
  | "strong"
  | "cite"
  | "data"
  | "form"
  | "label"
  | "pattern"
  | "span"
  | "summary"
  | "style"
  | "title"
  | "clipPath"
  | "filter"
  | "mask"
  | "marker"
  | "small"
  | "input"
  | "a"
  | "abbr"
  | "address"
  | "area"
  | "article"
  | "aside"
  | "audio"
  | "b"
  | "base"
  | "bdi"
  | "bdo"
  | "big"
  | "blockquote"
  | "body"
  | "br"
  | "button"
  | "canvas"
  | "caption"
  | "code"
  | "col"
  | "colgroup"
  | "datalist"
  | "dd"
  | "del"
  | "details"
  | "dfn"
  | "dialog"
  | "div"
  | "dl"
  | "dt"
  | "em"
  | "embed"
  | "fieldset"
  | "figcaption"
  | "figure"
  | "footer"
  | "h1"
  | "h2"
  | "h3"
  | "h4"
  | "h5"
  | "h6"
  | "head"
  | "header"
  | "hgroup"
  | "hr"
  | "html"
  | "i"
  | "iframe"
  | "img"
  | "ins"
  | "kbd"
  | "keygen"
  | "legend"
  | "li"
  | "link"
  | "main"
  | "map"
  | "mark"
  | "menu"
  | "menuitem"
  | "meta"
  | "meter"
  | "nav"
  | "noindex"
  | "noscript"
  | "ol"
  | "optgroup"
  | "option"
  | "output"
  | "p"
  | "param"
  | "picture"
  | "pre"
  | "progress"
  | "q"
  | "rp"
  | "rt"
  | "ruby"
  | "s"
  | "samp"
  | "script"
  | "section"
  | "select"
  | "source"
  | "sub"
  | "sup"
  | "table"
  | "tbody"
  | "td"
  | "textarea"
  | "tfoot"
  | "th"
  | "thead"
  | "time"
  | "tr"
  | "track"
  | "u"
  | "ul"
  | "var"
  | "video"
  | "wbr"
  | "webview"
  | "svg"
  | "animate"
  | "animateMotion"
  | "animateTransform"
  | "circle"
  | "defs"
  | "desc"
  | "ellipse"
  | "feBlend"
  | "feColorMatrix"
  | "feComponentTransfer"
  | "feComposite"
  | "feConvolveMatrix"
  | "feDiffuseLighting"
  | "feDisplacementMap"
  | "feDistantLight"
  | "feDropShadow"
  | "feFlood"
  | "feFuncA"
  | "feFuncB"
  | "feFuncG"
  | "feFuncR"
  | "feGaussianBlur"
  | "feImage"
  | "feMerge"
  | "feMergeNode"
  | "feMorphology"
  | "feOffset"
  | "fePointLight"
  | "feSpecularLighting"
  | "feSpotLight"
  | "feTile"
  | "feTurbulence"
  | "foreignObject"
  | "g"
  | "image"
  | "line"
  | "linearGradient"
  | "metadata"
  | "mpath"
  | "path"
  | "polygon"
  | "polyline"
  | "radialGradient"
  | "rect"
  | "stop"
  | "switch"
  | "text"
  | "textPath"
  | "tspan"
  | "use"
  | "view"
  | ComponentClass<any, any>
  | FunctionComponent<any>
`;

exports[`TextField 1`] = `
value: 
  | string
  | number
  | string[]
type?: 
  | "number"
  | "text"
  | "password"
  | "email"
  | "search"
  | "tel"
  | "url"
onChange: (event: FormEvent<HTMLInputElement>) => void
onBlur?: (event: FocusEvent<HTMLInputElement>) => void
onFocus?: (event: FocusEvent<HTMLInputElement>) => void
placeholder?: string
tone?: 
  | "critical"
  | "positive"
  | "neutral"
id: string
autoComplete?: string
data?: Record<string, ReactText>
disabled?: boolean
label?: ReactNode
name?: string
aria-describedby?: string
message?: ReactNode
reserveMessageSpace?: boolean
secondaryLabel?: ReactNode
tertiaryLabel?: ReactNode
description?: ReactNode
ref?: 
  | (instance: HTMLInputElement | null) => void
  | RefObject<HTMLInputElement>
`;

exports[`TextLink 1`] = `
inline?: boolean
children?: ReactNode
id?: string
width?: 
  | string
  | number
accept?: string
acceptCharset?: string
action?: string
allowFullScreen?: boolean
allowTransparency?: boolean
alt?: string
as?: string
async?: boolean
autoComplete?: string
autoFocus?: boolean
autoPlay?: boolean
capture?: 
  | string
  | false
  | true
cellPadding?: 
  | string
  | number
cellSpacing?: 
  | string
  | number
charSet?: string
challenge?: string
checked?: boolean
cite?: string
classID?: string
cols?: number
colSpan?: number
content?: string
controls?: boolean
coords?: string
crossOrigin?: string
data?: string
dateTime?: string
default?: boolean
defer?: boolean
disabled?: boolean
download?: any
encType?: string
form?: string
formAction?: string
formEncType?: string
formMethod?: string
formNoValidate?: boolean
formTarget?: string
frameBorder?: 
  | string
  | number
headers?: string
height?: 
  | string
  | number
high?: number
href?: string
hrefLang?: string
htmlFor?: string
httpEquiv?: string
integrity?: string
keyParams?: string
keyType?: string
kind?: string
label?: string
list?: string
loop?: boolean
low?: number
manifest?: string
marginHeight?: number
marginWidth?: number
max?: 
  | string
  | number
maxLength?: number
media?: string
mediaGroup?: string
method?: string
min?: 
  | string
  | number
minLength?: number
multiple?: boolean
muted?: boolean
name?: string
nonce?: string
noValidate?: boolean
open?: boolean
optimum?: number
pattern?: string
placeholder?: string
playsInline?: boolean
poster?: string
preload?: string
readOnly?: boolean
rel?: string
required?: boolean
reversed?: boolean
rows?: number
rowSpan?: number
sandbox?: string
scope?: string
scoped?: boolean
scrolling?: string
seamless?: boolean
selected?: boolean
shape?: string
size?: number
sizes?: string
span?: number
src?: string
srcDoc?: string
srcLang?: string
srcSet?: string
start?: number
step?: 
  | string
  | number
summary?: string
target?: string
type?: string
useMap?: string
value?: 
  | string
  | number
  | string[]
wmode?: string
wrap?: string
defaultChecked?: boolean
defaultValue?: 
  | string
  | string[]
suppressContentEditableWarning?: boolean
suppressHydrationWarning?: boolean
accessKey?: string
contentEditable?: boolean
contextMenu?: string
dir?: string
draggable?: boolean
hidden?: boolean
lang?: string
slot?: string
spellCheck?: boolean
tabIndex?: number
title?: string
inputMode?: string
is?: string
radioGroup?: string
role?: string
about?: string
datatype?: string
inlist?: any
prefix?: string
property?: string
resource?: string
typeof?: string
vocab?: string
autoCapitalize?: string
autoCorrect?: string
autoSave?: string
color?: string
itemProp?: string
itemScope?: boolean
itemType?: string
itemID?: string
itemRef?: string
results?: number
security?: string
unselectable?: 
  | "on"
  | "off"
aria-activedescendant?: string
aria-atomic?: 
  | false
  | true
  | "false"
  | "true"
aria-autocomplete?: 
  | "list"
  | "none"
  | "inline"
  | "both"
aria-busy?: 
  | false
  | true
  | "false"
  | "true"
aria-checked?: 
  | false
  | true
  | "false"
  | "true"
  | "mixed"
aria-colcount?: number
aria-colindex?: number
aria-colspan?: number
aria-controls?: string
aria-current?: 
  | false
  | true
  | "step"
  | "time"
  | "false"
  | "true"
  | "page"
  | "location"
  | "date"
aria-describedby?: string
aria-details?: string
aria-disabled?: 
  | false
  | true
  | "false"
  | "true"
aria-dropeffect?: 
  | "none"
  | "link"
  | "copy"
  | "execute"
  | "move"
  | "popup"
aria-errormessage?: string
aria-expanded?: 
  | false
  | true
  | "false"
  | "true"
aria-flowto?: string
aria-grabbed?: 
  | false
  | true
  | "false"
  | "true"
aria-haspopup?: 
  | false
  | true
  | "grid"
  | "dialog"
  | "menu"
  | "false"
  | "true"
  | "listbox"
  | "tree"
aria-hidden?: 
  | false
  | true
  | "false"
  | "true"
aria-invalid?: 
  | false
  | true
  | "false"
  | "true"
  | "grammar"
  | "spelling"
aria-keyshortcuts?: string
aria-label?: string
aria-labelledby?: string
aria-level?: number
aria-live?: 
  | "off"
  | "assertive"
  | "polite"
aria-modal?: 
  | false
  | true
  | "false"
  | "true"
aria-multiline?: 
  | false
  | true
  | "false"
  | "true"
aria-multiselectable?: 
  | false
  | true
  | "false"
  | "true"
aria-orientation?: 
  | "horizontal"
  | "vertical"
aria-owns?: string
aria-placeholder?: string
aria-posinset?: number
aria-pressed?: 
  | false
  | true
  | "false"
  | "true"
  | "mixed"
aria-readonly?: 
  | false
  | true
  | "false"
  | "true"
aria-relevant?: 
  | "all"
  | "text"
  | "additions"
  | "additions text"
  | "removals"
aria-required?: 
  | false
  | true
  | "false"
  | "true"
aria-roledescription?: string
aria-rowcount?: number
aria-rowindex?: number
aria-rowspan?: number
aria-selected?: 
  | false
  | true
  | "false"
  | "true"
aria-setsize?: number
aria-sort?: 
  | "none"
  | "ascending"
  | "descending"
  | "other"
aria-valuemax?: number
aria-valuemin?: number
aria-valuenow?: number
aria-valuetext?: string
dangerouslySetInnerHTML?: { __html: string; }
onCopy?: (event: ClipboardEvent<HTMLAnchorElement>) => void
onCopyCapture?: (event: ClipboardEvent<HTMLAnchorElement>) => void
onCut?: (event: ClipboardEvent<HTMLAnchorElement>) => void
onCutCapture?: (event: ClipboardEvent<HTMLAnchorElement>) => void
onPaste?: (event: ClipboardEvent<HTMLAnchorElement>) => void
onPasteCapture?: (event: ClipboardEvent<HTMLAnchorElement>) => void
onCompositionEnd?: (event: CompositionEvent<HTMLAnchorElement>) => void
onCompositionEndCapture?: (event: CompositionEvent<HTMLAnchorElement>) => void
onCompositionStart?: (event: CompositionEvent<HTMLAnchorElement>) => void
onCompositionStartCapture?: (event: CompositionEvent<HTMLAnchorElement>) => void
onCompositionUpdate?: (event: CompositionEvent<HTMLAnchorElement>) => void
onCompositionUpdateCapture?: (event: CompositionEvent<HTMLAnchorElement>) => void
onFocus?: (event: FocusEvent<HTMLAnchorElement>) => void
onFocusCapture?: (event: FocusEvent<HTMLAnchorElement>) => void
onBlur?: (event: FocusEvent<HTMLAnchorElement>) => void
onBlurCapture?: (event: FocusEvent<HTMLAnchorElement>) => void
onChange?: (event: FormEvent<HTMLAnchorElement>) => void
onChangeCapture?: (event: FormEvent<HTMLAnchorElement>) => void
onBeforeInput?: (event: FormEvent<HTMLAnchorElement>) => void
onBeforeInputCapture?: (event: FormEvent<HTMLAnchorElement>) => void
onInput?: (event: FormEvent<HTMLAnchorElement>) => void
onInputCapture?: (event: FormEvent<HTMLAnchorElement>) => void
onReset?: (event: FormEvent<HTMLAnchorElement>) => void
onResetCapture?: (event: FormEvent<HTMLAnchorElement>) => void
onSubmit?: (event: FormEvent<HTMLAnchorElement>) => void
onSubmitCapture?: (event: FormEvent<HTMLAnchorElement>) => void
onInvalid?: (event: FormEvent<HTMLAnchorElement>) => void
onInvalidCapture?: (event: FormEvent<HTMLAnchorElement>) => void
onLoad?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onLoadCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onError?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onErrorCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onKeyDown?: (event: KeyboardEvent<HTMLAnchorElement>) => void
onKeyDownCapture?: (event: KeyboardEvent<HTMLAnchorElement>) => void
onKeyPress?: (event: KeyboardEvent<HTMLAnchorElement>) => void
onKeyPressCapture?: (event: KeyboardEvent<HTMLAnchorElement>) => void
onKeyUp?: (event: KeyboardEvent<HTMLAnchorElement>) => void
onKeyUpCapture?: (event: KeyboardEvent<HTMLAnchorElement>) => void
onAbort?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onAbortCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onCanPlay?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onCanPlayCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onCanPlayThrough?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onDurationChange?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onDurationChangeCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onEmptied?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onEmptiedCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onEncrypted?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onEncryptedCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onEnded?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onEndedCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onLoadedData?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onLoadedDataCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onLoadedMetadata?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onLoadStart?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onLoadStartCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onPause?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onPauseCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onPlay?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onPlayCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onPlaying?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onPlayingCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onProgress?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onProgressCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onRateChange?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onRateChangeCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onSeeked?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onSeekedCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onSeeking?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onSeekingCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onStalled?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onStalledCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onSuspend?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onSuspendCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onTimeUpdate?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onTimeUpdateCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onVolumeChange?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onVolumeChangeCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onWaiting?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onWaitingCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onAuxClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onAuxClickCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onClickCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onContextMenu?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onContextMenuCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onDoubleClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onDoubleClickCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onDrag?: (event: DragEvent<HTMLAnchorElement>) => void
onDragCapture?: (event: DragEvent<HTMLAnchorElement>) => void
onDragEnd?: (event: DragEvent<HTMLAnchorElement>) => void
onDragEndCapture?: (event: DragEvent<HTMLAnchorElement>) => void
onDragEnter?: (event: DragEvent<HTMLAnchorElement>) => void
onDragEnterCapture?: (event: DragEvent<HTMLAnchorElement>) => void
onDragExit?: (event: DragEvent<HTMLAnchorElement>) => void
onDragExitCapture?: (event: DragEvent<HTMLAnchorElement>) => void
onDragLeave?: (event: DragEvent<HTMLAnchorElement>) => void
onDragLeaveCapture?: (event: DragEvent<HTMLAnchorElement>) => void
onDragOver?: (event: DragEvent<HTMLAnchorElement>) => void
onDragOverCapture?: (event: DragEvent<HTMLAnchorElement>) => void
onDragStart?: (event: DragEvent<HTMLAnchorElement>) => void
onDragStartCapture?: (event: DragEvent<HTMLAnchorElement>) => void
onDrop?: (event: DragEvent<HTMLAnchorElement>) => void
onDropCapture?: (event: DragEvent<HTMLAnchorElement>) => void
onMouseDown?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onMouseDownCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onMouseEnter?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onMouseLeave?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onMouseMove?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onMouseMoveCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onMouseOut?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onMouseOutCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onMouseOver?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onMouseOverCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onMouseUp?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onMouseUpCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
onSelect?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onSelectCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
onTouchCancel?: (event: TouchEvent<HTMLAnchorElement>) => void
onTouchCancelCapture?: (event: TouchEvent<HTMLAnchorElement>) => void
onTouchEnd?: (event: TouchEvent<HTMLAnchorElement>) => void
onTouchEndCapture?: (event: TouchEvent<HTMLAnchorElement>) => void
onTouchMove?: (event: TouchEvent<HTMLAnchorElement>) => void
onTouchMoveCapture?: (event: TouchEvent<HTMLAnchorElement>) => void
onTouchStart?: (event: TouchEvent<HTMLAnchorElement>) => void
onTouchStartCapture?: (event: TouchEvent<HTMLAnchorElement>) => void
onPointerDown?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerDownCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerMove?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerMoveCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerUp?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerUpCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerCancel?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerCancelCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerEnter?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerEnterCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerLeave?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerLeaveCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerOver?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerOverCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerOut?: (event: PointerEvent<HTMLAnchorElement>) => void
onPointerOutCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
onGotPointerCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
onGotPointerCaptureCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
onLostPointerCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
onLostPointerCaptureCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
onScroll?: (event: UIEvent<HTMLAnchorElement>) => void
onScrollCapture?: (event: UIEvent<HTMLAnchorElement>) => void
onWheel?: (event: WheelEvent<HTMLAnchorElement>) => void
onWheelCapture?: (event: WheelEvent<HTMLAnchorElement>) => void
onAnimationStart?: (event: AnimationEvent<HTMLAnchorElement>) => void
onAnimationStartCapture?: (event: AnimationEvent<HTMLAnchorElement>) => void
onAnimationEnd?: (event: AnimationEvent<HTMLAnchorElement>) => void
onAnimationEndCapture?: (event: AnimationEvent<HTMLAnchorElement>) => void
onAnimationIteration?: (event: AnimationEvent<HTMLAnchorElement>) => void
onAnimationIterationCapture?: (event: AnimationEvent<HTMLAnchorElement>) => void
onTransitionEnd?: (event: TransitionEvent<HTMLAnchorElement>) => void
onTransitionEndCapture?: (event: TransitionEvent<HTMLAnchorElement>) => void
`;

exports[`TextLinkRenderer 1`] = `
inline?: boolean
children: (styleProps: StyleProps) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
`;

exports[`Textarea 1`] = `
value: 
  | string
  | number
  | string[]
onChange: (event: FormEvent<HTMLTextAreaElement>) => void
onBlur?: (event: FocusEvent<HTMLTextAreaElement>) => void
onFocus?: (event: FocusEvent<HTMLTextAreaElement>) => void
placeholder?: string
characterLimit?: number
lines?: number
lineLimit?: number
grow?: boolean
tone?: 
  | "critical"
  | "positive"
  | "neutral"
id: string
autoComplete?: string
data?: Record<string, ReactText>
disabled?: boolean
label?: ReactNode
name?: string
aria-describedby?: string
message?: ReactNode
reserveMessageSpace?: boolean
secondaryLabel?: ReactNode
tertiaryLabel?: ReactNode
description?: ReactNode
ref?: 
  | (instance: HTMLTextAreaElement | null) => void
  | RefObject<HTMLTextAreaElement>
`;

exports[`ThemeNameConsumer 1`] = `children: (name: string) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>`;

exports[`ThemeProvider 1`] = `
theme: Theme
children: ReactNode
`;

exports[`TickCircleIcon 1`] = `
tone?: 
  | "info"
  | "critical"
  | "positive"
  | "formAccent"
  | "link"
  | "neutral"
  | "secondary"
size?: 
  | "fill"
  | "small"
  | "large"
  | "standard"
inline?: boolean
`;

exports[`TickIcon 1`] = `
tone?: 
  | "info"
  | "critical"
  | "positive"
  | "formAccent"
  | "link"
  | "neutral"
  | "secondary"
size?: 
  | "fill"
  | "small"
  | "large"
  | "standard"
inline?: boolean
`;

exports[`useThemeName 1`] = ``;
