// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Actions 1`] = `
{
  children: ReactNode
}
`;

exports[`Alert 1`] = `
{
  children: ReactNode
  id?: string
  tone?: 
    | "critical"
    | "info"
    | "positive"
  weight?: 
    | "regular"
    | "strong"
}
`;

exports[`Autosuggest 1`] = `
{
  aria-describedby?: string
  autoFocus?: boolean
  automaticSelection?: boolean
  data?: Record<string, ReactText>
  description?: ReactNode
  disabled?: boolean
  id: string
  label?: ReactNode
  message?: ReactNode
  name?: string
  onBlur?: () => void
  onChange: (value: AutosuggestValue<Value>) => void
  onClear?: () => void
  onFocus?: () => void
  placeholder?: string
  reserveMessageSpace?: boolean
  secondaryLabel?: ReactNode
  secondaryMessage?: ReactNode
  showMobileBackdrop?: boolean
  suggestions: (Suggestion<Value> | GroupedSuggestion<Value>)[]
  tertiaryLabel?: ReactNode
  tone?: 
    | "critical"
    | "neutral"
    | "positive"
  value: AutosuggestValue<Value>
}
`;

exports[`Badge 1`] = `
{
  children: string
  id?: string
  tone?: 
    | "critical"
    | "info"
    | "neutral"
    | "positive"
  weight?: 
    | "regular"
    | "strong"
}
`;

exports[`Box 1`] = `
{
  about?: string
  accept?: string
  acceptCharset?: string
  accessKey?: string
  action?: string
  alignItems?: ResponsiveProp<
    | "center"
    | "flexEnd"
    | "flexStart"
  >
  allowFullScreen?: boolean
  allowTransparency?: boolean
  alt?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  as?: string
  async?: boolean
  autoCapitalize?: string
  autoComplete?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoPlay?: boolean
  autoSave?: string
  background?: 
    | "brand"
    | "brandAccent"
    | "brandAccentActive"
    | "brandAccentHover"
    | "card"
    | "critical"
    | "criticalLight"
    | "formAccent"
    | "formAccentActive"
    | "formAccentDisabled"
    | "formAccentHover"
    | "info"
    | "infoLight"
    | "input"
    | "inputDisabled"
    | "neutral"
    | "neutralLight"
    | "positive"
    | "positiveLight"
    | "selection"
  borderRadius?: 
    | "full"
    | "standard"
  boxShadow?: 
    | "borderCritical"
    | "borderFormAccent"
    | "borderFormAccentLarge"
    | "borderStandard"
    | "large"
    | "medium"
    | "outlineFocus"
    | "small"
  capture?: 
    | false
    | string
    | true
  cellPadding?: 
    | number
    | string
  cellSpacing?: 
    | number
    | string
  challenge?: string
  charSet?: string
  checked?: boolean
  children?: ReactNode
  cite?: string
  classID?: string
  className?: string
  colSpan?: number
  color?: string
  cols?: number
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "animate"
    | "animateMotion"
    | "animateTransform"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "circle"
    | "cite"
    | "clipPath"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "defs"
    | "del"
    | "desc"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "ellipse"
    | "em"
    | "embed"
    | "feBlend"
    | "feColorMatrix"
    | "feComponentTransfer"
    | "feComposite"
    | "feConvolveMatrix"
    | "feDiffuseLighting"
    | "feDisplacementMap"
    | "feDistantLight"
    | "feDropShadow"
    | "feFlood"
    | "feFuncA"
    | "feFuncB"
    | "feFuncG"
    | "feFuncR"
    | "feGaussianBlur"
    | "feImage"
    | "feMerge"
    | "feMergeNode"
    | "feMorphology"
    | "feOffset"
    | "fePointLight"
    | "feSpecularLighting"
    | "feSpotLight"
    | "feTile"
    | "feTurbulence"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "filter"
    | "footer"
    | "foreignObject"
    | "form"
    | "g"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "image"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "line"
    | "linearGradient"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "marker"
    | "mask"
    | "menu"
    | "menuitem"
    | "meta"
    | "metadata"
    | "meter"
    | "mpath"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "path"
    | "pattern"
    | "picture"
    | "polygon"
    | "polyline"
    | "pre"
    | "progress"
    | "q"
    | "radialGradient"
    | "rect"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "stop"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "svg"
    | "switch"
    | "symbol"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "text"
    | "textPath"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "tspan"
    | "u"
    | "ul"
    | "use"
    | "var"
    | "video"
    | "view"
    | "wbr"
    | "webview"
    | ComponentClass<any, any>
    | FunctionComponent<any>
  content?: string
  contentEditable?: boolean
  contextMenu?: string
  controls?: boolean
  coords?: string
  crossOrigin?: string
  cursor?: "pointer"
  dangerouslySetInnerHTML?: { __html: string; }
  data?: string
  datatype?: string
  dateTime?: string
  default?: boolean
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  defer?: boolean
  dir?: string
  disabled?: boolean
  display?: ResponsiveProp<
    | "block"
    | "flex"
    | "inline"
    | "inlineBlock"
    | "none"
  >
  download?: any
  draggable?: boolean
  encType?: string
  flexDirection?: ResponsiveProp<
    | "column"
    | "columnReverse"
    | "row"
    | "rowReverse"
  >
  form?: string
  formAction?: string
  formEncType?: string
  formMethod?: string
  formNoValidate?: boolean
  formTarget?: string
  frameBorder?: 
    | number
    | string
  headers?: string
  height?: 
    | "full"
    | "touchable"
  hidden?: boolean
  high?: number
  href?: string
  hrefLang?: string
  htmlFor?: string
  httpEquiv?: string
  id?: string
  inlist?: any
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  integrity?: string
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  justifyContent?: ResponsiveProp<
    | "center"
    | "flexEnd"
    | "flexStart"
    | "spaceBetween"
  >
  keyParams?: string
  keyType?: string
  kind?: string
  label?: string
  lang?: string
  list?: string
  loop?: boolean
  low?: number
  manifest?: string
  margin?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  marginBottom?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  marginHeight?: number
  marginLeft?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  marginRight?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  marginTop?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  marginWidth?: number
  marginX?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  marginY?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  max?: 
    | number
    | string
  maxLength?: number
  media?: string
  mediaGroup?: string
  method?: string
  min?: 
    | number
    | string
  minLength?: number
  multiple?: boolean
  muted?: boolean
  name?: string
  noValidate?: boolean
  nonce?: string
  onAbort?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLElement>) => void
  onBlur?: (event: FocusEvent<HTMLElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onChange?: (event: FormEvent<HTMLElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLElement>) => void
  onClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLElement>) => void
  onCut?: (event: ClipboardEvent<HTMLElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLElement>) => void
  onDragCapture?: (event: DragEvent<HTMLElement>) => void
  onDragEnd?: (event: DragEvent<HTMLElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLElement>) => void
  onDragEnter?: (event: DragEvent<HTMLElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLElement>) => void
  onDragExit?: (event: DragEvent<HTMLElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLElement>) => void
  onDragLeave?: (event: DragEvent<HTMLElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLElement>) => void
  onDragOver?: (event: DragEvent<HTMLElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLElement>) => void
  onDragStart?: (event: DragEvent<HTMLElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLElement>) => void
  onDrop?: (event: DragEvent<HTMLElement>) => void
  onDropCapture?: (event: DragEvent<HTMLElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLElement>) => void
  onInput?: (event: FormEvent<HTMLElement>) => void
  onInputCapture?: (event: FormEvent<HTMLElement>) => void
  onInvalid?: (event: FormEvent<HTMLElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLElement>) => void
  onPause?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onReset?: (event: FormEvent<HTMLElement>) => void
  onResetCapture?: (event: FormEvent<HTMLElement>) => void
  onScroll?: (event: UIEvent<HTMLElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLElement>) => void
  open?: boolean
  optimum?: number
  padding?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  paddingBottom?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  paddingLeft?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  paddingRight?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  paddingTop?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  paddingX?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  paddingY?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  pattern?: string
  placeholder?: string
  playsInline?: boolean
  pointerEvents?: "none"
  position?: 
    | "absolute"
    | "fixed"
    | "relative"
  poster?: string
  prefix?: string
  preload?: string
  property?: string
  radioGroup?: string
  readOnly?: boolean
  ref?: 
    | (instance: HTMLElement | null) => void
    | RefObject<HTMLElement>
  rel?: string
  required?: boolean
  resource?: string
  results?: number
  reversed?: boolean
  role?: string
  rowSpan?: number
  rows?: number
  sandbox?: string
  scope?: string
  scoped?: boolean
  scrolling?: string
  seamless?: boolean
  security?: string
  selected?: boolean
  shape?: string
  size?: number
  sizes?: string
  slot?: string
  span?: number
  spellCheck?: boolean
  src?: string
  srcDoc?: string
  srcLang?: string
  srcSet?: string
  start?: number
  step?: 
    | number
    | string
  style?: CSSProperties
  summary?: string
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  target?: string
  title?: string
  transform?: "touchable"
  transition?: 
    | "fast"
    | "touchable"
  type?: string
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  useMap?: string
  value?: 
    | number
    | string
    | string[]
  vocab?: string
  width?: 
    | "full"
    | "touchable"
  wmode?: string
  wrap?: string
}
`;

exports[`BoxRenderer 1`] = `
{
  alignItems?: ResponsiveProp<
    | "center"
    | "flexEnd"
    | "flexStart"
  >
  background?: 
    | "brand"
    | "brandAccent"
    | "brandAccentActive"
    | "brandAccentHover"
    | "card"
    | "critical"
    | "criticalLight"
    | "formAccent"
    | "formAccentActive"
    | "formAccentDisabled"
    | "formAccentHover"
    | "info"
    | "infoLight"
    | "input"
    | "inputDisabled"
    | "neutral"
    | "neutralLight"
    | "positive"
    | "positiveLight"
    | "selection"
  borderRadius?: 
    | "full"
    | "standard"
  boxShadow?: 
    | "borderCritical"
    | "borderFormAccent"
    | "borderFormAccentLarge"
    | "borderStandard"
    | "large"
    | "medium"
    | "outlineFocus"
    | "small"
  children: (className: string) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)> | null
  component: 
    | "a"
    | "abbr"
    | "address"
    | "animate"
    | "animateMotion"
    | "animateTransform"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "circle"
    | "cite"
    | "clipPath"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "defs"
    | "del"
    | "desc"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "ellipse"
    | "em"
    | "embed"
    | "feBlend"
    | "feColorMatrix"
    | "feComponentTransfer"
    | "feComposite"
    | "feConvolveMatrix"
    | "feDiffuseLighting"
    | "feDisplacementMap"
    | "feDistantLight"
    | "feDropShadow"
    | "feFlood"
    | "feFuncA"
    | "feFuncB"
    | "feFuncG"
    | "feFuncR"
    | "feGaussianBlur"
    | "feImage"
    | "feMerge"
    | "feMergeNode"
    | "feMorphology"
    | "feOffset"
    | "fePointLight"
    | "feSpecularLighting"
    | "feSpotLight"
    | "feTile"
    | "feTurbulence"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "filter"
    | "footer"
    | "foreignObject"
    | "form"
    | "g"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "image"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "line"
    | "linearGradient"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "marker"
    | "mask"
    | "menu"
    | "menuitem"
    | "meta"
    | "metadata"
    | "meter"
    | "mpath"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "path"
    | "pattern"
    | "picture"
    | "polygon"
    | "polyline"
    | "pre"
    | "progress"
    | "q"
    | "radialGradient"
    | "rect"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "stop"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "svg"
    | "switch"
    | "symbol"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "text"
    | "textPath"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "tspan"
    | "u"
    | "ul"
    | "use"
    | "var"
    | "video"
    | "view"
    | "wbr"
    | "webview"
    | ComponentClass<any, any>
    | FunctionComponent<any>
  cursor?: "pointer"
  display?: ResponsiveProp<
    | "block"
    | "flex"
    | "inline"
    | "inlineBlock"
    | "none"
  >
  flexDirection?: ResponsiveProp<
    | "column"
    | "columnReverse"
    | "row"
    | "rowReverse"
  >
  height?: 
    | "full"
    | "touchable"
  justifyContent?: ResponsiveProp<
    | "center"
    | "flexEnd"
    | "flexStart"
    | "spaceBetween"
  >
  margin?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  marginBottom?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  marginLeft?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  marginRight?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  marginTop?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  marginX?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  marginY?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  padding?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  paddingBottom?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  paddingLeft?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  paddingRight?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  paddingTop?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  paddingX?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  paddingY?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
  pointerEvents?: "none"
  position?: 
    | "absolute"
    | "fixed"
    | "relative"
  transform?: "touchable"
  transition?: 
    | "fast"
    | "touchable"
  width?: 
    | "full"
    | "touchable"
}
`;

exports[`BraidLoadableProvider 1`] = `
{
  children: ReactNode
  fallback?: ReactNode
  styleBody?: boolean
  themeName: string
}
`;

exports[`BraidProvider 1`] = `
{
  children: ReactNode
  styleBody?: boolean
  theme: {
    background: string
    name: string
    treatTheme: string
    webFonts: { linkTag: string; }[]
  }
}
`;

exports[`Bullet 1`] = `
{
  children: ReactNode
}
`;

exports[`BulletList 1`] = `
{
  children: ReactNode
  size?: 
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  space?: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
}
`;

exports[`Button 1`] = `
{
  aria-describedby?: string
  children?: ReactNode
  id?: string
  loading?: boolean
  onClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  type?: 
    | "button"
    | "reset"
    | "submit"
  weight?: 
    | "regular"
    | "strong"
    | "weak"
}
`;

exports[`ButtonRenderer 1`] = `
{
  children: (ButtonChildren: ComponentType<ButtonChildrenProps>, styleProps: { style: CSSProperties; className: string; }) => ReactNode
  loading?: boolean
  weight?: 
    | "regular"
    | "strong"
    | "weak"
}
`;

exports[`Card 1`] = `
{
  children?: ReactNode
}
`;

exports[`Checkbox 1`] = `
{
  checked: boolean
  children?: ReactNode
  data?: Record<string, ReactText>
  disabled?: boolean
  id: string
  label: ReactNode
  message?: ReactNode
  name?: string
  onChange: (event: FormEvent<HTMLFormElement>) => void
  ref?: 
    | (instance: HTMLInputElement | null) => void
    | RefObject<HTMLInputElement>
  reserveMessageSpace?: boolean
  tone?: 
    | "critical"
    | "neutral"
  value?: 
    | number
    | string
    | string[]
}
`;

exports[`Column 1`] = `
{
  children: ReactNode
  width?: 
    | "1/2"
    | "1/3"
    | "1/4"
    | "1/5"
    | "2/3"
    | "2/5"
    | "3/4"
    | "3/5"
    | "4/5"
    | "content"
}
`;

exports[`Columns 1`] = `
{
  children: 
    | Column
    | Column[]
  collapse?: boolean
  reverse?: boolean
  space: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
}
`;

exports[`ContentBlock 1`] = `
{
  children: ReactNode
  width?: 
    | "large"
    | "medium"
}
`;

exports[`Divider 1`] = `
{
}
`;

exports[`Dropdown 1`] = `
{
  aria-describedby?: string
  autoComplete?: string
  autoFocus?: boolean
  children: 
    | AllHTMLAttributes<HTMLOptGroupElement | HTMLOptionElement>
    | AllHTMLAttributes<HTMLOptGroupElement | HTMLOptionElement>[]
  data?: Record<string, ReactText>
  description?: ReactNode
  disabled?: boolean
  id: string
  label?: ReactNode
  message?: ReactNode
  name?: string
  onBlur?: (event: FocusEvent<HTMLSelectElement>) => void
  onChange: (event: FormEvent<HTMLSelectElement>) => void
  onFocus?: (event: FocusEvent<HTMLSelectElement>) => void
  placeholder?: string
  ref?: 
    | (instance: HTMLSelectElement | null) => void
    | RefObject<HTMLSelectElement>
  reserveMessageSpace?: boolean
  secondaryLabel?: ReactNode
  tertiaryLabel?: ReactNode
  tone?: 
    | "critical"
    | "neutral"
    | "positive"
  value: 
    | number
    | string
    | string[]
}
`;

exports[`FieldLabel 1`] = `
{
  description?: ReactNode
  htmlFor: 
    | false
    | string
  id?: string
  label?: ReactNode
  secondaryLabel?: ReactNode
  tertiaryLabel?: ReactNode
}
`;

exports[`FieldMessage 1`] = `
{
  disabled?: boolean
  id: string
  message: ReactNode
  reserveMessageSpace?: boolean
  secondaryMessage?: ReactNode
  tone?: 
    | "critical"
    | "neutral"
    | "positive"
}
`;

exports[`Heading 1`] = `
{
  _LEGACY_SPACE_?: boolean
  children: ReactNode
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "animate"
    | "animateMotion"
    | "animateTransform"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "circle"
    | "cite"
    | "clipPath"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "defs"
    | "del"
    | "desc"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "ellipse"
    | "em"
    | "embed"
    | "feBlend"
    | "feColorMatrix"
    | "feComponentTransfer"
    | "feComposite"
    | "feConvolveMatrix"
    | "feDiffuseLighting"
    | "feDisplacementMap"
    | "feDistantLight"
    | "feDropShadow"
    | "feFlood"
    | "feFuncA"
    | "feFuncB"
    | "feFuncG"
    | "feFuncR"
    | "feGaussianBlur"
    | "feImage"
    | "feMerge"
    | "feMergeNode"
    | "feMorphology"
    | "feOffset"
    | "fePointLight"
    | "feSpecularLighting"
    | "feSpotLight"
    | "feTile"
    | "feTurbulence"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "filter"
    | "footer"
    | "foreignObject"
    | "form"
    | "g"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "image"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "line"
    | "linearGradient"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "marker"
    | "mask"
    | "menu"
    | "menuitem"
    | "meta"
    | "metadata"
    | "meter"
    | "mpath"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "path"
    | "pattern"
    | "picture"
    | "polygon"
    | "polyline"
    | "pre"
    | "progress"
    | "q"
    | "radialGradient"
    | "rect"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "stop"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "svg"
    | "switch"
    | "symbol"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "text"
    | "textPath"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "tspan"
    | "u"
    | "ul"
    | "use"
    | "var"
    | "video"
    | "view"
    | "wbr"
    | "webview"
    | ComponentClass<any, any>
    | FunctionComponent<any>
  id?: string
  level: 
    | "1"
    | "2"
    | "3"
    | "4"
  weight?: 
    | "regular"
    | "weak"
}
`;

exports[`Hidden 1`] = `
{
  children: ReactNode
  desktop?: boolean
  inline?: boolean
  mobile?: boolean
  print?: boolean
  screen?: boolean
}
`;

exports[`IconAdd 1`] = `
{
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconBookmark 1`] = `
{
  active?: boolean
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconChevron 1`] = `
{
  direction?: 
    | "down"
    | "left"
    | "right"
    | "up"
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconClear 1`] = `
{
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconCritical 1`] = `
{
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconDate 1`] = `
{
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconInfo 1`] = `
{
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconLocation 1`] = `
{
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconMoney 1`] = `
{
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconOverflow 1`] = `
{
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconPositive 1`] = `
{
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconSearch 1`] = `
{
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconSocialFacebook 1`] = `
{
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconSocialTwitter 1`] = `
{
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`IconTick 1`] = `
{
  size?: 
    | "fill"
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
}
`;

exports[`Inline 1`] = `
{
  children: ReactNode
  space: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
}
`;

exports[`MonthPicker 1`] = `
{
  ascendingYears?: boolean
  description?: ReactNode
  disabled?: boolean
  id: string
  label?: ReactNode
  maxYear?: number
  message?: ReactNode
  minYear?: number
  onBlur?: FocusHandler
  onChange: ChangeHandler
  onFocus?: FocusHandler
  reserveMessageSpace?: boolean
  secondaryLabel?: ReactNode
  tertiaryLabel?: ReactNode
  tone?: 
    | "critical"
    | "neutral"
    | "positive"
  value: {
    month?: number
    year?: number
  }
}
`;

exports[`OverflowMenu 1`] = `
{
  children: 
    | ReactElement<OverflowMenuItemProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
    | ReactElement<OverflowMenuItemProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>[]
  label: string
  onClose?: () => void
  onOpen?: () => void
}
`;

exports[`OverflowMenuItem 1`] = `
{
  children: ReactNode
  onClick?: () => void
  type?: 
    | "button"
    | "link"
}
`;

exports[`Radio 1`] = `
{
  checked: boolean
  children?: ReactNode
  data?: Record<string, ReactText>
  disabled?: boolean
  id: string
  label: ReactNode
  name?: string
  onChange: (event: FormEvent<HTMLFormElement>) => void
  ref?: 
    | (instance: HTMLInputElement | null) => void
    | RefObject<HTMLInputElement>
  tone?: 
    | "critical"
    | "neutral"
  value?: 
    | number
    | string
    | string[]
}
`;

exports[`Secondary 1`] = `
{
  children: ReactNode
  id?: string
}
`;

exports[`Stack 1`] = `
{
  children: ReactNode
  dividers?: boolean
  space: ResponsiveProp<
    | "gutter"
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
  >
}
`;

exports[`Strong 1`] = `
{
  children: ReactNode
  id?: string
}
`;

exports[`Text 1`] = `
{
  _LEGACY_SPACE_?: boolean
  baseline?: boolean
  children?: ReactNode
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "animate"
    | "animateMotion"
    | "animateTransform"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "circle"
    | "cite"
    | "clipPath"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "defs"
    | "del"
    | "desc"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "ellipse"
    | "em"
    | "embed"
    | "feBlend"
    | "feColorMatrix"
    | "feComponentTransfer"
    | "feComposite"
    | "feConvolveMatrix"
    | "feDiffuseLighting"
    | "feDisplacementMap"
    | "feDistantLight"
    | "feDropShadow"
    | "feFlood"
    | "feFuncA"
    | "feFuncB"
    | "feFuncG"
    | "feFuncR"
    | "feGaussianBlur"
    | "feImage"
    | "feMerge"
    | "feMergeNode"
    | "feMorphology"
    | "feOffset"
    | "fePointLight"
    | "feSpecularLighting"
    | "feSpotLight"
    | "feTile"
    | "feTurbulence"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "filter"
    | "footer"
    | "foreignObject"
    | "form"
    | "g"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "image"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "line"
    | "linearGradient"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "marker"
    | "mask"
    | "menu"
    | "menuitem"
    | "meta"
    | "metadata"
    | "meter"
    | "mpath"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "path"
    | "pattern"
    | "picture"
    | "polygon"
    | "polyline"
    | "pre"
    | "progress"
    | "q"
    | "radialGradient"
    | "rect"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "stop"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "svg"
    | "switch"
    | "symbol"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "text"
    | "textPath"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "tspan"
    | "u"
    | "ul"
    | "use"
    | "var"
    | "video"
    | "view"
    | "wbr"
    | "webview"
    | ComponentClass<any, any>
    | FunctionComponent<any>
  id?: string
  size?: 
    | "large"
    | "small"
    | "standard"
    | "xsmall"
  tone?: 
    | "critical"
    | "formAccent"
    | "info"
    | "link"
    | "neutral"
    | "positive"
    | "secondary"
  weight?: 
    | "medium"
    | "regular"
    | "strong"
}
`;

exports[`TextField 1`] = `
{
  aria-describedby?: string
  autoComplete?: string
  autoFocus?: boolean
  data?: Record<string, ReactText>
  description?: ReactNode
  disabled?: boolean
  id: string
  label?: ReactNode
  message?: ReactNode
  name?: string
  onBlur?: (event: FocusEvent<HTMLInputElement>) => void
  onChange: (event: FormEvent<HTMLInputElement>) => void
  onClear?: () => void
  onFocus?: (event: FocusEvent<HTMLInputElement>) => void
  placeholder?: string
  ref?: 
    | (instance: HTMLInputElement | null) => void
    | RefObject<HTMLInputElement>
  reserveMessageSpace?: boolean
  secondaryLabel?: ReactNode
  tertiaryLabel?: ReactNode
  tone?: 
    | "critical"
    | "neutral"
    | "positive"
  type?: 
    | "email"
    | "number"
    | "password"
    | "search"
    | "tel"
    | "text"
    | "url"
  value: 
    | number
    | string
    | string[]
}
`;

exports[`TextLink 1`] = `
{
  about?: string
  accept?: string
  acceptCharset?: string
  accessKey?: string
  action?: string
  allowFullScreen?: boolean
  allowTransparency?: boolean
  alt?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  as?: string
  async?: boolean
  autoCapitalize?: string
  autoComplete?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoPlay?: boolean
  autoSave?: string
  capture?: 
    | false
    | string
    | true
  cellPadding?: 
    | number
    | string
  cellSpacing?: 
    | number
    | string
  challenge?: string
  charSet?: string
  checked?: boolean
  children?: ReactNode
  cite?: string
  classID?: string
  colSpan?: number
  color?: string
  cols?: number
  content?: string
  contentEditable?: boolean
  contextMenu?: string
  controls?: boolean
  coords?: string
  crossOrigin?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data?: string
  datatype?: string
  dateTime?: string
  default?: boolean
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  defer?: boolean
  dir?: string
  disabled?: boolean
  download?: any
  draggable?: boolean
  encType?: string
  form?: string
  formAction?: string
  formEncType?: string
  formMethod?: string
  formNoValidate?: boolean
  formTarget?: string
  frameBorder?: 
    | number
    | string
  headers?: string
  height?: 
    | number
    | string
  hidden?: boolean
  high?: number
  href?: string
  hrefLang?: string
  htmlFor?: string
  httpEquiv?: string
  id?: string
  inlist?: any
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  integrity?: string
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  keyParams?: string
  keyType?: string
  kind?: string
  label?: string
  lang?: string
  list?: string
  loop?: boolean
  low?: number
  manifest?: string
  marginHeight?: number
  marginWidth?: number
  max?: 
    | number
    | string
  maxLength?: number
  media?: string
  mediaGroup?: string
  method?: string
  min?: 
    | number
    | string
  minLength?: number
  multiple?: boolean
  muted?: boolean
  name?: string
  noValidate?: boolean
  nonce?: string
  onAbort?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLAnchorElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLAnchorElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLAnchorElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLAnchorElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLAnchorElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLAnchorElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLAnchorElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLAnchorElement>) => void
  onBlur?: (event: FocusEvent<HTMLAnchorElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLAnchorElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onChange?: (event: FormEvent<HTMLAnchorElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLAnchorElement>) => void
  onClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLAnchorElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLAnchorElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLAnchorElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLAnchorElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLAnchorElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLAnchorElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLAnchorElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLAnchorElement>) => void
  onCut?: (event: ClipboardEvent<HTMLAnchorElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLAnchorElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLAnchorElement>) => void
  onDragCapture?: (event: DragEvent<HTMLAnchorElement>) => void
  onDragEnd?: (event: DragEvent<HTMLAnchorElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLAnchorElement>) => void
  onDragEnter?: (event: DragEvent<HTMLAnchorElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLAnchorElement>) => void
  onDragExit?: (event: DragEvent<HTMLAnchorElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLAnchorElement>) => void
  onDragLeave?: (event: DragEvent<HTMLAnchorElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLAnchorElement>) => void
  onDragOver?: (event: DragEvent<HTMLAnchorElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLAnchorElement>) => void
  onDragStart?: (event: DragEvent<HTMLAnchorElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLAnchorElement>) => void
  onDrop?: (event: DragEvent<HTMLAnchorElement>) => void
  onDropCapture?: (event: DragEvent<HTMLAnchorElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLAnchorElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLAnchorElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
  onInput?: (event: FormEvent<HTMLAnchorElement>) => void
  onInputCapture?: (event: FormEvent<HTMLAnchorElement>) => void
  onInvalid?: (event: FormEvent<HTMLAnchorElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLAnchorElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLAnchorElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLAnchorElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLAnchorElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLAnchorElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLAnchorElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLAnchorElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLAnchorElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLAnchorElement>) => void
  onPause?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLAnchorElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLAnchorElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onReset?: (event: FormEvent<HTMLAnchorElement>) => void
  onResetCapture?: (event: FormEvent<HTMLAnchorElement>) => void
  onScroll?: (event: UIEvent<HTMLAnchorElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLAnchorElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLAnchorElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLAnchorElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLAnchorElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLAnchorElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLAnchorElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLAnchorElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLAnchorElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLAnchorElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLAnchorElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLAnchorElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLAnchorElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLAnchorElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLAnchorElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLAnchorElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLAnchorElement>) => void
  open?: boolean
  optimum?: number
  pattern?: string
  placeholder?: string
  playsInline?: boolean
  poster?: string
  prefix?: string
  preload?: string
  property?: string
  radioGroup?: string
  readOnly?: boolean
  rel?: string
  required?: boolean
  resource?: string
  results?: number
  reversed?: boolean
  role?: string
  rowSpan?: number
  rows?: number
  sandbox?: string
  scope?: string
  scoped?: boolean
  scrolling?: string
  seamless?: boolean
  security?: string
  selected?: boolean
  shape?: string
  size?: number
  sizes?: string
  slot?: string
  span?: number
  spellCheck?: boolean
  src?: string
  srcDoc?: string
  srcLang?: string
  srcSet?: string
  start?: number
  step?: 
    | number
    | string
  summary?: string
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  target?: string
  title?: string
  type?: string
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  useMap?: string
  value?: 
    | number
    | string
    | string[]
  vocab?: string
  width?: 
    | number
    | string
  wmode?: string
  wrap?: string
}
`;

exports[`TextLinkRenderer 1`] = `
{
  children: (styleProps: StyleProps) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
}
`;

exports[`Textarea 1`] = `
{
  aria-describedby?: string
  autoComplete?: string
  autoFocus?: boolean
  characterLimit?: number
  data?: Record<string, ReactText>
  description?: ReactNode
  disabled?: boolean
  grow?: boolean
  id: string
  label?: ReactNode
  lineLimit?: number
  lines?: number
  message?: ReactNode
  name?: string
  onBlur?: (event: FocusEvent<HTMLTextAreaElement>) => void
  onChange: (event: FormEvent<HTMLTextAreaElement>) => void
  onFocus?: (event: FocusEvent<HTMLTextAreaElement>) => void
  onPaste?: (event: ClipboardEvent<HTMLTextAreaElement>) => void
  placeholder?: string
  ref?: 
    | (instance: HTMLTextAreaElement | null) => void
    | RefObject<HTMLTextAreaElement>
  reserveMessageSpace?: boolean
  secondaryLabel?: ReactNode
  tertiaryLabel?: ReactNode
  tone?: 
    | "critical"
    | "neutral"
    | "positive"
  value: 
    | number
    | string
    | string[]
}
`;

exports[`ThemeNameConsumer 1`] = `
{
  children: (name: string) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
}
`;

exports[`Toggle 1`] = `
{
  align?: 
    | "left"
    | "right"
  id: string
  label: ReactNode
  on: boolean
  onChange: ChangeHandler
}
`;

exports[`useThemeName 1`] = `
{
}
`;
