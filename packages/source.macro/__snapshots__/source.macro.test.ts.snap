// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`source.macro 1. smoke test: 1. smoke test 1`] = `


import source from './source.macro';

const result = source({
  // comment
  hello: () => 'world'
});
      

      ↓ ↓ ↓ ↓ ↓ ↓

const result = {
  code: '{\\n  // comment\\n  hello: () => "world"\\n}',
  value: {
    // comment
    hello: () => 'world',
  },
};

`;

exports[`source.macro 2. react component: 2. react component 1`] = `


import source from './source.macro';

const result = source(
  <div />
);
      

      ↓ ↓ ↓ ↓ ↓ ↓

const result = {
  code: '<div />',
  value: <div />,
};

`;

exports[`source.macro 3. ignores types: 3. ignores types 1`] = `


import type { Source } from './source.macro';

const foo = 'bar';
      

      ↓ ↓ ↓ ↓ ↓ ↓

const foo = 'bar';

`;

exports[`source.macro 4. with new lines: 4. with new lines 1`] = `


import source from './source.macro';

const options = source(() => {
  sideEffect();

  return [
    { value: "1", label: "Option 1" },
    { value: "2", label: "Option 2" },
    { value: "3", label: "Option 3" },
  ];
});
      

      ↓ ↓ ↓ ↓ ↓ ↓

const options = {
  code: '() => {\\n  sideEffect()\\n\\n  return [\\n    { value: "1", label: "Option 1" },\\n    { value: "2", label: "Option 2" },\\n    { value: "3", label: "Option 3" },\\n  ]\\n}',
  value: () => {
    sideEffect();
    return [
      {
        value: '1',
        label: 'Option 1',
      },
      {
        value: '2',
        label: 'Option 2',
      },
      {
        value: '3',
        label: 'Option 3',
      },
    ];
  },
};

`;

exports[`source.macro 5. code only: 5. code only 1`] = `


import source from './source.macro';

const result = source({
  hello: () => ({ world: '!', foo: 'bar'}),
});
      

      ↓ ↓ ↓ ↓ ↓ ↓

const result = '{\\n  hello: () => ({ world: "!", foo: "bar" })\\n}';

`;

exports[`source.macro 6. JSX with playroom state: 6. JSX with playroom state 1`] = `


import source from './source.macro';
const result =
  <Code>
    {({ setDefaultState, getState: getStateUntyped }) => {
      const getState = getStateUntyped as (key: string) => MockJob[];
      return source(
        <>
          {setDefaultState('jobs', [
            {
              id: 1,
              title: 'Lead Designer',
              location: 'Melbourne',
            },
            {
              id: 2,
              title: 'Senior Developer',
              location: 'Sydney',
            },
            {
              id: 3,
              title: 'Product Manager',
              location: 'Canberra',
            },
          ])}

          <Stack space="medium">
            {getState('jobs').map((job) => (
              <Card key={job.id}>
                <Stack space="small">
                  <Text weight="strong">{job.title}</Text>
                  <Text>{job.location}</Text>
                </Stack>
              </Card>
            ))}
          </Stack>
        </>,
      );
    }}
  </Code>;
      

      ↓ ↓ ↓ ↓ ↓ ↓

const result = (
  <Code>
    {({ setDefaultState, getState: getStateUntyped }) => {
      const getState = getStateUntyped as (key: string) => MockJob[];
      return {
        code: '<>\\n  {setDefaultState("jobs", [\\n    {\\n      id: 1,\\n      title: "Lead Designer",\\n      location: "Melbourne",\\n    },\\n    {\\n      id: 2,\\n      title: "Senior Developer",\\n      location: "Sydney",\\n    },\\n    {\\n      id: 3,\\n      title: "Product Manager",\\n      location: "Canberra",\\n    },\\n  ])}\\n\\n  <Stack space="medium">\\n    {getState("jobs").map((job) => (\\n      <Card key={job.id}>\\n        <Stack space="small">\\n          <Text weight="strong">{job.title}</Text>\\n          <Text>{job.location}</Text>\\n        </Stack>\\n      </Card>\\n    ))}\\n  </Stack>\\n</>',
        value: (
          <>
            {setDefaultState('jobs', [
              {
                id: 1,
                title: 'Lead Designer',
                location: 'Melbourne',
              },
              {
                id: 2,
                title: 'Senior Developer',
                location: 'Sydney',
              },
              {
                id: 3,
                title: 'Product Manager',
                location: 'Canberra',
              },
            ])}

            <Stack space="medium">
              {getState('jobs').map((job) => (
                <Card key={job.id}>
                  <Stack space="small">
                    <Text weight="strong">{job.title}</Text>
                    <Text>{job.location}</Text>
                  </Stack>
                </Card>
              ))}
            </Stack>
          </>
        ),
      };
    }}
  </Code>
);

`;
