import React from 'react';
import {
  Heading,
  Divider,
  Text,
  TextLink,
  Strong,
  Notice,
  Stack,
  Button,
  Actions,
  Card,
} from '../../../../../lib/components';
import {
  Checkbox,
  Drawer,
  Placeholder,
  TextField,
} from '../../../../../lib/playroom/components';
import { TextStack } from '../../TextStack/TextStack';
import { Page } from '../../../types';
import { PageTitle } from '../../Seo/PageTitle';
import Code from '../../Code/Code';

const PlayroomPrototyping = () => (
  <TextStack>
    <Heading component="h1" level="2">
      <PageTitle title="Playroom Prototyping" />
      Playroom Prototyping
    </Heading>
    <Text tone="secondary">
      This guide aims to teach you how to make your Playroom designs
      interactive, and assumes you already have a basic level of familiarity
      with Playroom.
    </Text>

    <Divider />

    <Heading level="3">Introducing state</Heading>
    <Text>
      Braid components, when used in Playroom, manage their own state internally
      by default. For example, if you use a{' '}
      <TextLink href="/components/Checkbox">Checkbox</TextLink> component,
      youâ€™re able to toggle the checkbox on and off.
    </Text>
    <Code>
      <Checkbox label="Checkbox" />
    </Code>
    <Text>
      So the checkbox works in isolation, but what if we wanted it to control
      other parts of the UI? Well, first we need to provide a{' '}
      <Strong>stateName</Strong> prop to our checkbox, which then allows us to
      ask for its state elsewhere in our prototype using the{' '}
      <Strong>getState</Strong> function.
    </Text>
    <Text>
      As a minimal example, letâ€™s make the checkbox toggle the visibility of
      another element:
    </Text>
    <Code
      displayCode={`
        <Stack space="medium">
          <Checkbox label="Checkbox" stateName="myCheckbox" />

          {getState('myCheckbox') && (
            <Notice tone="positive">
              <Text>Good job! You checked the checkbox!</Text>
            </Notice>
          )}
        </Stack>
      `}
    >
      {({ getState }) => (
        <Stack space="medium">
          <Checkbox label="Checkbox" stateName="myCheckbox" />

          {getState('myCheckbox') && (
            <Notice tone="positive">
              <Text>Good job! You checked the checkbox!</Text>
            </Notice>
          )}
        </Stack>
      )}
    </Code>
    <Text>
      We could also use the checkbox state to toggle the visibility of two
      alternate elements:
    </Text>
    <Code
      displayCode={`
        <Stack space="medium">
          <Checkbox label="Checkbox" stateName="myCheckbox" />

          {getState('myCheckbox') ? (
            <Notice tone="positive">
              <Text>Good job! You checked the checkbox!</Text>
            </Notice>
          ) : (
            <Notice tone="critical">
              <Text>Oops! You havenâ€™t checked the checkbox!</Text>
            </Notice>
          )}
        </Stack>
      `}
    >
      {({ getState }) => (
        <Stack space="medium">
          <Checkbox label="Checkbox" stateName="myCheckbox" />

          {getState('myCheckbox') ? (
            <Notice tone="positive">
              <Text>Good job! You checked the checkbox!</Text>
            </Notice>
          ) : (
            <Notice tone="critical">
              <Text>Oops! You havenâ€™t checked the checkbox!</Text>
            </Notice>
          )}
        </Stack>
      )}
    </Code>

    <Text>
      By default, all state values are blank until the user interacts with
      something. While this is usually fine in simple prototypes, youâ€™re likely
      to find scenarios where you need the state to have a default value. For
      example, we might want our checkbox to be checked by default. To support
      this, our Playrooom provides a <Strong>setDefaultState</Strong> function
      which should be called before rendering anything to the screen:
    </Text>
    <Code
      displayCode={`
        <>
          {setDefaultState('myCheckbox', true)}

          <Stack space="medium">
            <Checkbox label="Checkbox" stateName="myCheckbox" />

            {getState('myCheckbox') ? (
              <Notice tone="positive">
                <Text>Good job! You checked the checkbox!</Text>
              </Notice>
            ) : (
              <Notice tone="critical">
                <Text>Oops! You havenâ€™t checked the checkbox!</Text>
              </Notice>
            )}
          </Stack>
        </>
      `}
    >
      {({ setDefaultState, getState }) => (
        <>
          {setDefaultState('myCheckbox', true)}

          <Stack space="medium">
            <Checkbox label="Checkbox" stateName="myCheckbox" />

            {getState('myCheckbox') ? (
              <Notice tone="positive">
                <Text>Good job! You checked the checkbox!</Text>
              </Notice>
            ) : (
              <Notice tone="critical">
                <Text>Oops! You havenâ€™t checked the checkbox!</Text>
              </Notice>
            )}
          </Stack>
        </>
      )}
    </Code>
    <Text>
      We can bind to more complicated state too, like text values within{' '}
      <TextLink href="/components/TextField">TextField</TextLink> components:
    </Text>
    <Code
      displayCode={`
        <Card>
          <Stack space="large">
            <TextField label="First name" stateName="firstName" />
            <TextField label="Last name" stateName="lastName" />

            {getState('firstName') && getState('lastName') ? (
              <Heading level="4">
                ðŸ‘‹ Hello {getState('firstName')} {getState('lastName')}!
              </Heading>
            ) : null}
          </Stack>
        </Card>
      `}
    >
      {({ getState }) => (
        <Card>
          <Stack space="large">
            <TextField label="First name" stateName="firstName" />
            <TextField label="Last name" stateName="lastName" />

            {getState('firstName') && getState('lastName') ? (
              <Heading level="4">
                ðŸ‘‹ Hello {getState('firstName')} {getState('lastName')}!
              </Heading>
            ) : null}
          </Stack>
        </Card>
      )}
    </Code>

    <Text>
      Itâ€™s not just about form elements either. For example, we might want to
      provide a <TextLink href="/components/Button">Button</TextLink> that, via
      an <Strong>onClick</Strong> handler, toggles the <Strong>open</Strong>{' '}
      state of a <TextLink href="/components/Drawer">Drawer</TextLink>.
    </Text>
    <Text>
      In this example weâ€™re making use of the <Strong>toggleState</Strong>{' '}
      function to set the state to <Strong>true</Strong> if the drawer is
      hidden.
    </Text>

    <Code
      displayCode={`
        <Card>
          <Actions>
            <Button onClick={() => toggleState('myDrawer')}>Open drawer</Button>
          </Actions>

          <Drawer title="Drawer" stateName="myDrawer">
            <Placeholder height={100} />
          </Drawer>
        </Card>
      `}
    >
      {({ toggleState }) => (
        <Card>
          <Actions>
            <Button onClick={() => toggleState('myDrawer')}>Open drawer</Button>
          </Actions>

          <Drawer title="Drawer" stateName="myDrawer">
            <Placeholder height={100} />
          </Drawer>
        </Card>
      )}
    </Code>

    <Heading level="3">Navigating between screens</Heading>
    <Text>
      We can also leverage state to simulate having multiple screens by using a
      piece of state called <Strong>screen</Strong>.
    </Text>
    <Text>
      In this example weâ€™re making use of the <Strong>setState</Strong> function
      to choose the desired screen, and the <Strong>resetState</Strong> function
      to go back to the original screen.
    </Text>

    <Code
      displayCode={`
        <>
          {setDefaultState('screen', 'Home')}

          {getState('screen') === 'Home' && (
            <Card>
              <Stack space="large">
                <Heading level="3">Home</Heading>
                <Actions>
                  <Button onClick={() => setState('screen', 'Welcome')}>
                    Sign in
                  </Button>
                </Actions>
              </Stack>
            </Card>
          )}

          {getState('screen') === 'Welcome' && (
            <Card>
              <Stack space="large">
                <Heading level="3">ðŸ‘‹ Welcome!</Heading>
                <Placeholder height={100} />
                <Actions>
                  <Button onClick={() => resetState('screen')}>Sign out</Button>
                </Actions>
              </Stack>
            </Card>
          )}
        </>
      `}
    >
      {({ setDefaultState, getState, setState, resetState }) => (
        <>
          {setDefaultState('screen', 'Home')}

          {getState('screen') === 'Home' && (
            <Card>
              <Stack space="large">
                <Heading level="3">Home</Heading>
                <Actions>
                  <Button onClick={() => setState('screen', 'Welcome')}>
                    Sign in
                  </Button>
                </Actions>
              </Stack>
            </Card>
          )}

          {getState('screen') === 'Welcome' && (
            <Card>
              <Stack space="large">
                <Heading level="3">ðŸ‘‹ Welcome!</Heading>
                <Placeholder height={100} />
                <Actions>
                  <Button onClick={() => resetState('screen')}>Sign out</Button>
                </Actions>
              </Stack>
            </Card>
          )}
        </>
      )}
    </Code>

    <Heading level="3">Whatâ€™s next?</Heading>
    <Text>
      If youâ€™ve come this far, itâ€™s likely that youâ€™ll still have some
      questions. Please reach out so we can give you a hand, and hopefully feed
      improvements back to the site. Weâ€™re going to keep iterating on the
      prototyping experience over time, so any feedback you have would be
      greatly appreciated!
    </Text>
  </TextStack>
);

const page: Page = {
  title: 'Playroom Prototyping',
  component: PlayroomPrototyping,
  badge: 'New',
};

export default page;
