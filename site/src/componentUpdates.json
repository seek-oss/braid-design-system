[
  {
    "version": "29.2.0",
    "updates": [
      {
        "updated": [
          "Box"
        ],
        "summary": "**Box:** Added `zIndex` prop\n\nThe following z-index palette is now available on `Box`:\n\n**Local stacking**\n\n- `0`\n- `1`\n- `2`\n\n**Global stacking**\n\n- `\"dropdownBackdrop\"`\n- `\"dropdown\"`\n- `\"sticky\"`\n- `\"modalBackdrop\"`\n- `\"modal\"`\n- `\"notification\"`\n\n**EXAMPLE USAGE**\n\n```jsx\n<Box position=\"fixed\" zIndex=\"sticky\">\n  ...\n</Box>\n```"
      },
      {
        "updated": [
          "TabPanels"
        ],
        "summary": "TabPanels: Add `renderInactivePanels` prop\n\nBy default, the children of `TabPanel` components are only rendered when they are selected. However, in cases where you want to preserve local component state when switching tabs, this behaviour is undesirable. Setting `renderInactivePanels` will cause the `TabPanel` children to be rendered even when visually hidden.\n\n**Note:** This is not a visual change, the panels will still be hidden from the user. \n\ne.g.\n```jsx\n<TabsProvider selectedItem={0}>\n    <Tabs>\n      <Tab>First</Tab>\n      <Tab>Second</Tab>\n    </Tabs>\n    <TabPanels renderInactivePanels>\n      <TabPanel>\n        <Text>Tab 1</Text>\n      </TabPanel>\n      <TabPanel>\n        {/* This TabPanel is hidden but still in the DOM */}\n        <Text>Tab 2</Text>\n      </TabPanel>\n    </TabPanels>\n</TabsProvider>\n```"
      },
      {
        "updated": [
          "BraidProvider",
          "BraidTestProvider",
          "BraidLoadableProvider",
          "Link"
        ],
        "summary": "Added support for refs on [Link](https://seek-oss.github.io/braid-design-system/components/Link)\n\nForwarding refs is necessary for certain accessibility patterns (e.g. managing focus states), but the `Link` component wasn't doing this correctly.\n\nPlease note that, if you're passing a custom `linkComponent` implementation to [BraidProvider](https://seek-oss.github.io/braid-design-system/components/BraidProvider), you'll need to ensure that you're using the new `makeLinkComponent` helper function to forward refs, otherwise any attempt to pass a ref to `Link` will throw an error.\n\n**MIGRATION GUIDE**\n\n```diff\n-import { BraidProvider, LinkComponent } from 'braid-design-system';\n+import { BraidProvider, makeLinkComponent } from 'braid-design-system';\n\n-const CustomLink: LinkComponent = ({ href, ...restProps }) =>\n+const CustomLink = makeLinkComponent({ href, ...restProps }, ref) =>\n  href[0] === '/' ? (\n-    <ReactRouterLink to={href} {...restProps} />\n+    <ReactRouterLink to={href} {...restProps} ref={ref} />\n  ) : (\n-    <a href={href} {...restProps} />\n+    <a href={href} {...restProps} ref={ref} />\n  );\n\nexport const App = () => (\n  <BraidProvider linkComponent={CustomLink} {...rest}>\n    ...\n  </BraidProvider>\n);\n```"
      },
      {
        "updated": [
          "Link"
        ],
        "summary": "**Link:** Fixed types for `className` prop to support the full [classnames](https://www.npmjs.com/package/classnames) API\n\nYou can now pass arrays and objects to the `className` prop on `Link` without type errors.\n\nFor example:\n\n```jsx\n<Link\n  href=\"#\"\n  className={[\n    'someClass',\n    ['anotherClass', 'yetAnotherClass'],\n    { someConditionalClass: someBoolean }\n  ]}>\n  ...\n</Link>\n```"
      },
      {
        "new": [
          "MenuItemLink"
        ],
        "summary": "Added **MenuItemLink** component\n\nYou can now render semantic links within menu components, e.g. [OverflowMenu](https://seek-oss.github.io/braid-design-system/components/OverflowMenu), [MenuRenderer](https://seek-oss.github.io/braid-design-system/components/MenuRenderer)\n\nFor example:\n\n```jsx\n<OverflowMenu label=\"Options\">\n  <MenuItem onClick={() => {}}>Button</MenuItem>\n  <MenuItemLink href=\"...\">Link</MenuItemLink>\n</OverflowMenu>\n```\n\nNote that links are rendered internally using [Link](https://seek-oss.github.io/braid-design-system/components/Link). If you want to customise the rendering of these links, you need to provide a custom `linkComponent` implementation to [BraidProvider](https://seek-oss.github.io/braid-design-system/components/BraidProvider)."
      }
    ]
  },
  {
    "version": "29.1.1",
    "updates": [
      {
        "updated": [
          "List",
          "BulletList"
        ],
        "summary": "**List, BulletList:** Limit width to 100% of parent"
      }
    ]
  },
  {
    "version": "29.1.0",
    "updates": [
      {
        "new": [
          "List"
        ],
        "summary": "Add `List` component\n\n`List` serves as a replacement for the `BulletList` and `Bullet` components which adds the following improvements:\n\n-   Support for numbers and alpha characters as bullets\n-   Support for custom start positions in number/alpha lists\n-   Rich content support, e.g. list items with multiple paragraphs, nested lists, etc.\n\n_Note: The `BulletList` and `Bullet` components have been marked as deprecated and will be removed in an upcoming major release._\n\n**MIGRATION GUIDE**\n\nIf you want to migrate from `BulletList` to `List`, you can simply replace `BulletList` with `List`, and `Bullet` with `Text`:\n\n```diff\n-<BulletList>\n-  <Bullet>...</Bullet>\n-  <Bullet>...</Bullet>\n-  <Bullet>...</Bullet>\n-</BulletList>\n\n+<List>\n+  <Text>...</Text>\n+  <Text>...</Text>\n+  <Text>...</Text>\n+</List>\n```"
      },
      {
        "updated": [
          "TextLink",
          "TextLinkButton",
          "TextLinkRenderer"
        ],
        "summary": "**TextLink, TextLinkButton, TextLinkRenderer:** Default `weight` prop to `\"regular\"` when nested inside secondary text\n\nAs of [v28.13.0](https://github.com/seek-oss/braid-design-system/releases/tag/braid-design-system%4028.13.0), `TextLink` components that were nested inside secondary text would be `\"weak\"` by default, i.e. the same tone as the surrounding text and underlined. In practice, this turned out to be somewhat unpredictable behaviour for consumers. We've now reverted this to the previous behaviour of being `\"regular\"` weight by default, i.e. blue and medium font weight.\n\nNote that, if needed, you can still use the weaker link treatment within secondary text via an explicit prop override:\n\n```jsx\n<Text tone=\"secondary\">\n  The TextLink in this sentence is{' '}\n  <TextLink href=\"...\" weight=\"weak\">\n    weak.\n  </TextLink>\n</Text>\n```"
      },
      {
        "updated": [
          "AccordionItem"
        ],
        "summary": "**AccordionItem:** Prevent Safari from clipping label text"
      }
    ]
  },
  {
    "version": "29.0.1",
    "updates": [
      {
        "updated": [
          "BraidProvider"
        ],
        "summary": "Throw meaningful error when using 'BraidProvider' in unit tests"
      }
    ]
  },
  {
    "version": "29.0.0",
    "updates": [
      {
        "updated": [
          "Text",
          "Heading"
        ],
        "summary": "Improved trimming of white space around text\n\nMigrated from our custom [Basekick](https://github.com/michaeltaranto/basekick) implementation to [🛶 Capsize](https://seek-oss.github.io/capsize/) to more accurately trim the white space around text. This will have subtle white space changes throughout the UI, but will largely just be improvements to the balance of space around text.\n\n**BREAKING CHANGES**\n\n**Heading/Text: Removed _LEGACY_SPACE_**\n\nThe `_LEGACY_SPACE_` prop was provided to support consumers migrating to [`v14`](https://github.com/seek-oss/braid-design-system/releases/tag/v14.0.0) when the white space cropping and layout components were originally introduced. This has now been removed to allow us to further improve on our approach.\n\nMigrating off this prop will require consumers to perform the following steps:\n\n-   Remove the usage of `_LEGACY_SPACE_` on a component\n-   Conduct a visual review of the impact (component will appear closer to neighbouring elements)\n-   Use existing layout components, e.g. `Stack`, to define/control the reintroduction of the desired space.\n\nAny issues, please reach out to the team as we are happy to help support consumers in migrating.\n\n**Theme Tokens: Text and Heading definitions**\n\nThere have been strutural theme changes for `heading` and `text` definitions to support the defining of `capHeight` in the system. Previously a definition contained `size` that was the specified font size inclusive of surrounding white space.\n\nA definition now has `capHeight` which is representative of the visual height, supporting improved alignment with other elements like, icons etc.\n\n```diff\n{\n  text: {\n    standard: {\n      mobile: {\n-        size: 16,\n+        capHeight: 11.43,\n        rows: 6\n      }\n    }\n  }\n}\n```\n\nThis is not likely to affect consumers, unless these theme values are used explicitly in custom treat files.\n\n**Theme Tokens: Descender and Cap Height scales**\n\nInstead of the calculated values of `capHeightScale` and `decenderHeightScale`, a theme now accepts `fontMetrics`—a structure that represents the metadata from the font itself.\n\n```diff\n-const capHeight = 24 * theme.typography.capHeightScale;\n+const capHeight = 24 * (theme.typography.fontMetrics.capHeight / theme.typography.fontMetrics.unitsPerEm);\n```\n\n```diff\n-const descender = 24 * theme.typography.decenderHeightScale;\n+const descender = 24 * (Math.abs(theme.typography.fontMetrics.descent) / theme.typography.fontMetrics.unitsPerEm);\n```"
      },
      {
        "updated": [
          "Textarea"
        ],
        "summary": "Fix type error in Textarea formatRanges"
      }
    ]
  },
  {
    "version": "28.14.0",
    "updates": [
      {
        "new": [
          "IconNotification"
        ],
        "summary": "Add Notification icon"
      },
      {
        "new": [
          "useBreakpoint"
        ],
        "summary": "Add useBreakpoint\n\n`useBreakpoint` will return the breakpoint the browser viewport currently falls within (mobile, tablet or desktop). As this can only be calculated in the browser, the value may also be null. Window resizing is supported.\n\n**Note:** Avoid use of this hook where possible. Responsive properties and media queries are a better option in most cases."
      }
    ]
  },
  {
    "version": "28.13.0",
    "updates": [
      {
        "updated": [
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**TextLink, TextLinkButton:** Add `weight` prop, add `weak` weight variant\n\nYou can now render links that are underlined while inheriting the tone and weight of its surrounding text.\n\n**EXAMPLE USAGE**\n\n```jsx\n<Text>\n  This sentence contains a{' '}\n  <TextLink href=\"...\" weight=\"weak\">\n    weak TextLink.\n  </TextLink>\n</Text>\n```"
      }
    ]
  },
  {
    "version": "28.12.0",
    "updates": [
      {
        "updated": [
          "Inline"
        ],
        "summary": "**Inline:** Prevent overlapping of preceding interactive components"
      }
    ]
  },
  {
    "version": "28.11.0",
    "updates": [
      {
        "updated": [
          "TextLinkButton"
        ],
        "summary": "**TextLinkButton:** Pass click event object to `onClick` handler\n\nThe `onClick` handler was previously called without any arguments. We now pass the click event object through as expected."
      }
    ]
  },
  {
    "version": "28.10.0",
    "updates": [
      {
        "updated": [
          "Button"
        ],
        "summary": "**Button:** Add `aria-controls` and `aria-expanded` props"
      },
      {
        "new": [
          "Disclosure"
        ],
        "summary": "Add `Disclosure` component\n\nThis component serves as a replacement for `ToggleContent` from [SEEK Style Guide.](https://github.com/seek-oss/seek-style-guide)\n\n**SEEK STYLE GUIDE MIGRATION GUIDE**\n\n-   `ToggleContent` has been renamed to `Disclosure`.\n-   The `onShowMore` prop has been renamed to `onToggle`.\n-   The spacing around the button has changed to follow [Braid's layout guidelines.](https://seek-oss.github.io/braid-design-system/foundations/layout) Design review is recommeded.\n\n```diff\n-<ToggleContent onShowMore={(expanded) => { ... }} {...rest}>\n+<Disclosure onToggle={(expanded) => { ... }} {...rest}>\n```"
      },
      {
        "updated": [
          "TextLinkButton"
        ],
        "summary": "**TextLinkButton:** Add `aria-controls`, `aria-describedby` and `aria-expanded` props"
      }
    ]
  },
  {
    "version": "28.9.0",
    "updates": [
      {
        "new": [
          "TextLinkButton"
        ],
        "summary": "Add `TextLinkButton` component\n\nAllows you to render a semantic button that looks like a `TextLink`.\n\nThis component renders a native `span` element with an ARIA role of `button` so that, unlike a standard button element, text can wrap across multiple lines."
      }
    ]
  },
  {
    "version": "28.8.0",
    "updates": [
      {
        "new": [
          "IconLanguage"
        ],
        "summary": "Add IconLanguage"
      }
    ]
  },
  {
    "version": "28.6.0",
    "updates": [
      {
        "updated": [
          "Box"
        ],
        "summary": "Box: Add `body` background\n\nYou can now use the theme's body background on arbitrary elements within the page.\n\n**EXAMPLE USAGE**\n\n```jsx\n<Box background=\"body\">...</Box>\n```"
      }
    ]
  },
  {
    "version": "28.5.0",
    "updates": [
      {
        "updated": [
          "MonthPicker"
        ],
        "summary": "MonthPicker: Support custom month and year labels\n\nTo support internationalisation, you can now pass the following props to `MonthPicker`:\n\n-   **monthLabel** (`string`)\n-   **yearLabel** (`string`)\n-   **monthNames** (`string[]`)"
      }
    ]
  },
  {
    "version": "28.3.0",
    "updates": [
      {
        "new": [
          "Tabs"
        ],
        "summary": "Add Tabs component\n\nFollows the [WAI Aria Tabs Pattern.](https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel)\n\n**EXAMPLE USAGE:**\n\n```jsx\n<TabsProvider id=\"id\">\n  <Stack space=\"medium\">\n    <Tabs label=\"Label\">\n      <Tab>The first tab</Tab>\n      <Tab>The second tab</Tab>\n      <Tab badge={<Badge tone=\"positive\">New</Badge>}>The third tab</Tab>\n    </Tabs>\n    <TabPanels>\n      <TabPanel>...</TabPanel>\n      <TabPanel>...</TabPanel>\n      <TabPanel>...</TabPanel>\n    </TabPanels>\n  </Stack>\n</TabsProvider>\n```"
      },
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "Autosuggest: Fix suggestion double tap bug on iOS\n\nTapping a suggestion on iOS triggers the hover state rather than a selection, forcing users to tap a second time to select the suggestion.\n\nThis is due to the way that iOS simulates mouse events in a touch environment. If the document is updated during a `mouseover`, `mouseenter` or `mousemove` event, the subsequent `click` event is never fired. While it may seem counterintuitive, this ensures that touch users are able to see hover effects that make changes to the page.\n\nTo fix this, we now trigger our suggestion hover logic on `touchstart` so that the document doesn't change during mouse events, which then allows the `click` event to fire uninterrupted."
      }
    ]
  },
  {
    "version": "28.2.0",
    "updates": [
      {
        "updated": [
          "useToast"
        ],
        "summary": "useToast: Add deduplication of toasts\n\nPassing `key` when creating new toasts will now remove existing Toasts on screen with the same `key` before adding the new Toast. This is useful when a toast is created as part of a repeatable process that happens frequently.\n\n```ts\nconst showToast = useToast();\n\nshowToast({\n  message: 'There can only be one of me',\n  tone: 'positive',\n  key: 'deduped',\n});\n```"
      }
    ]
  },
  {
    "version": "28.1.0",
    "updates": [
      {
        "updated": [
          "Inline"
        ],
        "summary": "Inline: Add support for semantic list elements\n\nAs already featured on `Stack`, when rendering `<Inline component=\"ul|ol\">`, its children will be rendered as `li` elements."
      },
      {
        "updated": [
          "Icon*"
        ],
        "summary": "Hide icons from screen readers that have no title\n\nIcons are mostly used for decorative purposes and as such are now hidden from screen readers unless providing a `title`. In this case, an Icon is identified as an image."
      }
    ]
  },
  {
    "version": "28.0.0",
    "updates": [
      {
        "updated": [
          "Alert",
          "Notice"
        ],
        "summary": "**Alert, Notice:** Support rich content\n\n**BREAKING CHANGE**\n\nSince `Alert` and `Notice` no longer render a `Text` component for you, you'll need to ensure that you're providing an enclosing `Text` element as a direct child.\n\nAlert:\n\n```diff\n<Alert tone=\"positive\">\n-  Success!\n+  <Text>Success!</Text>\n</Alert>\n```\n\nNotice:\n\n```diff\n<Notice tone=\"positive\">\n-  Success!\n+  <Text>Success!</Text>\n</Notice>\n\n```\n\n**WHY?**\n\nThe [Alert](https://seek-oss.github.io/braid-design-system/components/Alert) and [Notice](https://seek-oss.github.io/braid-design-system/components/Notice) components were originally designed to render a single paragraph of text, but in practice we've found that there's a lot of demand for richer content, e.g. multiple paragraphs, bullet lists, etc.\n\nIn order to support this level of flexibility, `Alert` and `Notice` no longer render an enclosing `Text` component for you. While this means you'll need a bit more boilerplate in simple cases, it also means you now have much more fine-grained control over the layout.\n\nFor example, if you wanted to render an `Alert` using both `Text` and `BulletList` with `\"medium\"` space between them:\n\n```jsx\n<Alert tone=\"positive\">\n  <Stack space=\"medium\">\n    <Text>The quick brown fox jumps over the lazy dog.</Text>\n    <BulletList space=\"small\">\n      <Bullet>Bullet 1</Bullet>\n      <Bullet>Bullet 2</Bullet>\n    </BulletList>\n  </Stack>\n</Alert>\n```\n\nThis same pattern applies to `Notice`:\n\n```jsx\n<Notice tone=\"positive\">\n  <Stack space=\"medium\">\n    <Text>The quick brown fox jumps over the lazy dog.</Text>\n    <BulletList space=\"small\">\n      <Bullet>Bullet 1</Bullet>\n      <Bullet>Bullet 2</Bullet>\n    </BulletList>\n  </Stack>\n</Notice>\n```"
      },
      {
        "updated": [
          "MonthPicker"
        ],
        "summary": "**MonthPicker:** Fix internal `<Hidden screen>` deprecation warning\n\nThe `MonthPicker` component was mistakenly using `<Hidden screen>` to provide labels to screen readers rather than the new [`HiddenVisually`](https://seek-oss.github.io/braid-design-system/components/HiddenVisually) component. As a result, deprecation warnings were being logged in the console during development."
      }
    ]
  },
  {
    "version": "27.3.0",
    "updates": [
      {
        "updated": [
          "Toggle"
        ],
        "summary": "Toggle: Hide border on dark backgrounds\n\nIn order to reduce visual noise, similar to other fields, we now hide the border on `Toggle` elements when rendered on dark backgrounds."
      },
      {
        "updated": [
          "Dropdown"
        ],
        "summary": "Dropdown: Lighten chevron when disabled\n\nThe visual prominence of the chevron icon is now lower when `disabled` is set to `true`."
      },
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "Autosuggest: Apply darker background when disabled\n\nWhen disabled, `Autosuggest` elements didn't have the same dark background as other disabled fields. This has now been fixed."
      }
    ]
  },
  {
    "version": "27.2.0",
    "updates": [
      {
        "new": [
          "HiddenVisually"
        ],
        "summary": "Add `HiddenVisually` component\n\nYou can now easily provide content to assistive technologies while hiding it from the screen.\n\n```jsx\n<Text>\n  This content is available to everyone.\n  <HiddenVisually>\n    This content is only available to screen readers.\n  </HiddenVisually>\n</Text>\n```"
      },
      {
        "updated": [
          "Hidden"
        ],
        "summary": "Hidden: Infer `inline` prop when nested inside Text or Heading\n\nCurrently, if you want to hide content using the `Hidden` component in an inline context (e.g. hiding part of a sentence), you need to remember to set the `inline` boolean prop.\n\nSince most usages of this feature are within text, we now infer this for you automatically within the context of a `Text` or `Heading` component.\n\n**MIGRATION GUIDE**\n\nThis change is not strictly required, but you can now clean up your code like this:\n\n```diff\n-<Text>The end of this sentence is... <Hidden inline below=\"tablet\">hidden on mobile.</Hidden>\n+<Text>The end of this sentence is... <Hidden below=\"tablet\">hidden on mobile.</Hidden>\n```"
      }
    ]
  },
  {
    "version": "27.1.1",
    "updates": [
      {
        "updated": [
          "MonthPicker"
        ],
        "summary": "MonthPicker: Preserve touchable height on iOS\n\nFix for the native variant of `MonthPicker` having a reduced height on iOS when no value is provided."
      }
    ]
  },
  {
    "version": "27.1.0",
    "updates": [
      {
        "updated": [
          "Stack"
        ],
        "summary": "Stack: Add support for Hidden stack items\n\nYou can now responsively hide stack items using the [`Hidden`](https://seek-oss.github.io/braid-design-system/components/Hidden) component while maintaining the correct spacing between all visible elements.\n\nFor example, if you wanted to hide a stack item on mobile:\n\n```jsx\n<Stack space=\"small\">\n  <Text>...</Text>\n  <Hidden below=\"tablet\">\n    <Text>...</Text>\n  </Hidden>\n  <Text>...</Text>\n</Stack>\n```"
      }
    ]
  },
  {
    "version": "26.0.0",
    "updates": [
      {
        "updated": [
          "Stack",
          "Inline",
          "Tiles"
        ],
        "summary": "Stack, Inline, Tiles: Flatten fragments when provided as direct children\n\nThe following patterns should now work as you might have previously expected:\n\n```jsx\n<Stack space=\"small\">\n  <React.Fragment>\n    <Text>...</Text>\n    <Text>...</Text>\n  </React.Fragment>\n  <Text>...</Text>\n</Stack>\n```\n\n```jsx\n<Inline space=\"small\">\n  <React.Fragment>\n    <Badge>...</Badge>\n    <Badge>...</Badge>\n  </React.Fragment>\n  <Badge>...</Badge>\n</Inline>\n```\n\n```jsx\n<Tiles space=\"small\" columns={3}>\n  <React.Fragment>\n    <Card>...</Card>\n    <Card>...</Card>\n  </React.Fragment>\n  <Card>...</Card>\n</Tiles>\n```\n\n**BREAKING CHANGE**\n\nWhile _highly_ unlikely, if you were using a fragment to group unspaced sibling nodes within a `Stack`, `Inline` or `Tiles` element, you'll need to replace it with a `Box`, for example:\n\n```diff\n<Stack space=\"small\">\n  ...\n-  <React.Fragment>\n+  <Box>\n    <Box>...</Box>\n    <Box>...</Box>\n-  <React.Fragment>\n+  </Box>\n  ...\n</Stack>\n```\n\n```diff\n<Inline space=\"small\">\n  ...\n-  <React.Fragment>\n+  <Box>\n    <Box>...</Box>\n    <Box>...</Box>\n-  <React.Fragment>\n+  </Box>\n  ...\n</Inline>\n```\n\n```diff\n<Tiles space=\"small\" columns={3}>\n  ...\n-  <React.Fragment>\n+  <Box>\n    <Box>...</Box>\n    <Box>...</Box>\n-  <React.Fragment>\n+  </Box>\n  ...\n</Tiles>\n```"
      }
    ]
  },
  {
    "version": "25.7.1",
    "updates": [
      {
        "updated": [
          "TextField",
          "Autosuggest",
          "PasswordField"
        ],
        "summary": "TextField, Autosuggest, PasswordField: Improved support for field buttons with browser extensions.\n\nThe implementation of internal spacing within fields has been adjusted to better support browser extensions for password managers.\n\nAffects the following components:\n\n-   PasswordField: visibility toggle button\n-   TextField: clear button\n-   Autosuggest: clear button"
      },
      {
        "updated": [
          "Textarea"
        ],
        "summary": "Textarea: Fix border radius on dark backgrounds\n\nWhen rendering a `Textarea` on a background other than white, the field background extended out beyond the field's border radius."
      },
      {
        "updated": [
          "TextField",
          "Autosuggest",
          "PasswordField"
        ],
        "summary": "TextField, Autosuggest, PasswordField: Prevent field buttons firing on right click\n\nField buttons, such as clear and password visibility toggle, fire on mouse down to ensure focus is retained on the relevant field. We now ensure that the button only recognises left mouse button clicks.\n\nAffects the following components:\n\n-   PasswordField: visibility toggle button\n-   TextField: clear button\n-   Autosuggest: clear button"
      }
    ]
  },
  {
    "version": "25.7.0",
    "updates": [
      {
        "updated": [
          "Box"
        ],
        "summary": "Add zero opacity to Box\n\nProvide zero opacity on `Box` as an optimisation.\n\nExample usage:\n\n```tsx\n<Box opacity={0}>...</Box>\n```"
      },
      {
        "new": [
          "PasswordField"
        ],
        "summary": "Add PasswordField component\n\nProvides a password field complete with visibility toggle to switch between a masked and unmasked field value."
      }
    ]
  },
  {
    "version": "25.6.0",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "Autosuggest: Support suggestion descriptions\n\nYou can now provide a `description` as part of each suggestion item, e.g.:\n\n```jsx\n<Autosuggest\n  suggestions={[\n    {\n      text: 'Apples',\n      value: 123,\n      description: 'Juicy and delicious',\n    },\n  ]}\n  {...rest}\n/>\n```"
      }
    ]
  },
  {
    "version": "25.5.1",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "Autosuggest: Don't select suggestions onBlur when using automaticSelection and suggestions are closed"
      }
    ]
  },
  {
    "version": "25.5.0",
    "updates": [
      {
        "updated": [
          "AccordionItem"
        ],
        "summary": "AccordionItem: Support `onToggle` prop without `expanded` to allow tracking in uncontrolled mode\n\nFor example:\n\n```jsx\n<AccordionItem\n  id=\"id\"\n  label=\"Label\"\n  onToggle={expanded => trackSomething(expanded)}\n>\n  ...\n</AccordionItem>\n```"
      }
    ]
  },
  {
    "version": "25.4.1",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "Autosuggest: When using the `automaticSelection` prop, we now prevent automatic selection from ocurring if the input value hasn't changed since focusing the field"
      }
    ]
  },
  {
    "version": "25.4.0",
    "updates": [
      {
        "updated": [
          "Text"
        ],
        "summary": "Text: Add data attribute support"
      },
      {
        "updated": [
          "Heading"
        ],
        "summary": "Heading: Add data attribute support"
      }
    ]
  },
  {
    "version": "25.3.0",
    "updates": [
      {
        "updated": [
          "Inline"
        ],
        "summary": "Inline: Add `collapseBelow` and `reverse` props.\n\nSimilar to [Columns](https://seek-oss.github.io/braid-design-system/components/Columns), you can now responsively collapse an `Inline` into a vertical stack on mobile with the `collapseBelow` prop.\n\nFor example, if you want items to stack vertically below tablet:\n\n```jsx\n<Inline space=\"small\" collapseBelow=\"tablet\">\n  ...\n</Inline>\n```\n\nAlso similar to `Columns`, you can now reverse the order of items horizontally. This is particularly useful when combined with `align=\"right\"`.\n\nFor example, if you're rendering buttons and you want your primary action on the right on desktop, but at the top on mobile:\n\n```jsx\n<Inline space=\"small\" collapseBelow=\"tablet\" align=\"right\" reverse>\n  <Button>Primary action</Button>\n  <Button weight=\"weak\">Secondary action</Button>\n</Inline>\n```"
      },
      {
        "updated": [
          "Columns"
        ],
        "summary": "Columns: Add `align` prop\n\nWhen collapsing columns into a vertical stack on smaller screens, you can now control the alignment.\n\nFor example, if you want your columns to be horizontally centred on mobile:\n\n```jsx\n<Columns space=\"small\" collapseBelow=\"tablet\" align=\"center\">\n  <Column>...<Column>\n  <Column>...<Column>\n  <Column>...<Column>\n</Columns>\n```\n\nAs a side effect, this also means that you can control the alignment of columns when the total width doesn't reach 100%.\n\nFor example:\n\n```jsx\n<Columns space=\"small\" align=\"center\">\n  <Column width=\"1/3\">...<Column>\n  <Column width=\"1/3\">...<Column>\n</Columns>\n```"
      },
      {
        "new": [
          "TextDropdown"
        ],
        "summary": "Add TextDropdown component\n\nAn inline dropdown that can be used as part of a sentence or as an\nalternative to `Dropdown`, outside of a more structured form.\n\nInherits its styling from the parent typographic component, and as such\nmust be used nested within either a `Text` or `Heading` component.\n\nExample usage:\n\n```tsx\nconst [jobTitle, setJobTitle] = useState('Developer');\n\n<Text>\n  <TextDropdown\n    id=\"jobTitle\"\n    label=\"Job Title\"\n    value={jobTitle}\n    onChange={setJobTitle}\n    options={['Developer', 'Designer', 'Product Manager']}\n  />\n</Text>;\n```"
      },
      {
        "updated": [
          "Box"
        ],
        "summary": "Hide native focus rings on Box elements during mouse interactions"
      }
    ]
  },
  {
    "version": "25.2.0",
    "updates": [
      {
        "new": [
          "Accordion",
          "AccordionItem"
        ],
        "summary": "Add `Accordion` and `AccordionItem` components\n\nExample usage:\n\n```jsx\n<Accordion>\n  <AccordionItem id=\"item_1\" label=\"Accordion item 1\">\n    <Text>Accordion item content</Text>\n  </AccordionItem>\n  <AccordionItem id=\"item_2\" label=\"Accordion item 2\">\n    <Text>Accordion item content</Text>\n  </AccordionItem>\n  <AccordionItem id=\"item_3\" label=\"Accordion item 3\">\n    <Text>Accordion item content</Text>\n  </AccordionItem>\n</Accordion>\n```\n\nAccordions manage their own state internally by default. If you'd like to take control of them yourself, you can pass an `expanded` prop to `AccordionItem` as well as an `onToggle` callback.\n\n```jsx\nconst [expanded, setExpanded] = useState(false);\n\n<AccordionItem\n  id=\"id\"\n  label=\"Accordion item\"\n  expanded={expanded}\n  onToggle={setExpanded}\n>\n  <Text>Accordion item content</Text>\n</AccordionItem>;\n```"
      },
      {
        "updated": [
          "Box"
        ],
        "summary": "Box: Add support for `outline=\"none\"`"
      },
      {
        "updated": [
          "MonthPicker",
          "OverflowMenu",
          "MenuRenderer",
          "Button"
        ],
        "summary": "Drop lodash usage to decrease bundle size.\n\nThis directly affects `MonthPicker` and any components using the `data` prop:\n\n-   All field components\n-   OverflowMenu\n-   MenuRenderer\n-   Button"
      }
    ]
  },
  {
    "version": "25.1.0",
    "updates": [
      {
        "new": [
          "ButtonLink"
        ],
        "summary": "Add ButtonLink component\n\nYou can now easily render semantic links that look like [Button](https://seek-oss.github.io/braid-design-system/components/Button) elements without needing to use the lower level [ButtonRenderer](https://seek-oss.github.io/braid-design-system/components/ButtonRenderer).\n\nThis component renders a native `a` element by default, but this can be customised via the `linkComponent` prop on [BraidProvider](https://seek-oss.github.io/braid-design-system/components/BraidProvider).\n\nExample usage:\n\n```jsx\n<ButtonLink href=\"#\" weight=\"strong\">\n  Submit\n</ButtonLink>\n```"
      }
    ]
  },
  {
    "version": "25.0.0",
    "updates": [
      {
        "updated": [
          "BraidProvider"
        ],
        "summary": "BraidProvider: Add `linkComponent` prop to customise link rendering.\n\nIf you'd like to customise the technical implementation of all `Link` and `TextLink` components from Braid, you can now pass a custom component to the `linkComponent` prop on `BraidProvider`. For example, if you wanted to ensure that all relative links are [React Router](https://reacttraining.com/react-router/) links:\n\n```tsx\nimport React from 'react';\nimport { Link as ReactRouterLink } from 'react-router-dom';\nimport { BraidProvider, LinkComponent } from 'braid-design-system';\nimport wireframe from 'braid-design-system/themes/wireframe';\n\n// First create the custom link implementation:\nconst CustomLink: LinkComponent = ({ href, ...restProps }) =>\n  href[0] === '/' ? (\n    <ReactRouterLink to={href} {...restProps} />\n  ) : (\n    <a href={href} {...restProps} />\n  );\n\n// Then pass it to BraidProvider:\nexport const App = () => (\n  <BraidProvider theme={wireframe} linkComponent={CustomLink}>\n    ...\n  </BraidProvider>\n);\n```\n\nIn order to make your custom link component available for any type of link (not just usages of `TextLink`), this release introduces a new `Link` component which renders an unstyled `a` tag by default.\n\n**BREAKING CHANGES**\n\n-   `TextLink` now requires an `href` prop. Even though this is unlikely to affect anyone (a `TextLink` without an `href` isn't terribly useful), this is still technically a breaking change.\n\n    However, if you find an instance of `TextLink` that you think _shouldn't_ have an `href`, this is a sign that it's not _actually_ a link and you should use a [`TextLinkRenderer`](https://seek-oss.github.io/braid-design-system/components/TextLinkRenderer) instead. Unfortunately, because there's no way for us to know the semantics of your usage ahead of time, we're unable to provide a migration guide, so you'll need to be mindful of how this might impact accessibility.\n\n-   The props for `TextLink` now extend React's `AnchorHTMLAttributes<HTMLAnchorElement>` type rather than `AllHTMLAttributes<HTMLAnchorElement>`. While highly unlikely, this may cause type errors if you've passed props to `TextLink` that aren't considered to be valid anchor props."
      }
    ]
  },
  {
    "version": "24.4.1",
    "updates": [
      {
        "updated": [
          "Divider"
        ],
        "summary": "Divider: Rename 'standard' weight to 'regular'."
      }
    ]
  },
  {
    "version": "24.4.0",
    "updates": [
      {
        "updated": [
          "Divider"
        ],
        "summary": "Divider: Add strong weight variant, e.g. `<Divider weight=\"strong\">`.\n\nNote that this also affects the `dividers` prop on both `Stack` and `Tiles`, e.g. `<Stack space=\"medium\" dividers=\"strong\">`. You can still pass a boolean prop if you want to render the default divider styling, e.g. `<Stack space=\"medium\" dividers>`, so this change is backwards compatible."
      }
    ]
  },
  {
    "version": "24.2.0",
    "updates": [
      {
        "updated": [
          "Inline"
        ],
        "summary": "Inline: Support vertical alignment\n\n**`Inline`**\n\nVertical alignment is now supported via the `alignY` prop, e.g. `<Inline space=\"small\" alignY=\"center\">`.\n\nThis also supports responsive values, e.g. `<Inline space=\"small\" alignY={['center', 'top']}>`"
      },
      {
        "updated": [
          "Box"
        ],
        "summary": "Box: Add `userSelect=\"none\"`.\n\n**`Box`**\n\nYou can now set `userSelect` to `\"none\"` directly on `Box`.\n\nSince the default value of `user-select` in CSS is `\"auto\"`, you can make this value dynamic by conditionally setting it to `undefined`, e.g. `<Box userSelect={selectable ? undefined : 'none'}`."
      }
    ]
  },
  {
    "version": "24.1.3",
    "updates": [
      {
        "updated": [
          "Textarea"
        ],
        "summary": "Textarea: Fix trailing new line highlight issue\n\n**BUG FIXES**\n\n**`Textarea`**\n\nFix for `highlightRanges`, where the highlights could get out of sync with the field value, if the value contained trailing new lines."
      }
    ]
  },
  {
    "version": "24.1.2",
    "updates": [
      {
        "updated": [
          "Checkbox",
          "Radio"
        ],
        "summary": "Checkbox & Radio: Only add aria-describedby when a message is provided\n\n**BUG FIXES**\n\n**`Checkbox` & `Radio`**\n\nBoth of these inputs were previously always adding the `aria-describedby` attribute, while conditionally rendering the `message` only when provided. This meant that elements without a `message` would be indicating that they are described by an element that does not exist."
      }
    ]
  },
  {
    "version": "24.1.1",
    "updates": [
      {
        "updated": [
          "Tiles"
        ],
        "summary": "Tiles: Honour column width for non-breaking content.\n\n**BUG FIXES**\n\n**`Tiles`**\n\nThe column width of a tile was not being honoured when its child elements contained non-wrapping/breaking content."
      }
    ]
  },
  {
    "version": "24.1.0",
    "updates": [
      {
        "updated": [
          "MenuRenderer"
        ],
        "summary": "MenuRenderer: Add support for configuring the menu offset from the trigger\n\n**FEATURES**\n\n**`MenuRenderer`**\n\nConfigure the offset distance between the menu trigger and menu using the `offsetSpace` prop. As with all space values in the system, this accepts a responsive prop.\n\n```diff\n <MenuRenderer\n+  offsetSpace=\"small\"\n   trigger={(triggerProps, { open }) => (\n     <button {...triggerProps}>Menu</button>\n   )}\n >\n   <MenuItem onClick={...}>Option</MenuItem>\n </MenuRenderer>\n```"
      }
    ]
  },
  {
    "version": "24.0.0",
    "updates": [
      {
        "new": [
          "MenuRenderer"
        ],
        "summary": "Add customisable `MenuRenderer` component\n\n**BREAKING CHANGES**\n\n-   Rename `OverflowMenuItem` to `MenuItem`.\n-   Removed `type=\"link\"` from `OverflowMenuItem` due to an accessibility issue with the approach (based on review of consumer usage, it did not seem to be used).\n\n**FEATURES**\n\n**`MenuRenderer`**\n\nEncapsulates all the behaviours of an accessible menu button, allowing consumers to define a custom `trigger` to open the menu. The trigger function receives two arguments:\n\n1.  Props required for accessibility, including mouse/keyboard interactions\n2.  Menu state object containing the `open` state.\n\n```tsx\n<MenuRenderer\n  trigger={(triggerProps, { open }) => (\n    <button {...triggerProps}>Menu</button>\n  )}\n>\n  <MenuItem onClick={...}>Option</MenuItem>\n</MenuRenderer>\n```\n\n**MIGRATION GUIDE**\n\n**`OverflowMenuItem`**\n\nRename `OverflowMenuItem` to `MenuItem`.\n\n```diff\n <OverflowMenu label=\"Overflow\">\n-  <OverflowMenuItem onClick={...}>Option</OverflowMenuItem>\n+  <MenuItem onClick={...}>Option</MenuItem>\n </OverflowMenu>\n```\n\nChanging the `type` is no longer supported due to an accessibility issue with the previous implementation. Please get in contact via Slack if you depended on this.\n\n```diff\n <OverflowMenu label=\"Overflow\">\n-  <OverflowMenuItem type=\"link\" onClick={...}>Option</OverflowMenuItem>\n+  <MenuItem onClick={...}>Option</MenuItem>\n </OverflowMenu>\n```"
      },
      {
        "new": [
          "BraidTestProvider"
        ],
        "summary": "Add BraidTestProvider component.\n\nThis is an alternative to `BraidProvider` for unit test environments. Note that, as the name implies, this should _not_ be used in production code.\n\n**MIGRATION GUIDE**\n\nIn your unit tests, you can replace usage of `BraidProvider` with `BraidTestProvider`, omitting the theme.\n\n```diff\n-<BraidProvider theme={wireframe}>\n+<BraidTestProvider>\n```\n\nIf for whatever reason your tests are relying on the presence of a specific theme, you can pass the name of the desired theme.\n\n```diff\n-<BraidProvider theme={seekAnz}>\n+<BraidTestProvider themeName=\"seekAnz\">\n```"
      },
      {
        "updated": [
          "Button",
          "ButtonRenderer",
          "OverflowMenu"
        ],
        "summary": "Only show focus rings on buttons for keyboard navigation.\n\nThis impacts the following components:\n\n-   `Button`\n-   `ButtonRenderer`\n-   `OverflowMenu`\n\nBrowsers automatically show focus rings on buttons when clicking on them, even though (for our purposes, at least) they're undesirable from a visual design perspective and redudant from a UX perspective.\n\nWe now automatically hide these focus rings if the user has moved their mouse, indicating that they're not navigating via the keyboard. However, to maintain keyboard accessibility, we reinstate these focus rings whenever the keyboard is used. Most typically, this ensures that you'll see focus rings when tabbing around the UI, even if you've previously used the mouse.\n\n**MIGRATION GUIDE**\n\nNo public APIs are affected by this, but you may find that this causes unit test failues that look like this:\n\n> Warning: An update to X inside a test was not wrapped in act(...).\n\nIf this is the case, you should replace `BraidProvider` in your tests with `BraidTestProvider`.\n\n```diff\n-<BraidProvider theme={wireframe}>\n+<BraidTestProvider>\n```"
      }
    ]
  },
  {
    "version": "23.0.2",
    "updates": [
      {
        "updated": [
          "TextField",
          "Autosuggest"
        ],
        "summary": "Hide webkit native clear field on search type inputs"
      }
    ]
  },
  {
    "version": "29.3.0",
    "updates": [
      {
        "updated": [
          "Badge"
        ],
        "summary": "**Badge:** Allow custom title text\n\n**EXAMPLE USAGE**\n\n```jsx\n<Badge tone=\"positive\" title=\"3 new jobs\">3</Badge>\n```"
      },
      {
        "updated": [
          "TabPanel"
        ],
        "summary": "Improved server rendering of Tabs\n\nPreviously, `Tab` and `TabPanel` components only showed their content and active states after the first render, which meant server rendering was not ideal. Active Tabs and TabPanel content can now be server rendered. Uncontrolled usages of Tabs should just work.\n\nFor controlled Tabs using the `selectedItem` prop, you now need to pass the `item` prop (already on `Tab`) to `TabPanel` as well.\n\n```diff\n<TabsProvider id=\"id\" selectedItem=\"second\">\n  <Tabs label=\"Test tabs\">\n    <Tab item=\"first\">The first tab</Tab>\n    <Tab item=\"second\">The second tab</Tab>\n    <Tab item=\"third\">The third tab</Tab>\n  </Tabs>\n  <TabPanels>\n-    <TabPanel>\n+    <TabPanel item=\"first\">\n      <Placeholder height={200} label=\"Panel 1\" />\n    </TabPanel>\n-    <TabPanel>\n+    <TabPanel item=\"second\">\n      <Placeholder height={200} label=\"Panel 2\" />\n    </TabPanel>\n-    <TabPanel>\n+    <TabPanel item=\"third\">\n      <Placeholder height={200} label=\"Panel 3\" />\n    </TabPanel>\n  </TabPanels>\n</TabsProvider>\n```"
      },
      {
        "updated": [
          "ContentBlock"
        ],
        "summary": "**ContentBlock:** Add support for xsmall & small widths\n\n**EXAMPLE USAGE**\n\n```jsx\n<ContentBlock width=\"small\">\n  ...\n</ContentBlock>\n```"
      }
    ]
  },
  {
    "version": "29.4.0",
    "updates": [
      {
        "updated": [
          "Badge"
        ],
        "summary": "**Badge:** Add `bleedY` prop\n\nYou can now choose to allow the badge’s background colour to bleed out into the surrounding layout, making it easier to align with other elements.\n\nFor example, we can align a badge to a [Heading](https://seek-oss.github.io/braid-design-system/components/Heading) element using an [Inline](https://seek-oss.github.io/braid-design-system/components/Inline), even though the badge is actually taller than the heading. If we didn’t use the `bleedY` prop in this case, the badge would introduce unwanted space above and below the heading.\n\n```jsx\n<Inline alignY=\"center\" space=\"xsmall\">\n  <Heading level=\"4\">Heading</Heading>\n  <Badge bleedY tone=\"positive\">\n    New\n  </Badge>\n</Inline>\n```"
      },
      {
        "updated": [
          "List",
          "BulletList"
        ],
        "summary": "**List, BulletList:** Ensure list items are full width\n\nFixes an issue where list content was unable to stretch to the edge of its container. To allow this, we now set the list item container itself to be full width so that content is no longer constrained."
      },
      {
        "updated": [
          "ContentBlock"
        ],
        "summary": "**ContentBlock:** Ensure block is full width\n\nFixes an issue where `ContentBlock`s inside of flex containers would not grow to their defined `max-width`."
      },
      {
        "new": [
          "Dialog"
        ],
        "summary": "Add `Dialog` component\n\nFollows the [WAI Aria Dialog (Modal) Pattern](https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal).\n\n**EXAMPLE USAGE:**\n\n```jsx\n<Fragment>\n  <Actions>\n    <Button onClick={() => setOpen(true)}>Open dialog</Button>\n  </Actions>\n\n  <Dialog\n    title=\"Dialog Example\"\n    id={id}\n    open={open}\n    onClose={setOpen}\n  >\n    <Placeholder height={100} width=\"100%\" />\n  </Dialog>\n</Fragment>\n```\n\nSee [the documentation](https://seek-oss.github.io/braid-design-system/components/Dialog) for an exhaustive list of features."
      }
    ]
  },
  {
    "version": "29.5.0",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest**: Update to ARIA 1.2 combobox spec"
      },
      {
        "new": [
          "MenuItemDivider"
        ],
        "summary": "Add **MenuItemDivider** component\n\nYou can now place visual separators between groups of menu items when using [OverflowMenu](https://seek-oss.github.io/braid-design-system/components/OverflowMenu)/[MenuRenderer](https://seek-oss.github.io/braid-design-system/components/MenuRenderer).\n\n**EXAMPLE USAGE**\n\n```jsx\n<OverflowMenu label=\"Options\">\n  <MenuItem onClick={() => {}}>Button</MenuItem>\n  <MenuItemLink href=\"#\">Link</MenuItemLink>\n  <MenuItemDivider />\n  <MenuItem onClick={() => {}}>Another button</MenuItem>\n</OverflowMenu>\n```"
      },
      {
        "new": [
          "MenuItemCheckbox"
        ],
        "summary": "Add **MenuItemCheckbox** component\n\nYou can now render checkboxes within [OverflowMenu](https://seek-oss.github.io/braid-design-system/components/OverflowMenu)/[MenuRenderer](https://seek-oss.github.io/braid-design-system/components/MenuRenderer) elements.\n\n**EXAMPLE USAGE**\n\n```jsx\n<OverflowMenu label=\"Checklist\">\n  <MenuItemCheckbox checked={true} onChange={() => {}}>\n    Checkbox 1\n  </MenuItemCheckbox>\n  <MenuItemCheckbox checked={false} onChange={() => {}}>\n    Checkbox 2\n  </MenuItemCheckbox>\n  <MenuItemCheckbox checked={false} onChange={() => {}}>\n    Checkbox 3\n  </MenuItemCheckbox>\n</OverflowMenu>\n```"
      },
      {
        "updated": [
          "Loader"
        ],
        "summary": "**Loader:** Add support for `aria-label`\n\nProvides a mechanism for consumers to better communicate to assistive technologies what is happening.\n\n**EXAMPLE USAGE:**\n```jsx\n<Loader aria-label=\"Loading search results\" />\n```"
      }
    ]
  },
  {
    "version": "29.5.1",
    "updates": [
      {
        "updated": [
          "MenuRenderer",
          "OverflowMenu"
        ],
        "summary": "**MenuRenderer, OverflowMenu:** Fix circular dependency issue"
      }
    ]
  },
  {
    "version": "29.6.0",
    "updates": [
      {
        "updated": [
          "HiddenVisually"
        ],
        "summary": "**HiddenVisually:** Add support for passing IDs\n\nThis is useful when mapping a `HiddenVisually` component to `aria-describedby`\n\n**EXAMPLE USAGE:**\n```jsx\n<HiddenVisually id=\"my-hidden-desciption\">Hidden desciption</HiddenVisually>\n```"
      },
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Add translations prop to enable internationalisation"
      },
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Improve screen reader experience\n\nAdd description informing user that suggestions will appear below field. Also, notify users about how many suggestions are available, and about automatic selections."
      },
      {
        "updated": [
          "TextField",
          "PasswordField",
          "Textarea",
          "Dropdown"
        ],
        "summary": "**TextField, PasswordField, Textarea, Dropdown:** Add support for multiple field descriptions\n\nPreviously, if a custom `aria-describedby` prop was passed, it would take precedence over the `message` prop, which also uses `aria-describedby`. Both descriptions can now be applied at the same time."
      }
    ]
  },
  {
    "version": "29.7.0",
    "updates": [
      {
        "updated": [
          "TextField",
          "PasswordField",
          "Textarea",
          "Autosuggest",
          "Dropdown",
          "MonthPicker"
        ],
        "summary": "**TextField, PasswordField, Textarea, Autosuggest, Dropdown, MonthPicker:** Add decription to aria-describedby"
      },
      {
        "updated": [
          "FieldLabel"
        ],
        "summary": "**FieldLabel:** Add descriptionId prop\n\n**EXAMPLE USAGE:**\n```jsx\n<FieldLabel \n    htmlFor=\"id\" \n    label=\"This is a field label\" \n    description=\"Extra info about the field\" \n    descriptionId=\"id-description\"\n/>\n```"
      }
    ]
  },
  {
    "version": "29.8.0",
    "updates": [
      {
        "new": [
          "Drawer"
        ],
        "summary": "Add **Drawer** component\n\nYou can now open a modal panel on the right-hand side of the screen, following the [WAI Aria Dialog (Modal) Pattern](https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal).\n\nSee the [documentation](https://seek-oss.github.io/braid-design-system/components/Drawer) for more details and interactive examples."
      },
      {
        "updated": [
          "Box"
        ],
        "summary": "**Box:** Add `maxWidth` prop\n\nThe sizes from [ContentBlock](https://seek-oss.github.io/braid-design-system/components/ContentBlock) are now available at a lower level for more primitive-based layouts.\n\n**EXAMPLE USAGE:**\n\n```jsx\n<Box maxWidth=\"large\">...</Box>\n```"
      },
      {
        "updated": [
          "Dialog"
        ],
        "summary": "**Dialog:** Fix close button to the corner of the dialog when scrolling"
      },
      {
        "updated": [
          "Autosuggest",
          "Dialog"
        ],
        "summary": "**Autosuggest, Dialog:** Lighten backdrop opacity from 0.7 to 0.4"
      }
    ]
  },
  {
    "version": "29.8.1",
    "updates": [
      {
        "updated": [
          "Loader",
          "Button",
          "ButtonLink",
          "ButtonRenderer"
        ],
        "summary": "**Loader, Button, ButtonLink, ButtonRenderer:** Improve performance of loading animations\n\nAdjust animations properties and values to reduce CPU recalculation overheads."
      },
      {
        "updated": [
          "Toggle"
        ],
        "summary": "**Toggle:** Ensure there is a minimum amount of space between the label and the toggle when using justified alignment"
      }
    ]
  },
  {
    "version": "29.9.0",
    "updates": [
      {
        "updated": [
          "Radio",
          "Checkbox"
        ],
        "summary": "**Radio,Checkbox:** Add description and badge support\n\nAllows a way to provide more detail about a `Radio` or `Checkbox` item using `description`, bringing these fields into line with the rest of the form fields in Braid. Also allows a `badge` to be provided to be placed alongside the `label`.\n\n**EXAMPLE USAGE:**\n```jsx\n<Radio\n  label=\"Option\"\n  description=\"This option is your favourite\"\n  badge={\n    <Badge tone=\"positive\" weight=\"strong\">\n      New\n    </Badge>\n  }\n/>\n```\n\nor\n\n```jsx\n<Checkbox\n  label=\"Option\"\n  description=\"This option is your favourite\"\n  badge={\n    <Badge tone=\"positive\" weight=\"strong\">\n      New\n    </Badge>\n  }\n/>\n```"
      }
    ]
  },
  {
    "version": "29.10.0",
    "updates": [
      {
        "updated": [
          "List"
        ],
        "summary": "**List:** Add support for Roman numerals\n\n**EXAMPLE USAGE**\n\n```jsx\n<List type=\"roman\">\n  <Text>This is a Roman list item.</Text>\n  <Text>This is a Roman list item.</Text>\n  <Text>This is a Roman list item.</Text>\n</List>\n```"
      }
    ]
  },
  {
    "version": "29.11.0",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Add `hideSuggestionsOnSelection` prop\n\nTypically we hide the suggestion list when a selection is made, assuming that the field is now populated with the desired value. However, if the surrounding application clears the text field when a selection is made, this clashes with the user expectation that the field has been reverted back to its initial state with suggestions visible. To cater for this, we now allow you to opt out of this behaviour via the `hideSuggestionsOnSelection` boolean prop.\n\n**EXAMPLE USAGE**\n\n```jsx\n<Autosuggest hideSuggestionsOnSelection={false} {...rest} />\n```"
      }
    ]
  },
  {
    "version": "29.11.1",
    "updates": [
      {
        "updated": [
          "TextField",
          "Dropdown",
          "PasswordField",
          "MonthPicker",
          "Textarea"
        ],
        "summary": "**TextField,Dropdown,PasswordField,MonthPicker,Textarea:** Apply aria-describedby to form elements only when needed\n\nOnly apply `aria-describedby` to form elements when needed, e.g. either a `message`, `description`, or an explicit `aria-describedby` is passed."
      },
      {
        "updated": [
          "MonthPicker"
        ],
        "summary": "**MonthPicker:** Announce semantic grouping of fields and improved translation support.\n\nWhen not on a native device, the MonthPicker uses a `fieldset` containing two dropdowns. This change ensures that the grouping is announced correctly. From a translations perspective the labels for the dropdowns are no longer a concatenation of the `label` and `monthLabel`/`yearLabel`, supporting translation of the entire phrase."
      }
    ]
  },
  {
    "version": "29.11.2",
    "updates": [
      {
        "updated": [
          "Radio",
          "Checkbox"
        ],
        "summary": "**Radio,Checkbox:** Apply aria-describedby only when needed\n\nOnly apply aria-describedby when needed, e.g. either a message or description is passed."
      },
      {
        "updated": [
          "IconVisibility"
        ],
        "summary": "**IconVisibility:** Simplify visibility icon"
      }
    ]
  },
  {
    "version": "29.11.3",
    "updates": [
      {
        "updated": [
          "Tabs"
        ],
        "summary": "**Tabs:** Only scroll tabs when necessary on large screens\n\nPreviously, when there were enough tabs to require horizontal scrolling, we would always scroll the active tab to the left-hand side of the scroll container (with a slight offset). This was primarily designed as a mobile interaction, and in practice was found to be a bit unexpected on large screens.\n\nInstead, when the tabs are scrollable on large screens, we now only scroll the active tab into view if it's partially off-screen or positioned too close to the edge of the scroll container. This ensures that automatic scrolling only occurs when absolutely necessary."
      }
    ]
  },
  {
    "version": "29.12.0",
    "updates": [
      {
        "new": [
          "RadioGroup",
          "RadioItem"
        ],
        "summary": "**RadioGroup,RadioItem:** Add RadioGroup & RadioItem components\n\nThe RadioGroup provides an accessible way to group and control a set of **RadioItem** components. The RadioGroup is responsible for handling the value, tone, message, and disabled state—determining the presentation and selection of the items in the list.\n\n**EXAMPLE USAGE:**\n```jsx\n<RadioGroup\n  id=\"experience\"\n  label=\"Experience\"\n  value=\"\"\n  onChange={() => {}}\n>\n  <RadioItem label=\"Less than one year\" value=\"0\" />\n  <RadioItem label=\"1 year\" value=\"1\" />\n  <RadioItem label=\"2 years\" value=\"2\" />\n  <RadioItem label=\"3+ years \" value=\"3\" />\n</RadioGroup>\n```"
      }
    ]
  },
  {
    "version": "29.13.0",
    "updates": [
      {
        "updated": [
          "List"
        ],
        "summary": "**List:** Add support for icons\n\nProvides a way to use an icon for all the items in a list. When using `type=\"icon\"` you must also provide the `icon` prop. See example below:\n\n**EXAMPLE USAGE:**\n```jsx\n<List type=\"icon\" icon={<IconTick tone=\"positive\" />}>\n  <Text>This is a list item.</Text>\n  <Text>This is a list item.</Text>\n  <Text>This is a list item.</Text>\n</List>\n```"
      }
    ]
  },
  {
    "version": "29.13.1",
    "updates": [
      {
        "updated": [
          "Checkbox",
          "RadioGroup",
          "Radio"
        ],
        "summary": "**Checkbox,RadioGroup,Radio:** Fix element type passed to onChange event\n\nFixes a bug where the `onChange` event previously received the change event for a `form` element rather than an `input` element."
      }
    ]
  },
  {
    "version": "29.14.0",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Forward `ref` prop to input element"
      }
    ]
  },
  {
    "version": "29.15.0",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Support custom label text for suggestions\n\nYou can now optionally provide different suggestion text from the value that gets inserted into the text field.\n\n**EXAMPLE USAGE**\n\n```tsx\n<Autosuggest\n  suggestions={[{ text: 'apples', label: 'Add \"apples\"' }]}\n  {...restProps}\n/>\n```"
      }
    ]
  },
  {
    "version": "29.16.0",
    "updates": [
      {
        "updated": [
          "Checkbox"
        ],
        "summary": "**Checkbox:** Add support for mixed state\n\nA checkbox can now accept a boolean or `mixed` as the `checked` property. When `mixed`, the checkbox is marked as being in an `indeterminate` state and announced as `mixed` to a screen reader.\n\n**EXAMPLE USAGE:**\n```jsx\n<Checkbox\n  checked=\"mixed\"\n  onChange={handler}\n  label=\"Label\"\n/>\n```"
      }
    ]
  },
  {
    "version": "29.17.0",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Add `filterSuggestions` function, allow `suggestions` prop to be a function\n\nThe logic for filtering suggestions typically lives on the server rather than the client because it’s impractical to send all possible suggestions over the network. However, when prototyping in Playroom or working with smaller datasets, you may want to perform this filtering on the client instead. For this case, we now provide a `filterSuggestions` function to make this as painless as possible.\n\nTo better support this behaviour, you can now pass a function to the `suggestions` prop. When executed, this function will be passed the current `value` of the field.\n\n**EXAMPLE USAGE**\n\n```tsx\nimport { Autosuggest, filterSuggestions } from 'braid-design-system';\n\n<Autosuggest\n  suggestions={filterSuggestions([\n    { text: 'Apples', value: 1 },\n    { text: 'Bananas', value: 2 }\n  ])}\n  {...restProps}\n  />\n```"
      }
    ]
  },
  {
    "version": "29.17.1",
    "updates": [
      {
        "updated": [
          "Toggle"
        ],
        "summary": "**Toggle:** Fix layout issue when label text wraps to multiple lines"
      }
    ]
  },
  {
    "version": "29.17.2",
    "updates": []
  },
  {
    "version": "29.17.3",
    "updates": [
      {
        "updated": [
          "Checkbox"
        ],
        "summary": "**Checkbox:** Support inferring of tri-state checked value\n\nTo simplify the use of tri-state checkboxes, the **checked** prop now supports resolving the tri-state value from an array of checked values.\n\n**EXAMPLE USAGE:**\n```jsx\n <Checkbox\n  label=\"Select all\"\n  checked={[ true, false, false ]} // Will resolve to \"mixed\"\n/>\n```"
      },
      {
        "updated": [
          "Dropdown"
        ],
        "summary": "**Dropdown:** Only show a blank option in the list when the `value` prop is blank and a placeholder isn't present"
      },
      {
        "updated": [
          "PasswordField"
        ],
        "summary": "**PasswordField:** Ensure disabled is handled correctly\n\nFixes a bug where the **disabled** prop was hiding the visibility toggle but leaving the field enabled."
      }
    ]
  },
  {
    "version": "29.18.0",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Add support for custom messages when no suggestions are present\n\nIf no suggestions are available and you'd like to provide an explanation to the user, you can now pass an object with a `messages` property to the `suggestions` prop.\n\n**EXAMPLE USAGE**\n\n```tsx\n<Autosuggest\n  suggestions={{ message: 'No suggestions available.' }}\n  {...restProps}\n/>\n```"
      }
    ]
  },
  {
    "version": "29.19.0",
    "updates": [
      {
        "updated": [
          "Box"
        ],
        "summary": "**Box:** Add `\"criticalActive\"` and `\"criticalHover\"` to `background` prop"
      },
      {
        "updated": [
          "Button",
          "ButtonLink",
          "ButtonRenderer"
        ],
        "summary": "**Button, ButtonLink, ButtonRenderer:** Add support for `critical` tone\n\nFor destructive actions (e.g. \"Delete\") you can now provide a `tone` prop with a value of `\"critical\"`.\n\n**EXAMPLE USAGE**\n\n```tsx\n<Button tone=\"critical\">\n  <IconDelete /> Delete\n</Button>\n```"
      },
      {
        "updated": [
          "Box"
        ],
        "summary": "**Box:** Add `\"borderCriticalLarge\"` to `boxShadow` prop"
      }
    ]
  },
  {
    "version": "29.20.0",
    "updates": [
      {
        "updated": [
          "MenuItem",
          "MenuItemLink"
        ],
        "summary": "**MenuItem, MenuItemLink:** Add support for `critical` tone\n\nFor destructive actions (e.g. \"Delete\") you can now provide a `tone` prop with a value of `\"critical\"`.\n\n**EXAMPLE USAGE**\n\n```tsx\n<OverflowMenu label=\"Options\">\n  <MenuItem tone=\"critical\" onClick={() => {}}>\n    Delete\n  </MenuItem>\n</OverflowMenu>\n```"
      },
      {
        "updated": [
          "OverflowMenu",
          "MenuRenderer",
          "MenuItemDivider"
        ],
        "summary": "**OverflowMenu, MenuRenderer, MenuItemDivider:** Remove horizontal padding"
      }
    ]
  },
  {
    "version": "29.20.1",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Fix bug where async suggestions may not be visible\n\nThis fixes a bug where suggestions wouldn't become visible if the `suggestions` prop was initially empty and then populated asynchronously, only becoming visible on the next user interaction, e.g. typing in the field."
      }
    ]
  },
  {
    "version": "29.21.0",
    "updates": [
      {
        "new": [
          "IconMobile",
          "IconDesktop"
        ],
        "summary": "Add IconMobile and IconDesktop icons."
      },
      {
        "updated": [
          "TextField"
        ],
        "summary": "**TextField:** Add `prefix` prop\n\nThe `prefix` prop allows you to prepend read-only content on the left-hand side of the field. This is typically used for currency symbols, country codes, etc.\n\n**EXAMPLE USAGE**\n\n```jsx\n<TextField prefix=\"+61\" {...rest} />\n```"
      }
    ]
  },
  {
    "version": "29.21.1",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Ensure input occupies the full width of its container"
      }
    ]
  },
  {
    "version": "29.22.0",
    "updates": [
      {
        "updated": [
          "Tabs"
        ],
        "summary": "**Tabs:** Add `divider` prop, support `full` and `none`\n\nYou can now customise the width of the divider line underneath the tab strip. The default value is `minimal`, but you can now set it to `full` or `none`.\n\n**EXAMPLE USAGE**\n\n```jsx\n<TabsProvider id=\"id\">\n  <Tabs label=\"Label\" divider=\"full\">\n    <Tab>The first tab</Tab>\n    <Tab>The second tab</Tab>\n  </Tabs>\n  <TabPanels>\n    <TabPanel>\n      ...\n    </TabPanel>\n    <TabPanel>\n      ...\n    </TabPanel>\n  </TabPanels>\n</TabsProvider>\n```"
      }
    ]
  },
  {
    "version": "29.23.0",
    "updates": [
      {
        "updated": [
          "Button",
          "ButtonLink",
          "ButtonRenderer",
          "Actions"
        ],
        "summary": "**Button, ButtonLink, ButtonRenderer, Actions:** Add `size` prop, support `small` size\n\nYou can now render smaller variants of button/action elements by setting the `size` prop to `small`.\n\n**EXAMPLE USAGE**\n\n**Small Button**\n\n```jsx\n<Button size=\"small\">Small Button</Button>\n```\n\n**Small Actions**\n\n```jsx\n<Actions size=\"small\">\n  <Button>Regular Button</Button>\n  <Button weight=\"weak\">Weak Button</Button>\n  <TextLink href=\"#\">TextLink</TextLink>\n</Actions>\n```"
      },
      {
        "updated": [
          "Button",
          "ButtonLink",
          "ButtonRenderer"
        ],
        "summary": "**Button, ButtonLink, ButtonRenderer:** Reduce horizontal padding of `standard` size from `gutter` to `medium`"
      }
    ]
  },
  {
    "version": "29.24.0",
    "updates": [
      {
        "updated": [
          "Hidden"
        ],
        "summary": "**Hidden:** Add `component` support\n\nYou can now customise the DOM element rendered when using `Hidden`. If no `component` is specified, it will fall back to the current behaviour — a `div` by default, or a `span` when setting `inline` to `true`.\n\n**EXAMPLE USAGE:**\n```jsx\n<Hidden component=\"li\">\n  ...\n</Hidden>\n```"
      },
      {
        "new": [
          "Pagination"
        ],
        "summary": "**Pagination:** Add component\n\n**EXAMPLE USAGE:**\n```jsx\n<Pagination\n  label=\"Search results pagination\"\n  page={1}\n  total={20}\n  linkProps={({ page }) => ({\n    href: `/results?page=${page}`\n  })}\n/>\n```"
      }
    ]
  },
  {
    "version": "29.25.0",
    "updates": [
      {
        "updated": [
          "Pagination"
        ],
        "summary": "Add space between page and navigation controls above mobile to improve affordance between the current page and the hover state of surrounding buttons."
      },
      {
        "updated": [
          "Tabs"
        ],
        "summary": "**Tabs:** Support fragments and `null`/`undefined` as children in `Tabs` and `TabPanels`"
      }
    ]
  },
  {
    "version": "29.26.0",
    "updates": [
      {
        "updated": [
          "Box"
        ],
        "summary": "**Box:** Add `borderBrandAccentLarge` to `boxShadow` prop"
      },
      {
        "updated": [
          "Text",
          "IconAdd",
          "IconBookmark",
          "IconCaution",
          "IconChevron",
          "IconClear",
          "IconCompany",
          "IconCompose",
          "IconCopy",
          "IconCreditCard",
          "IconCritical",
          "IconDate",
          "IconDelete",
          "IconDesktop",
          "IconDocument",
          "IconDocumentBroken",
          "IconDownload",
          "IconEdit",
          "IconEducation",
          "IconFilter",
          "IconGrid",
          "IconHeart",
          "IconHelp",
          "IconHistory",
          "IconHome",
          "IconImage",
          "IconInfo",
          "IconInvoice",
          "IconLanguage",
          "IconLink",
          "IconLinkBroken",
          "IconList",
          "IconLocation",
          "IconMail",
          "IconMinus",
          "IconMobile",
          "IconMoney",
          "IconNewWindow",
          "IconNote",
          "IconNotification",
          "IconOverflow",
          "IconPeople",
          "IconPersonAdd",
          "IconPersonVerified",
          "IconPhone",
          "IconPositive",
          "IconPrint",
          "IconProfile",
          "IconPromote",
          "IconRecommended",
          "IconRefresh",
          "IconResume",
          "IconSearch",
          "IconSecurity",
          "IconSend",
          "IconSent",
          "IconSettings",
          "IconShare",
          "IconSocialFacebook",
          "IconSocialGitHub",
          "IconSocialInstagram",
          "IconSocialLinkedIn",
          "IconSocialMedium",
          "IconSocialTwitter",
          "IconStar",
          "IconStatistics",
          "IconSubCategory",
          "IconTag",
          "IconTick",
          "IconTime",
          "IconUpload",
          "IconVideo",
          "IconVisibility",
          "IconWorkExperience"
        ],
        "summary": "**Text, Icons:** Add brandAccent tone to Text and Icons\n\n**EXAMPLE USAGE:**\n```jsx\n<Text tone=\"brandAccent\">...</Text>\n```"
      },
      {
        "updated": [
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**TextLink,TextLinkButton:** Deprecate inside of Actions in favour of transparent Button\n\nUsage of `TextLink` or `TextLinkButton` inside of an `Actions` container should now use a `Button` with a `variant` of `transparent`.\n\nPreviously when a `TextLink` or `TextLinkButton` was placed inside of an `Actions` container, it would be given a custom layout to align with the `Button` elements. We are deprecating this behaviour.\n\n**MIGRATION GUIDE:**\nGoing forward `Actions` should only contain `Button` elements. To migrate towards this, both `TextLink` and `TextLinkButton` should now use either a `ButtonLink` or `Button` respectively, with a `variant` or `transparent`.\n\n#### TextLink\n```diff\n<Actions>\n  <Button>...</Button>\n- <TextLink href=\"...\">...</TextLink>\n+ <ButtonLink href=\"...\" variant=\"transparent\">...</ButtonLink>\n</Actions>\n```\n\n#### TextLinkButton\n```diff\n<Actions>\n  <Button>...</Button>\n- <TextLinkButton onClick={...}>...</TextLinkButton>\n+ <Button onClick={...} variant=\"transparent\">...</Button>\n</Actions>\n```"
      },
      {
        "updated": [
          "Button",
          "ButtonLink"
        ],
        "summary": "**Button,ButtonLink:** Add variant to Button and deprecate weight\n\nIntroduces a new `variant` prop to `Button`/`ButtonLink` giving consumers a single prop to use for selecting the visual style of the button. Choose from `solid` (default), `ghost`, `soft` or `transparent`. The colour of the button is now consistently controlled via the `tone` prop, with supported values being `\"brandAccent\"`, `\"critical\"` or `undefined`.\n\nAs a result the `weight` prop is now deprecated. See the migration guide below.\n\n**EXAMPLE USAGE:**\n```jsx\n<Inline space=\"small\" collapseBelow=\"desktop\">\n  <Button>Solid</Button>\n  <Button variant=\"ghost\">Ghost</Button>\n  <Button variant=\"soft\">Soft</Button>\n  <Button variant=\"transparent\">Transparent</Button>\n</Inline>\n```\n\n**MIGRATION GUIDE:**\nThe `weight` prop is now deprecated. If you are not specifying a `weight` there is no change required.\n\nIf you are, each weight can be migrated as follows:\n\n#### Regular\nCan be replicated with a `variant` of `solid` (default).\n```diff\n-<Button weight=\"regular\">...</Button>\n+<Button variant=\"solid\">...</Button>\n```\n\nGiven it is the default `variant`, you could also choose to simply remove the `weight` prop.\n```diff\n-<Button weight=\"regular\">...</Button>\n+<Button>...</Button>\n```\n\n#### Strong\nCan be replicated with a `variant` of `solid` (default), with a `tone` of `brandAccent`.\n```diff\n-<Button weight=\"strong\">...</Button>\n+<Button tone=\"brandAccent\">...</Button>\n```\n\n#### Weak\nCan be replicated with a `variant` of `ghost`.\n```diff\n-<Button weight=\"weak\">...</Button>\n+<Button variant=\"ghost\">...</Button>\n```"
      },
      {
        "updated": [
          "Button",
          "ButtonLink"
        ],
        "summary": "**Button, ButtonLink:** Remove all interactive styles when loading\n\nNo longer applies hover and cursor pointer styles when a `Button` is set to `loading`."
      }
    ]
  },
  {
    "version": "29.27.0",
    "updates": [
      {
        "new": [
          "TooltipRenderer"
        ],
        "summary": "Add **TooltipRenderer** component\n\nTooltips appear on mouse hover, tap and keyboard focus, and are hidden when scrolling and clicking/tapping/focusing on other elements.\n\nTooltips cannot contain interactive elements like links, buttons or form elements.\n\nNote: The trigger element must support `ref`, `tabIndex` and `aria-describedby` props.\n\n**EXAMPLE USAGE**\n\n```tsx\n<TooltipRenderer\n  id={id}\n  tooltip={\n    <Text>\n      This is a tooltip!\n    </Text>\n  }\n>\n  {({ triggerProps }) => (\n    <Box aria-label=\"Help\" {...triggerProps}>\n      <IconHelp />\n    </Box>\n  )}\n</TooltipRenderer>\n```"
      }
    ]
  },
  {
    "version": "29.28.0",
    "updates": [
      {
        "updated": [
          "Box"
        ],
        "summary": "**Box:** Support value of `default` on `cursor` prop\n\n**EXAMPLE USAGE**\n\n```tsx\n<Box cursor=\"default\">...</Box>\n```"
      },
      {
        "updated": [
          "TooltipRenderer"
        ],
        "summary": "**TooltipRenderer:** Add `placement` prop, support `top` and `bottom`. Set default placement to `top`.\n\n**EXAMPLE USAGE**\n\n```tsx\n<TooltipRenderer\n  id={id}\n  tooltip={<Text>This is a tooltip!</Text>}\n  placement=\"bottom\"\n>\n  {({ triggerProps }) => (\n    <Box aria-label=\"Help\" {...triggerProps}>\n      <IconHelp />\n    </Box>\n  )}\n</TooltipRenderer>\n```"
      },
      {
        "updated": [
          "Button",
          "ButtonLink",
          "ButtonRenderer"
        ],
        "summary": "**Button, ButtonLink, ButtonRenderer:** Add `bleedY` prop\n\nYou can now choose to allow the button’s background colour to bleed out into the surrounding layout, making it easier to align with other elements.\n\nFor example, we can align a button to a Heading element using an Inline, even though the button is actually taller than the heading. If we didn’t use the **bleedY** prop in this case, the button would introduce unwanted space above and below the heading.\n\n**EXAMPLE USAGE:**\n```jsx\n<Inline space=\"small\" alignY=\"center\">\n  <Heading level=\"4\">Heading</Heading>\n  <Button bleedY>Button</Button>\n  <Button bleedY size=\"small\">\n    Button\n  </Button>\n</Inline>\n```"
      }
    ]
  },
  {
    "version": "29.28.1",
    "updates": [
      {
        "updated": [
          "TextLink",
          "TextLinkButton",
          "TextLinkRenderer"
        ],
        "summary": "**TextLink, TextLinkButton, TextLinkRenderer:** Scope deprecation warning to only be in Actions context."
      }
    ]
  },
  {
    "version": "29.29.0",
    "updates": [
      {
        "updated": [
          "Box"
        ],
        "summary": "**Box:** Support responsive `borderRadius`\n\nAdds support for responsive values to `borderRadius`.\n\n**EXAMPLE USAGE:**\n```jsx\n<Box borderRadius={['none', 'standard']}>\n  ...\n</Box>\n```"
      },
      {
        "updated": [
          "Button"
        ],
        "summary": "**Button:** Add support for `ref` and `tabIndex` props"
      },
      {
        "updated": [
          "Card"
        ],
        "summary": "**Card:** Add `component` support\n\nThe HTML tag can be customised to ensure the underlying document semantics are meaningful. This can be done using the component prop and supports `div` (default), `article`, `aside`, `details`, `main` and `section`.\n\n**EXAMPLE USAGE:**\n```jsx\n<Card component=\"article\">\n  ...\n</Card>\n```"
      },
      {
        "updated": [
          "Badge"
        ],
        "summary": "**Badge:** Add support for `ref`, `tabIndex` and `aria-describedby` props"
      },
      {
        "updated": [
          "Badge"
        ],
        "summary": "**Badge:** Ensure `ref`, `title`, `tabIndex` and `aria-describedby` props are applied to the visual badge element, not its container element"
      },
      {
        "updated": [
          "Card"
        ],
        "summary": "**Card:** Add `tone` support\n\nSpecifying a `tone` will now add a keyline down the left hand side of the container. The supported tones are `promote` and `formAccent`.\n\n**As a result, Cards are now position relative containers.**\n\n**EXAMPLE USAGE:**\n```jsx\n<Card tone=\"formAccent\">\n  ...\n</Card>\n```"
      },
      {
        "updated": [
          "TextLink",
          "ButtonLink"
        ],
        "summary": "**TextLink, ButtonLink:** Add support for `ref` prop"
      },
      {
        "updated": [
          "TooltipRenderer"
        ],
        "summary": "**TooltipRenderer:** Add arrow to tooltip"
      },
      {
        "updated": [
          "Card"
        ],
        "summary": "**Card:** Add `rounded` and `roundedAbove` support\n\nCard corners can be rounded by providing the `rounded` prop.\n\nAlternatively, rounding may be applied responsively using the `roundedAbove` prop, and providing either `mobile` or `tablet`. This enables card edges to be softened on larger screens, but squared off if it runs full bleed on smaller devices.\n\n**EXAMPLE USAGE:**\n```jsx\n<Card rounded>\n  ...\n</Card>\n```\nor\n```jsx\n<Card roundedAbove=\"mobile\">\n  ...\n</Card>\n```"
      }
    ]
  },
  {
    "version": "29.29.1",
    "updates": [
      {
        "updated": [
          "TooltipRenderer"
        ],
        "summary": "**TooltipRenderer:** Support usage within `Text` elements"
      }
    ]
  },
  {
    "version": "29.29.2",
    "updates": []
  },
  {
    "version": "29.29.3",
    "updates": [
      {
        "updated": [
          "Textarea"
        ],
        "summary": "**Textarea:** Highlight excess characters when `characterLimit` is provided"
      }
    ]
  },
  {
    "version": "29.30.0",
    "updates": [
      {
        "updated": [
          "Accordion"
        ],
        "summary": "**Accordion, AccordionItem:** Allow customisation of size, tone, space and dividers.\n\nNote that, to ensure adequate space for touch targets, the `space` prop only accepts values of `\"medium\"`, `\"large\"` and `\"xlarge\"`.\n\n**EXAMPLE USAGE**\n\n```tsx\n<Accordion size=\"standard\" tone=\"secondary\" space=\"xlarge\" dividers={false}>\n  <AccordionItem label=\"Accordion item 1\">...</AccordionItem>\n  <AccordionItem label=\"Accordion item 2\">...</AccordionItem>\n  <AccordionItem label=\"Accordion item 3\">...</AccordionItem>\n</Accordion>\n```"
      }
    ]
  },
  {
    "version": "29.31.0",
    "updates": [
      {
        "updated": [
          "Pagination"
        ],
        "summary": "**Pagination:** Add keyline to improve active page indicator contrast\n\nImproves the contrast of the active page indicator by adding a keyline when `Pagination` is used outside of a `Card`."
      },
      {
        "updated": [
          "Checkbox",
          "RadioGroup",
          "Toggle"
        ],
        "summary": "**Checkbox,RadioGroup,Toggle:** Add `size` support to Checkbox, RadioGroup & Toggle\n\nAdds support for adjusting the `size` of a `Checkbox`, the RadioItems within a `RadioGroup` or a `Toggle`. Setting the size adjusts both the visual control and the text size of the label.\n\n**EXAMPLE USAGE:**\n```jsx\n  <Checkbox size=\"small\" label=\"Label\" />\n```\n\n```jsx\n  <RadioGroup size=\"small\" label=\"Label\">\n    ...\n  </RadioGroup>\n```\n\n```jsx\n  <Toggle size=\"small\" label=\"Label\" />\n```"
      }
    ]
  },
  {
    "version": "29.32.0",
    "updates": [
      {
        "new": [
          "CheckboxStandalone"
        ],
        "summary": "**CheckboxStandalone:**: Add component\n\nAdds support for cases where a Checkbox needs to be used without a form field style label.\n\nTo maintain accessibility, it is required to provide either a **aria-label** or **aria-labelledby** property, to describe the field's intent.\n\nGiven there is no visual label, the following features from a standard Checkbox cannot be supported:\n- description\n- message\n- badge\n- children (nested content)\n\n**EXAMPLE USAGE:**\n```jsx\n<CheckboxStandalone\n  id={...}\n  checked={...}\n  onChange={...}\n  aria-label=\"Label\"\n/>\n```"
      },
      {
        "updated": [
          "Accordion",
          "AccordionItem",
          "Actions",
          "Alert",
          "Badge",
          "ButtonLink",
          "Card",
          "Column",
          "Columns",
          "ContentBlock",
          "Dialog",
          "Disclosure",
          "Drawer",
          "FieldLabel",
          "FieldMessage",
          "Hidden",
          "HiddenVisually",
          "IconAdd",
          "IconBookmark",
          "IconCaution",
          "IconChevron",
          "IconClear",
          "IconCompany",
          "IconCompose",
          "IconCopy",
          "IconCreditCard",
          "IconCritical",
          "IconDate",
          "IconDelete",
          "IconDesktop",
          "IconDocument",
          "IconDocumentBroken",
          "IconDownload",
          "IconEdit",
          "IconEducation",
          "IconFilter",
          "IconGrid",
          "IconHeart",
          "IconHelp",
          "IconHistory",
          "IconHome",
          "IconImage",
          "IconInfo",
          "IconInvoice",
          "IconLanguage",
          "IconLink",
          "IconLinkBroken",
          "IconList",
          "IconLocation",
          "IconMail",
          "IconMinus",
          "IconMobile",
          "IconMoney",
          "IconNewWindow",
          "IconNote",
          "IconNotification",
          "IconOverflow",
          "IconPeople",
          "IconPersonAdd",
          "IconPersonVerified",
          "IconPhone",
          "IconPositive",
          "IconPrint",
          "IconProfile",
          "IconPromote",
          "IconRecommended",
          "IconRefresh",
          "IconResume",
          "IconSearch",
          "IconSecurity",
          "IconSend",
          "IconSent",
          "IconSettings",
          "IconShare",
          "IconSocialFacebook",
          "IconSocialGitHub",
          "IconSocialInstagram",
          "IconSocialLinkedIn",
          "IconSocialMedium",
          "IconSocialTwitter",
          "IconStar",
          "IconStatistics",
          "IconSubCategory",
          "IconTag",
          "IconTick",
          "IconTime",
          "IconUpload",
          "IconVideo",
          "IconVisibility",
          "IconWorkExperience",
          "Inline",
          "List",
          "MonthPicker",
          "Notice",
          "Pagination",
          "RadioGroup",
          "Rating",
          "Secondary",
          "Stack",
          "Strong",
          "Tag",
          "TextDropdown",
          "Tiles",
          "Toggle"
        ],
        "summary": "Add support for data attribute maps on all components.\n\n**EXAMPLE USAGE:**\n```tsx\n<Alert\n  data={{\n    testId: 'message'\n  }}\n/>\n\n// => <div data-testId=\"message\" />\n```"
      }
    ]
  },
  {
    "version": "29.32.1",
    "updates": [
      {
        "updated": [
          "MenuItem"
        ],
        "summary": "**MenuItem:** Prevent click events from bubbling"
      },
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Fix missing/invalid group headings in some cases"
      }
    ]
  },
  {
    "version": "30.0.0",
    "updates": [
      {
        "updated": [
          "Box"
        ],
        "summary": "**Box:** Remove `transform=\"touchable\"` in favour of `transform={{ active: 'touchable' }}`\n\n**MIGRATION GUIDE**\n\n```diff\n-<Box transform=\"touchable\">\n+<Box transform={{ active: 'touchable' }}>\n```"
      },
      {
        "updated": [
          "TextLinkRenderer"
        ],
        "summary": "**TextLinkRenderer:** Allow custom CSS reset via the `reset` prop, and allow it to be disabled by setting the prop to `false`."
      },
      {
        "updated": [
          "Accordion",
          "Box",
          "BulletList",
          "Columns",
          "Disclosure",
          "Heading",
          "Inline",
          "List",
          "MenuRenderer",
          "Stack",
          "Tabs",
          "Text",
          "Tiles"
        ],
        "summary": "Support object notation for responsive props\n\nResponsive prop values can now be written as objects with named breakpoints, which is now the recommended notation.\n\n```ts\n{ mobile: 'small', tablet: 'medium', desktop: 'large' }\n```\n\nThis also means that breakpoints can be skipped.\n\n```ts\n{ mobile: 'small', desktop: 'large' }\n```"
      },
      {
        "new": [
          "breakpoints"
        ],
        "summary": "Add **breakpoints** object for accessing standard breakpoint values\n\nThe breakpoints object provides a named set of screen sizes that form the basis of all responsive rules in Braid, available in the following format:\n\n```ts\n{\n  mobile: 0,\n  tablet: 740,\n  desktop: 992\n}\n```"
      },
      {
        "updated": [
          "Loader"
        ],
        "summary": "**Loader:** Adjust size to better match text"
      },
      {
        "updated": [
          "Badge"
        ],
        "summary": "**Badge:** Use correct text size for `bleedY` positioning"
      },
      {
        "new": [
          "globalTextStyle",
          "globalHeadingStyle"
        ],
        "summary": "Add **globalTextStyle** and **globalHeadingStyle** functions for applying standard text styles to foreign markup in [vanilla-extract stylesheets](http://vanilla-extract.style)\n\nNote: These utilities should only be used when you have no control over the HTML.\n\n**EXAMPLE USAGE**\n\n```ts\n// styles.css.ts\nimport { style, globalStyle } from '@vanilla-extract/css';\nimport { globalHeadingStyle, globalTextStyle } from 'braid-design-system/css';\n\nexport const root = style({});\n\n// Target all <h2> elements within the root class\nglobalStyle(\n  `${root} h2`,\n  globalHeadingStyle({\n    level: '2',\n  })\n);\n\n// Target all <p> elements within the root class\nglobalStyle(\n  `${root} p`,\n  globalTextStyle({\n    size: 'standard',\n    weight: 'regular',\n  })\n);\n```"
      },
      {
        "new": [
          "atoms"
        ],
        "summary": "Add **atoms** function for accessing re-usable atomic classes within [vanilla-extract stylesheets](http://vanilla-extract.style)\n\nBraid's re-usable atomic classes were previously only available via `Box`, but they are now accessible via the new `atoms` function.\n\n```ts\n// styles.css.ts\nimport { atoms } from 'braid-design-system/css';\n\nexport const className = atoms({\n  paddingTop: 'small'\n});\n```\n\nThis allows you to co-locate custom styles with Braid's atomic classes in your stylesheets.\n\n```ts\n// styles.css.ts\nimport { style, composeStyles } from '@vanilla-extract/css';\nimport { atoms } from 'braid-design-system/css';\n\nexport const className = composeStyles(\n  atoms({ position: 'absolute' }),\n  style({ top: 300 })\n);\n```"
      },
      {
        "new": [
          "BraidPortal"
        ],
        "summary": "Migrate to vanilla-extract\n\nBraid now uses [vanilla-extract](http://vanilla-extract.style) rather than [treat](https://seek-oss.github.io/treat) to power its theme-based styling.\n\nSince they use different file extensions (`.css.ts` vs `.treat.ts`), we're able to ease the migration by supporting both approaches simultaneously in the same project.\n\nWhile we encourage you to write new CSS with vanilla-extract files and slowly migrate your existing treat files over time, the goal is to eventually remove treat entirely to enable further improvements to build tooling.\n\nWe've written a **[treat to vanilla-extract migration guide](https://github.com/seek-oss/braid-design-system/blob/master/docs/treat%20to%20vanilla-extract%20migration.md)** to make it easier when opting to migrate a treat file. If you have any questions or concerns, or if you need assistance with implementation or migration work, please reach out to us in the `#braid-support` channel.\n\n**BREAKING CHANGE**\n\n**React Portals containing Braid components/styles must use the new `BraidPortal` component**\n\nCSS-based theming doesn't automatically cascade through React portals. The new [`BraidPortal`](https://seek-oss.github.io/braid-design-system/components/BraidPortal) component handles this for you by forwarding Braid's CSS variables through the portal.\n\n```diff\n-import { createPortal } from 'react-dom';\n+import { BraidPortal } from 'braid-design-system';\n\n// ...\n\n-return open ? createPortal(<SomeComponent />) : null;\n+return open ? (\n+  <BraidPortal>\n+    <SomeComponent />\n+  </BraidPortal>\n+) : null;\n```"
      },
      {
        "new": [
          "responsiveStyle"
        ],
        "summary": "Add **responsiveStyle** function for creating custom mobile-first styles within [vanilla-extract stylesheets](http://vanilla-extract.style)\n\n**EXAMPLE USAGE**\n\n```ts\n// styles.css.ts\nimport { style } from '@vanilla-extract/css';\nimport { vars, responsiveStyle } from 'braid-design-system/css';\n\nexport const className = style(\n  responsiveStyle({\n    mobile: {\n      flexBasis: vars.space.small,\n    },\n    tablet: {\n      flexBasis: vars.space.medium,\n    },\n    desktop: {\n      flexBasis: vars.space.large,\n    },\n  })\n);\n\n// is equivalent to\nimport { style } from '@vanilla-extract/css';\nimport { vars, breakpoints } from 'braid-design-system/css';\n\nexport const className = style({\n  \"flexBasis\": vars.space.small,\n  \"@media\": {\n    [`screen and (min-width: ${breakpoints.tablet}px)`]: {\n      \"flexBasis\": vars.space.medium\n    },\n    [`screen and (min-width: ${breakpoints.desktop}px)`]: {\n      \"flexBasis\": vars.space.large\n    }\n  }\n});\n```"
      },
      {
        "updated": [
          "Box",
          "Tag",
          "Toggle"
        ],
        "summary": "**Box, Tag, Toggle:** Make `borderRadius=\"full\"` always circular\n\nFixes circular border radius bug where non-square elements would result in an ellipse."
      },
      {
        "new": [
          "vars"
        ],
        "summary": "Add **vars** object for accessing themed CSS variables within [vanilla-extract stylesheets](http://vanilla-extract.style) and runtime files.\n\nTheming is now achieved natively with CSS variables rather than generating separate styles for each theme. CSS variables are exposed via the `braid-design-system/css` import.\n\n```ts\n// styles.css.ts\nimport { style } from '@vanilla-extract/css';\nimport { vars } from 'braid-design-system/css';\n\nexport const className = style({\n  paddingTop: vars.space.small\n});\n```"
      }
    ]
  },
  {
    "version": "30.0.1",
    "updates": [
      {
        "updated": [
          "Textarea"
        ],
        "summary": "**Textarea:** Fix \"Received NaN for the `rows` attribute.\" warning.\n\nFixes the warning in node testing environments where updating the `rows` attribute was failing due to `line-height` being `normal`. Now falling back to the predefined `lines` prop when the dynamic `grow` size is not valid."
      }
    ]
  },
  {
    "version": "30.0.2",
    "updates": []
  },
  {
    "version": "30.0.3",
    "updates": []
  },
  {
    "version": "30.1.0",
    "updates": [
      {
        "updated": [
          "useBreakpoint"
        ],
        "summary": "Deprecate `useBreakpoint`\n\nThis Hook has been deprecated in favour of the new `useResponsiveValue` Hook.\n\nThis is because `useBreakpoint` leads consumers to inadvertently couple themselves to the current set of breakpoints, making it risky for us to introduce new breakpoints.\n\nFor example, you may have chosen to detect large screens by checking that the user is on the (current) largest breakpoint (e.g. `const isDesktop = useBreakpoint() === \"desktop\"`), but this logic would break if we introduced an even larger breakpoint and the Hook started returning other values.\n\nTo maintain backwards compatibility, `useBreakpoint` will continue to return `\"desktop\"` when the user is technically on larger breakpoints.\n\n**MIGRATION GUIDE**\n\n_Note that the `useResponsiveValue` Hook returns a `responsiveValue` function, so in these cases we're double-calling the function._\n\n```diff\n-const isMobile = useBreakpoint() === 'mobile';\n+const isMobile = useResponsiveValue()({\n+  mobile: true,\n+  tablet: false\n+});\n```\n\n```diff\n-const isTablet = useBreakpoint() === 'tablet';\n+const isTablet = useResponsiveValue()({\n+  mobile: false,\n+  tablet: true,\n+  desktop: false,\n+});\n```\n\n```diff\n-const isDesktop = useBreakpoint() === 'desktop';\n+const isDesktop = useResponsiveValue()({\n+  mobile: false,\n+  desktop: true\n+});\n```"
      },
      {
        "updated": [
          "breakpoints",
          "atoms",
          "responsiveStyle",
          "Accordion",
          "Box",
          "BulletList",
          "Columns",
          "Disclosure",
          "Heading",
          "Inline",
          "List",
          "MenuRenderer",
          "Stack",
          "Tabs",
          "Text",
          "Tiles"
        ],
        "summary": "Add `wide` breakpoint of 1200px\n\nThis adds support for `wide` to the following touchpoints:\n - Responsive values, e.g.\n   ```ts\n   { mobile: 'small', wide: 'large' }\n   ```\n - Responsive range props, e.g.\n   ```tsx\n   <Columns collapseBelow=\"wide\" space={{ mobile: 'small', wide: 'large' }}>\n   ```\n - The `responsiveStyle` function, e.g.\n   ```ts\n   export const className = style(responsiveStyle({ wide: '...' }));\n   ```\n - The `breakpoints` object, which now exposes the number `1200` via `breakpoints.wide`, i.e.\n   ```ts\n   {\n     mobile: 0,\n     tablet: 740,\n     desktop: 940,\n     wide: 1200\n   }\n   ```"
      },
      {
        "new": [
          "useResponsiveValue"
        ],
        "summary": "Add `useResponsiveValue` Hook\n\nThis Hook will return the resolved value based on the breakpoint the browser viewport currently falls within (`mobile`, `tablet`, `desktop` or `wide`). As this can only be calculated in the browser, the value will also be `null` when rendering server-side or statically rendering.\n\nNote that this Hook returns a function so that it can be called anywhere within your component.\n\n**EXAMPLE USAGE**\n\n```tsx\nconst responsiveValue = useResponsiveValue();\n\nconst screenSize = responsiveValue({\n  mobile: 'Small',\n  desktop: 'Large',\n});\n```\n\nYou can also resolve to boolean values for breakpoint detection.\n\n```tsx\nconst responsiveValue = useResponsiveValue();\n\nconst isMobile = responsiveValue({\n  mobile: true,\n  tablet: false,\n});\n\nconst isDesktopOrAbove = responsiveValue({\n  mobile: false,\n  desktop: true,\n});\n```"
      },
      {
        "updated": [
          "Dialog",
          "Drawer"
        ],
        "summary": "**Dialog, Drawer:** Support nested Dialogs & Drawers\n\nRemove restriction preventing the nesting of modal components, e.g. `Dialog` and `Drawer`. While it is still discouraged to keep experiences simple, there is no longer a technical guard against it."
      }
    ]
  },
  {
    "version": "30.2.0",
    "updates": []
  },
  {
    "version": "30.2.1",
    "updates": [
      {
        "updated": [
          "Checkbox",
          "RadioGroup",
          "Radio"
        ],
        "summary": "**Checkbox, RadioGroup, Radio:** Use atoms for label cursor styles\n\nSince the disabled state of a checkbox can only be changed via JavaScript, cursor styles can be toggled via `Box` props rather than generating additional CSS.\n\nWhile this is an improvement in and of itself, this change is being made to work around a third-party testing bug where our use of `:disabled` in a complex CSS selector is causing an exception to be thrown."
      }
    ]
  },
  {
    "version": "30.2.2",
    "updates": []
  },
  {
    "version": "30.3.0",
    "updates": [
      {
        "new": [
          "IconThumb",
          "IconFlag"
        ],
        "summary": "**IconThumb, IconFlag:** Add new icons"
      },
      {
        "updated": [
          "Autosuggest",
          "Dropdown",
          "MonthPicker",
          "PasswordField",
          "Textarea",
          "TextField"
        ],
        "summary": "**Autosuggest, Dropdown, MonthPicker, PasswordField, Textarea, TextField:** Add aria-label & aria-labelledby support\n\nIn some cases it may be necessary for a field to be labelled by another element or even not to have a visual label. Instead of providing a **label** either **aria-label** or **aria-labelledby** can be provided.\n\n**EXAMPLE USAGE:**\n```jsx\n// Standard field label\n<TextField label=\"My field\" />\n\n// Hidden field label\n<TextField aria-label=\"My field\" />\n\n// Labelled by another element\n<Heading id=\"title\">Title</Heading>\n<TextField aria-labelledby=\"title\" />\n```"
      }
    ]
  },
  {
    "version": "30.4.0",
    "updates": [
      {
        "updated": [
          "Dialog",
          "Drawer"
        ],
        "summary": "**Dialog, Drawer:** Support long, unbroken title text"
      },
      {
        "updated": [
          "Alert",
          "Badge",
          "Button",
          "ButtonLink",
          "ButtonRenderer",
          "Card",
          "Dialog",
          "MenuRenderer",
          "OverflowMenu",
          "Pagination",
          "TooltipRenderer",
          "useToast"
        ],
        "summary": "**Alert, Badge, Button, ButtonLink, ButtonRenderer, Card, Dialog, MenuRenderer, OverflowMenu, Pagination, TooltipRenderer, useToast:** Increase border radius using updated `borderRadius` scale"
      },
      {
        "updated": [
          "Box"
        ],
        "summary": "**Box:** Add new background and border colours\n\nNew `background` values:\n  - `brandAccentSoft`\n  - `brandAccentSoftActive`\n  - `brandAccentSoftHover`\n  - `criticalSoft`\n  - `criticalSoftActive`\n  - `criticalSoftHover`\n  - `formAccentSoft`\n  - `formAccentSoftActive`\n  - `formAccentSoftHover`\n\nNew `boxShadow` values:\n  - `borderCautionLight`\n  - `borderCriticalLight`\n  - `borderInfoLight`\n  - `borderPositiveLight`\n  - `borderPromoteLight`"
      },
      {
        "updated": [
          "atoms"
        ],
        "summary": "**atoms:** Add new `boxShadow` values:\n\n  - `borderCautionLight`\n  - `borderCriticalLight`\n  - `borderInfoLight`\n  - `borderPositiveLight`\n  - `borderPromoteLight`"
      },
      {
        "updated": [
          "vars"
        ],
        "summary": "**vars:** Add new background and border colours\n\nNew `backgroundColor` values:\n  - `brandAccentSoft`\n  - `brandAccentSoftActive`\n  - `brandAccentSoftHover`\n  - `criticalSoft`\n  - `criticalSoftActive`\n  - `criticalSoftHover`\n  - `formAccentSoft`\n  - `formAccentSoftActive`\n  - `formAccentSoftHover`\n\nNew `borderColor` values:\n  - `cautionLight`\n  - `criticalLight`\n  - `infoLight`\n  - `positiveLight`\n  - `promoteLight`"
      },
      {
        "updated": [
          "Button",
          "ButtonLink",
          "ButtonRenderer"
        ],
        "summary": "**Button, ButtonLink, ButtonRenderer:** The `soft` variant now has a solid background colour rather than an opacity. You may need to review any usage on top of coloured backgrounds."
      },
      {
        "updated": [
          "Box",
          "atoms",
          "vars"
        ],
        "summary": "**Box, atoms, vars:** Add `large` and `xlarge` to `borderRadius` scale"
      },
      {
        "updated": [
          "Box",
          "atoms"
        ],
        "summary": "**`apac` and `seekBusiness` themes:** Increase size of focus ring (accessed via the `boxShadow` value of `\"outlineFocus\"`) and use updated colour palette."
      },
      {
        "updated": [
          "Autosuggest",
          "Checkbox",
          "Dropdown",
          "MonthPicker",
          "PasswordField",
          "Radio",
          "RadioGroup",
          "Textarea",
          "TextField",
          "Toggle"
        ],
        "summary": "Display `formAccent` outline on form elements when focused"
      }
    ]
  },
  {
    "version": "30.4.1",
    "updates": []
  },
  {
    "version": "30.4.2",
    "updates": []
  },
  {
    "version": "30.4.3",
    "updates": [
      {
        "updated": [
          "Autosuggest",
          "Button",
          "ButtonLink",
          "ButtonRenderer",
          "Checkbox",
          "CheckboxStandalone",
          "Dropdown",
          "MonthPicker",
          "PasswordField",
          "Radio",
          "RadioItem",
          "Radio",
          "Textarea",
          "TextField",
          "TextLink",
          "TextLinkButton",
          "TextLinkRenderer",
          "Toggle"
        ],
        "summary": "**Buttons, Fields, TextLinks, Toggle:** Use `span` for field state overlays instead of `div`\n\nProduce more valid HTML as `div` elements are not as flexible with which elements they can be inside (from a validators perspective)."
      }
    ]
  },
  {
    "version": "30.5.0",
    "updates": [
      {
        "updated": [
          "Autosuggest",
          "Dropdown",
          "MonthPicker",
          "PasswordField",
          "TextField",
          "Textarea"
        ],
        "summary": "**Autosuggest, Dropdown, MonthPicker, PasswordField, TextField, Textarea:** Hide `placeholder` text when field is `disabled`"
      },
      {
        "updated": [
          "Autosuggest",
          "Checkbox",
          "CheckboxStandalone",
          "Dropdown",
          "MonthPicker",
          "TextField",
          "Textarea",
          "Radio",
          "RadioGroup"
        ],
        "summary": "**Autosuggest, Checkbox, CheckboxStandalone, Dropdown, MonthPicker, TextField, Textarea, Radio, RadioGroup:** Dim the field value and label when field is `disabled`"
      },
      {
        "updated": [
          "Autosuggest",
          "TextField"
        ],
        "summary": "**Autosuggest, TextField:** Hide clear button when field is `disabled`."
      },
      {
        "updated": [
          "FieldLabel"
        ],
        "summary": "**FieldLabel:** Dim label when `disabled`"
      }
    ]
  },
  {
    "version": "30.5.1",
    "updates": []
  },
  {
    "version": "30.6.0",
    "updates": [
      {
        "updated": [
          "TextLinkButton"
        ],
        "summary": "**TextLinkButton:** Add support for `tabIndex`"
      }
    ]
  },
  {
    "version": "30.7.0",
    "updates": [
      {
        "updated": [
          "Toggle"
        ],
        "summary": "**Toggle:** Add ref support"
      }
    ]
  },
  {
    "version": "31.0.0",
    "updates": [
      {
        "updated": [
          "BraidTestProvider"
        ],
        "summary": "**BraidTestProvider:** Move to separate entry\n\nBy moving `BraidTestProvider` to it’s own entry, we can prevent importing all the themes at dev-time. This improves the developer experience when debugging the stylesheet that is output by the development server.\n\n**MIGRATION GUIDE**\n\nMigration can largely be automated by running the Braid upgrade command. You must provide a glob to target your project’s source files. For example:\n\n```\nyarn braid-upgrade v31 \"**/*.{ts,tsx}\"\n```\n\n---\n\nIt may be necessary to manually migrate code in some cases, here are the affected use cases:\n\n```diff\n- import { BraidTestProvider } from 'braid-design-system';\n+ import { BraidTestProvider } from 'braid-design-system/test';\n```"
      },
      {
        "updated": [
          "Box"
        ],
        "summary": "**Box:** Add neutral background variants and new boxShadow border variants\n\n**New backgrounds**\nThe following backgrounds are now available:\n- `neutralActive`\n- `neutralHover`\n- `neutralSoftActive`\n- `neutralSoftHover`\n\n**New boxShadows**\nThe following box shadows are now available:\n- `borderBrandAccentLightLarge`\n- `borderCriticalLightLarge`\n- `borderFormAccentLight`\n- `borderFormAccentLightLarge`"
      },
      {
        "updated": [
          "Button",
          "ButtonLink"
        ],
        "summary": "**Button, ButtonLink:** Add `neutral` tone\n\nIntroduces a `neutral` tone for cases where actions need to be de-emphasised. As a result, there is a breaking change to the contextual design rules that invert buttons in dark containers.\n\n\n**BREAKING CHANGE:**\n\nA `Button` with a `variant` of `ghost`, `soft`, or `transparent` and no specified `tone` would previously invert when inside a dark container. Now, instead of inverting the foreground colour, these cases will use a lighter version of the default tone, i.e. `formAccent`.\n\n**MIGRATION GUIDE:**\n\nTo maintain previous behaviour, consumers should opt into the `neutral` tone.\n\n```diff\n <Box background=\"brand\" padding=\"gutter\">\n-   <Button variant=\"ghost\">Click</Button>\n+   <Button variant=\"ghost\" tone=\"neutral\">Click</Button>\n </Box>\n```"
      },
      {
        "updated": [
          "Text"
        ],
        "summary": "**Text:** Improve contrast of `brandAccent`, `critical` and `formAccent` tones\n\nWhen using any of the above tones in a dark container, a lighter colour will be used to improve the text contrast against the background."
      },
      {
        "updated": [
          "atoms"
        ],
        "summary": "**atoms:** Add boxShadow border variants\n\n**New boxShadows**\nThe following box shadows are now available:\n- `borderBrandAccentLightLarge`\n- `borderCriticalLightLarge`\n- `borderFormAccentLight`\n- `borderFormAccentLightLarge`"
      },
      {
        "updated": [
          "vars"
        ],
        "summary": "**vars:** Darken neutral background for the `occ` theme.\n\nA `neutral` background should be able to hold tone-based text. Moving from `grey700` to `grey800` as per the [Atomic Design System color palette](https://occmundial.github.io/occ-atomic/#Colors)"
      },
      {
        "updated": [
          "vars"
        ],
        "summary": "**vars:** Add new backgrounds and light variant border colors\n\n**New backgrounds**\nThe following backgrounds are now available on the `vars.backgroundColor` theme object:\n- `neutralActive`\n- `neutralHover`\n- `neutralSoftActive`\n- `neutralSoftHover`\n\n**New borderColors**\nThe following border colors are now available on the `vars.borderColor` theme object:\n- `brandAccentLight`\n- `criticalLight`\n- `formAccentLight`"
      },
      {
        "updated": [
          "Button",
          "ButtonLink"
        ],
        "summary": "**Button, ButtonLink:** Remove weight prop\n\nRemoving support for the `weight` prop. This was deprecated back in [v29.26.0](https://seek-oss.github.io/braid-design-system/releases#29.26.0) in favour of using the [`variant`](https://seek-oss.github.io/braid-design-system/components/Button#variants) prop."
      },
      {
        "updated": [
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**TextLink, TextLinkButton:** Remove support inside `Actions` component\n\nRemoving support for `TextLink` and `TextLinkButton` components inside of `Actions`. This was previously deprecated back in [v29.26.0](https://seek-oss.github.io/braid-design-system/releases#29.26.0) in favour of using the `transparent` `variant` of [`ButtonLink`](https://seek-oss.github.io/braid-design-system/components/Button#variants).\n\n**MIGRATION GUIDE**\n\n```diff\n  <Actions>\n    <Button>...</Button>\n-   <TextLink href=\"...\">...</TextLink>\n+   <ButtonLink href=\"...\" variant=\"transparent\">...</ButtonLink>\n  </Actions>\n```"
      },
      {
        "updated": [
          "vars"
        ],
        "summary": "**vars:** Darken neutral background for the `seekAnz` theme.\n\nA `neutral` background should be able to hold tone-based text. Moving from `sk-mid-gray-dark` to `sk-charcoal` as per the [Seek Style Guide color palette](https://seek-oss.github.io/seek-style-guide/palette)"
      },
      {
        "updated": [
          "Box",
          "atoms",
          "vars"
        ],
        "summary": "**Box, atoms, vars:** Update theme colour tokens with improved semantics.\n\nSimplifies the semantics of the colour-based tokens to support upcoming colour mode work. Changes to the property values on `backgroundColor` and `borderColor` has flow on affects to the apis on `Box` and `atoms`.\n\n\n**TOKEN CHANGES**\n\n**New**\n- **backgroundColor:** `surface`, `neutralSoft`\n- **borderColor:** `neutral`, `neutralInverted`, `neutralLight`\n\n**Removed**\n- **backgroundColor:** `card`, `formAccentDisabled`, `input`, `inputDisabled`, `selection`\n- **borderColor:** `formHover`, `standard`, `standardInverted`\n\n**MIGRATION GUIDE**\n\nMigration can largely be automated by running the Braid upgrade command. You must provide a glob to target your project’s source files. For example:\n\n```\nyarn braid-upgrade v31 \"**/*.{ts,tsx}\"\n```\n\n---\n\nIt may be necessary to manually migrate code in some cases, here are the affected use cases:\n\n**`Box` backgrounds**\n```diff\n- <Box background=\"card\" />\n+ <Box background=\"surface\" />\n\n- <Box background=\"formAccentDisabled\" />\n+ <Box background=\"neutralLight\" />\n\n- <Box background=\"input\" />\n+ <Box background=\"surface\" />\n\n- <Box background=\"inputDisabled\" />\n+ <Box background=\"neutralSoft\" />\n\n- <Box background=\"selection\" />\n+ <Box background=\"formAccentSoft\" />\n```\n\n**`Box` boxShadows**\n```diff\n- <Box boxShadow=\"borderStandard\" />\n+ <Box boxShadow=\"borderNeutralLight\" />\n\n- <Box boxShadow=\"borderStandardInverted\" />\n+ <Box boxShadow=\"borderNeutralInverted\" />\n\n- <Box boxShadow=\"borderStandardInvertedLarge\" />\n+ <Box boxShadow=\"borderNeutralInvertedLarge\" />\n\n- <Box boxShadow=\"borderFormHover\" />\n+ <Box boxShadow=\"borderFormAccent\" />\n```\n\n**`vars`**\n```diff\n- vars.borderColor.standard\n+ vars.borderColor.neutralLight\n\n- vars.borderColor.standardInverted\n+ vars.borderColor.neutralInverted\n\n- vars.borderColor.formHover\n+ vars.borderColor.formAccent\n```\n\n**`atoms`**\n```diff\n atoms({\n-  boxShadow: 'borderStandard',\n+  boxShadow: 'borderNeutralLight',\n });\n\n atoms({\n-  boxShadow: 'borderStandardInverted',\n+  boxShadow: 'borderNeutralInverted',\n });\n\n atoms({\n-  boxShadow: 'borderStandardInvertedLarge',\n+  boxShadow: 'borderNeutralInvertedLarge',\n });\n\n atoms({\n-  boxShadow: 'borderFormHover',\n+  boxShadow: 'borderFormAccent',\n });\n```"
      }
    ]
  },
  {
    "version": "31.1.0",
    "updates": [
      {
        "new": [
          "IconTip"
        ],
        "summary": "**IconTip:** Add tip icon"
      },
      {
        "new": [
          "IconZoomIn",
          "IconZoomOut"
        ],
        "summary": "**IconZoomIn, IconZoomOut:** Add zoom in/out icons"
      }
    ]
  },
  {
    "version": "31.2.0",
    "updates": [
      {
        "updated": [
          "OverflowMenu"
        ],
        "summary": "**OverflowMenu:** Use `neutral` tone button style"
      },
      {
        "updated": [
          "Alert",
          "Card",
          "Toast"
        ],
        "summary": "**Alert, Card, Toast:** Improve highlight keyline\n\nEnsures that components using a highlight keyline have the correct border radius and mask their overflow correctly."
      },
      {
        "updated": [
          "Alert",
          "Autosuggest",
          "Tag",
          "TextField"
        ],
        "summary": "**Alert, Autosuggest, Tag, TextField:** Use `neutral` tone button style for clear action"
      },
      {
        "updated": [
          "Box"
        ],
        "summary": "**Box:** Reset background color on `input` and `select` elements\n\nWhen specifying a `component` of `input` or `select` the background color was not being reset, falling through to the user agent styles. Reseting it to `transparent` to ensure predicatble styles across browsers and colour modes."
      },
      {
        "updated": [
          "vars"
        ],
        "summary": "**vars:** Add light variant foreground colors\n\n**New foregrounds**\nThe following foregrounds are now available on the `vars.foregroundColor` theme object:\n- `cautionLight`\n- `infoLight`\n- `linkLight`\n- `linkLightVisited`\n- `positiveLight`\n- `promoteLight`"
      },
      {
        "updated": [
          "Text"
        ],
        "summary": "**Text:** Improve contrast of `caution`, `positive`, `info`, `promote` and `link` tones\n\nWhen using any of the above tones in a dark container, a lighter colour will be used to improve the text contrast against the background."
      },
      {
        "updated": [
          "MenuItem",
          "MenuItemLink",
          "MenuItemCheckbox"
        ],
        "summary": "**MenuItem, MenuItemLink, MenuItemCheckbox:** Use `span` elements internally for more valid HTML."
      },
      {
        "updated": [
          "Loader"
        ],
        "summary": "**Loader:**  Use current text color"
      }
    ]
  },
  {
    "version": "31.2.1",
    "updates": []
  },
  {
    "version": "31.2.2",
    "updates": [
      {
        "updated": [
          "BraidProvider"
        ],
        "summary": "**BraidProvider:** Add `backgroundColor` to html node when `styleBody` is set (defaults to `true`)"
      }
    ]
  },
  {
    "version": "31.2.3",
    "updates": []
  },
  {
    "version": "31.3.0",
    "updates": [
      {
        "updated": [
          "vars"
        ],
        "summary": "**vars:** Expose `contentWidth` theme tokens"
      }
    ]
  },
  {
    "version": "31.3.1",
    "updates": [
      {
        "updated": [
          "MenuRenderer",
          "OverflowMenu"
        ],
        "summary": "**MenuRenderer, OverflowMenu:** Ensure layout of the trigger is controlled by the parent\n\nFixes an issue where the trigger container did not adhere to the parent layout, preventing consumers from providing triggers that take up the full width of their available space. This goes against one of Braid's key layout principles which says [spacing between elements is owned entirely by layout components](https://seek-oss.github.io/braid-design-system/foundations/layout)."
      }
    ]
  },
  {
    "version": "31.4.0",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Scroll list into view\n\nThe suggestions list will now be scrolled into view (on tablet and above) if it extends beyond the bottom of the window. This prevents suggestions (particularly those loaded asynchronously) from being obscured by the edge of the window."
      },
      {
        "updated": [
          "AccordionItem"
        ],
        "summary": "**AccordionItem:** Add badge support\n\nThe `AccordionItem` now has support for the `badge` prop.\n\n**EXAMPLE USAGE:**\n```jsx\n<AccordionItem\n  label=\"Label\"\n  badge={<Badge>New</Badge>}\n>\n  ...\n</AccordionItem>\n```"
      }
    ]
  },
  {
    "version": "31.5.0",
    "updates": [
      {
        "updated": [
          "Stack"
        ],
        "summary": "**Stack:** Add support for span elements\n\nStack now supports using `span` elements for it's markup, this is useful when using layout components inside elements that should not contain a `div` element, e.g. `button`.\n\n**EXAMPLE USAGE:**\n```jsx\n<Stack component=\"span\" space=\"medium\">\n  ...\n</Stack>\n```"
      },
      {
        "new": [
          "Stepper"
        ],
        "summary": "**Stepper:** Add component\n\nSee [documentation](https://seek-oss.github.io/braid-design-system/components/Stepper) for full feature set and usage details.\n\n**EXAMPLE USAGE:**\n```jsx\n<Stepper label=\"Linear steps\" progress={3}>\n  <Step>1. First step</Step>\n  <Step>2. Second step</Step>\n  <Step>3. Third step</Step>\n  <Step>4. Forth step</Step>\n</Stepper>\n```"
      }
    ]
  },
  {
    "version": "31.6.0",
    "updates": [
      {
        "new": [
          "Bleed"
        ],
        "summary": "**Bleed:** Add component\n\nIntroduce `Bleed` layout component that allows content to bleed out into the parent layout by a specified amount, useful when a content needs to negate the indent provided by a parent component.\n\nSee the [documentation](https://seek-oss.github.io/braid-design-system/components/Bleed) and [layout guide](https://seek-oss.github.io/braid-design-system/foundations/layout#bleed) for more information.\n\n**EXAMPLE USAGE:**\n```diff\n <Card>\n   <Stack space=\"gutter\">\n+    <Bleed horizontal=\"gutter\" top=\"gutter\">\n       <Placeholder height={200} label=\"Header Image\" />\n+    </Bleed>\n     <Heading level=\"3\">Heading</Heading>\n     <Text>Text content</Text>\n   </Stack>\n </Card>\n```"
      },
      {
        "updated": [
          "Box",
          "BoxRenderer",
          "atoms"
        ],
        "summary": "**Box, BoxRenderer, atoms:** Add support for `inset` shorthand\n\nIntroduces the `inset` shorthand as a convenience for applying `top`, `bottom`, `left` and `right` properties.\n\n**EXAMPLE USAGE:**\n```jsx\n<Box position=\"absolute\" inset={0} />\n```\nor\n```ts\natoms({\n  position: 'absolute',\n  inset: 0,\n})\n```"
      },
      {
        "updated": [
          "Pagination"
        ],
        "summary": "**Pagination:** Add `pageLimit` support\n\nAdd support for configuring the number of pages displayed using the `pageLimit` prop. The default is still set to 7, but consumers can now reduce this, useful when `Pagination` is used inside column layouts.\n\nIn addition, the layout has been stabilised, preventing the links moving when the next/prev actions are shown/hidden.\n\n**EXAMPLE USAGE:**\n```jsx\n<Pagination\n  ...\n  pageLimit={3}\n/>\n```"
      },
      {
        "updated": [
          "Columns"
        ],
        "summary": "**Columns:** Support using span elements via component prop\n\nSetting the `component` prop to `span` will now ensure all elements controlled by `Columns` are `span`s. This is useful when using layout components inside dom elements that should not contain `div`s from a HTML validation perspective.\n\n**EXAMPLE USAGE:**\n```jsx\n<Columns space=\"medium\" component=\"span\">\n  ...\n</Columns>\n```"
      },
      {
        "updated": [
          "Drawer"
        ],
        "summary": "**Drawer:** Support positioning on the left\n\nA `Drawer` can now enter from and be positioned on the left. The default remains unchanged and will enter from and be docked to the right.\n\n**EXAMPLE USAGE:**\n```jsx\n<Drawer\n  ...\n  position=\"left\"\n/>\n```"
      },
      {
        "updated": [
          "Inline"
        ],
        "summary": "**Inline:** Support using span elements via component prop\n\nSetting the `component` prop to `span` will now ensure all elements controlled by `Inline` are `span`s. This is useful when using layout components inside dom elements that should not contain `div`s from a HTML validation perspective.\n\n**EXAMPLE USAGE:**\n```jsx\n<Inline space=\"medium\" component=\"span\">\n  ...\n</Inline>\n```"
      }
    ]
  },
  {
    "version": "31.7.0",
    "updates": [
      {
        "updated": [
          "MenuRenderer",
          "OverflowMenu"
        ],
        "summary": "**MenuRenderer, OverflowMenu:** Add menu `width` and `placement` support\n\nProvides a set of `width`s to control how wide the menu is, where `content` is the default. The available widths are ratioed off the `contentWidth`s specified on the theme.\n\nAdditionally the `placement` of the menu can choose from either `top` or `bottom` where the latter remains the default.\n\n**EXAMPLE USAGE:**\n```jsx\n<MenuRenderer\n  // ...\n  width=\"small\"\n  placement=\"top\">\n  ...\n</MenuRenderer>\n```"
      },
      {
        "updated": [
          "Button"
        ],
        "summary": "**Button:** Support using as menu trigger\n\nAllow a `Button` to receive all of the required props for a menu trigger. As a result a `Button` now accepts `onKeyUp`, `onKeyDown` and `aria-haspopup`.\n\n**EXAMPLE USAGE:**\n```jsx\n<MenuRenderer\n  trigger={triggerProps => (\n    <Button {...triggerProps}>\n      Button\n    </Button>\n  )}\n>\n  ...\n</MenuRenderer>\n```"
      },
      {
        "updated": [
          "MenuItem",
          "MenuItemLink",
          "MenuRenderer",
          "OverflowMenu"
        ],
        "summary": "**MenuItem, MenuItemLink, MenuRenderer, OverflowMenu:** Add `icon` support\n\nProvides a designed slot for adding an icon to `MenuItem` and `MenuItemLink`. To compliment this we have introduced `reserveIconSpace` on both `MenuRenderer` and `OverflowMenu` so the labels in menu items without icons align with the labels of menu items with an icon.\n\n**EXAMPLE USAGE:**\n```jsx\n<MenuRenderer reserveIconSpace>\n  <MenuItem\n    // ...\n    icon={<IconBookmark />}\n  >\n    Menu Item\n  </MenuItem>\n</MenuRenderer>\n```"
      },
      {
        "updated": [
          "MenuItem",
          "MenuItemLink",
          "MenuItemChecklist"
        ],
        "summary": "**MenuItem, MenuItemLink, MenuItemChecklist:** Add `badge` support\n\nProvides a designed slot for adding a `Badge` to all the variants of a menu item.\n\n**EXAMPLE USAGE:**\n```jsx\n<MenuRenderer>\n  <MenuItem\n    // ...\n    badge={<Badge>Badge</Badge>}\n  >\n    Menu Item\n  </MenuItem>\n</MenuRenderer>\n```"
      },
      {
        "updated": [
          "Column"
        ],
        "summary": "**Column:** Enure inner element honours `component` prop"
      }
    ]
  },
  {
    "version": "31.8.0",
    "updates": [
      {
        "updated": [
          "useToast"
        ],
        "summary": "**useToast:** Add `closeLabel` prop\n\nTo support translations, the close button can now be customised using the `closeLabel` prop.\n\n**EXAMPLE USAGE:**\n```jsx\n<Button\n  onClick={() =>\n    showToast({\n      closeLabel: 'Close'\n      // ...\n    })\n  }\n/>\n```"
      },
      {
        "updated": [
          "IconThumb"
        ],
        "summary": "**IconThumb:** Update artwork"
      },
      {
        "updated": [
          "Autosuggest",
          "TextField"
        ],
        "summary": "**Autosuggest, TextField:** Add `clearLabel` prop\n\nTo support translations, the clear button in the field can now be customised using the `clearLabel` prop.\n\n**EXAMPLE USAGE:**\n```jsx\n<Autosuggest\n  clearLabel=\"Clear\"\n  // ...\n/>\n```"
      },
      {
        "updated": [
          "Loader"
        ],
        "summary": "**Loader:** Apply WAI-ARIA alert pattern\n\nTo improve the feedback of the `Loader` provided to screen readers, we now apply the [WAI-ARIA Alert Pattern](https://www.w3.org/TR/wai-aria-practices/#alert) using an [assertive](https://www.w3.org/TR/wai-aria/#aria-live) level of importance."
      },
      {
        "updated": [
          "MenuRenderer",
          "OverflowMenu"
        ],
        "summary": "**MenuRenderer, OverflowMenu:** Mouse leave no longer affects focus state\n\nPreviously, moving the mouse from hovering a menu item to outside of the menu would shift focus the to the menu trigger. This is not a requirement for accessibility and introduces undesired behaviour when the trigger is used in conjunction with [TooltipRenderer](https://seek-oss.github.io/braid-design-system/components/TooltipRenderer).\n\nNote: As per the [menu accessibility guidelines](https://www.w3.org/TR/wai-aria-practices-1.2/#menu), focus will still be returned to the trigger when clicking outside the menu, selecting a menu item or pressing the escape key."
      }
    ]
  },
  {
    "version": "31.9.0",
    "updates": [
      {
        "updated": [
          "Divider"
        ],
        "summary": "**Divider:** Use span element\n\nAs the `Divider` component is not used as a container element, we now use a `span`. This allows it to be used inside `button` elements, such as a `Tab`, without producing invalid html."
      },
      {
        "updated": [
          "Badge"
        ],
        "summary": "**Badge:** Use span element\n\nAs the `Badge` component is not used as a container element, we now use a `span`. This allows it to be used inside `button` elements, such as an `AccordionItem`, without producing invalid html."
      },
      {
        "updated": [
          "TooltipRenderer"
        ],
        "summary": "**TooltipRenderer:** Ignore pointer events on tip container\n\nFix for the container of the tooltip interferring with pointer events of the tooltip trigger itself."
      },
      {
        "updated": [
          "Tab"
        ],
        "summary": "**Tab:** Add icon support\n\nProvides a designed slot for adding an icon to a `Tab`\n\n**EXAMPLE USAGE:**\n```jsx\n<Tab icon={<IconPromote />}>{...}</Tab>\n```"
      },
      {
        "updated": [
          "AccordionItem"
        ],
        "summary": "**AccordionItem:** Add icon support\n\nProvides a designed slot for adding an icon to an `AccordionItem`\n\n**EXAMPLE USAGE:**\n```jsx\n<AccordionItem\n  icon={<IconPromote />}\n  {...}\n/>\n```"
      },
      {
        "updated": [
          "MenuRenderer",
          "OverflowMenu"
        ],
        "summary": "**MenuRenderer, OverflowMenu:** Guard against open/close handlers firing incorrectly\n\nAdd guard to ensure open and close handlers are not re-fired when handler instances are updated."
      },
      {
        "updated": [
          "Tag"
        ],
        "summary": "**Tag:** Add `id` support"
      },
      {
        "updated": [
          "Button",
          "ButtonLink"
        ],
        "summary": "**Button, ButtonLink:** Add icon support\n\nProvides a designed slot for adding an icon to a `Button` or `ButtonLink`\n\n**EXAMPLE USAGE:**\n```jsx\n<Button icon={<IconSend />}>{...}</Button>\n```"
      },
      {
        "updated": [
          "Tag"
        ],
        "summary": "**Tag:** Add icon support\n\nProvides a designed slot for adding an icon to a `Tag`\n\n**EXAMPLE USAGE:**\n```jsx\n<Tag\n  icon={<IconPromote />}\n  {...}\n/>\n```"
      },
      {
        "updated": [
          "OverflowMenu"
        ],
        "summary": "**OverflowMenu:** Add `id` support"
      },
      {
        "updated": [
          "Autosuggest",
          "PasswordField",
          "TextField",
          "useToast"
        ],
        "summary": "**Autosuggest, PasswordField, TextField, useToast:** Add `id` to internal close/clear buttons"
      },
      {
        "new": [
          "ButtonIcon"
        ],
        "summary": "**ButtonIcon:** Add component\n\nSee [documentation](https://seek-oss.github.io/braid-design-system/components/ButtonIcon) for full feature set.\n\n**EXAMPLE USAGE:**\n```jsx\n<ButtonIcon\n  icon={<IconShare/>}\n  label=\"Share\"\n  id=\"share\"\n  onClick={...}\n/>\n```"
      },
      {
        "updated": [
          "Autosuggest",
          "Dialog",
          "Drawer",
          "OverflowMenu",
          "Tag",
          "TextField",
          "useToast"
        ],
        "summary": "**Autosuggest, Dialog, Drawer, OverflowMenu, Tag, TextField, useToast:** Migrate to use ButtonIcon\n\nAdopt new `ButtonIcon` for clear/close actions in favour of custom internal buttons."
      }
    ]
  },
  {
    "version": "31.10.0",
    "updates": [
      {
        "updated": [
          "Bleed"
        ],
        "summary": "**Bleed:** Support using span elements via component prop\n\nSetting the `component` prop to `span` will now ensure all elements controlled by `Bleed` are `span`s. This is useful when using layout components inside dom elements that should not contain `div`s from a HTML validation perspective.\n\n**EXAMPLE USAGE:**\n```jsx\n<Bleed space=\"medium\" component=\"span\">\n  ...\n</Bleed>\n```"
      },
      {
        "updated": [
          "Dialog",
          "Drawer"
        ],
        "summary": "**Dialog, Drawer:** Prevent sticky close button container from blocking content\n\nFix regression introduced when migrating the close action to use `ButtonIcon`. The close action container was blocking the content of the `Dialog`/`Drawer`, and when scrolling could prevent a user from interacting with the content as it went behind the container.\n\nAdditionally, re-introduced the surface coloured background behind the button to prevent the button from visually colliding with content when scrolling."
      }
    ]
  },
  {
    "version": "31.11.0",
    "updates": [
      {
        "updated": [
          "Button",
          "ButtonLink"
        ],
        "summary": "**Button, ButtonLink:** Improve Button `bleed`\n\nPreviously the `bleedY` prop allowed the background of `Button` to bleed vertically into the surrounding layout. This worked well for all variants except `transparent`, which needed to bleed horizontally as well.\n\nTo support this we have introduced the `bleed` prop which will apply the bleed based on the `variant`. We have also deprecated `bleedY` which will be removed in a future release.\n\n\n**EXAMPLE USAGE:**\n```diff\n <Button\n-  bleedY\n+  bleed\n   {...}\n >\n   Button\n </Button>\n```\n\n**MIGRATION GUIDE**\n\nMigration from `bleedY` to `bleed` can be automated by running the Braid upgrade command, passing the `v31.11` version. You must provide a glob to target your project’s source files. For example:\n\n```\nyarn braid-upgrade v31.11 \"**/*.{ts,tsx}\"\n```\n\nIt is recommended to visually review the any `Button` usage with the `transparent` variant, to ensure the layout is as expected."
      }
    ]
  },
  {
    "version": "31.11.1",
    "updates": [
      {
        "updated": [
          "Button",
          "ButtonLink"
        ],
        "summary": "**Button, ButtonLink:** Ensure `bleedY` is backwards compatibile for `transparent` variant\n\nEnsure that `bleedY` applies bleed only vertically on `transparent` variant, isolating the new horizontal bleed to the new `bleed` prop exclusively."
      }
    ]
  },
  {
    "version": "31.12.0",
    "updates": [
      {
        "updated": [
          "RadioItem"
        ],
        "summary": "**RadioItem:** Add `disabled` support\n\nProvide support for disabling individual `RadioItem`s within a `RadioGroup`.\n\n**EXAMPLE USAGE:**\n```jsx\n<RadioGroup>\n  <RadioItem label=\"One\" value=\"1\" />\n  <RadioItem label=\"Two\" value=\"2\" />\n  <RadioItem label=\"Three\" value=\"3\" disabled={true} />\n</RadioGroup>\n```"
      },
      {
        "updated": [
          "Dropdown"
        ],
        "summary": "**Dropdown:** React 18 compatibility"
      }
    ]
  },
  {
    "version": "31.13.0",
    "updates": [
      {
        "updated": [
          "MenuRenderer",
          "OverflowMenu"
        ],
        "summary": "**MenuRenderer, OverflowMenu:** Provide context data to onClose\n\nThe `onClose` handler now receives data to allow consumers to discern why the menu closed — either by exiting or selecting an action. See the [documentation](https://seek-oss.github.io/braid-design-system/components/MenuRenderer#menu-interactions) for more details.\n\n**EXAMPLE USAGE:**\n```jsx\n<MenuRenderer\n  onClose={(closeReason) => {\n    // ...\n  }}\n/>\n```"
      }
    ]
  },
  {
    "version": "31.14.0",
    "updates": [
      {
        "updated": [
          "Rating"
        ],
        "summary": "**Rating:** Add `variant` prop and deprecate `showTextRating`\n\nProvide the `variant` prop to allow customising the appearance. This supports the new `minimal` appearance, which presents a single star alongside the text rating.\n\nAlso adding the `starsOnly` variant as a replacement for the now deprecated `showTextRating={false}`.\n\n**EXAMPLE USAGE:**\n```jsx\n<Rating rating={3.7} variant=\"minimal\" />\n```\n\n**MIGRATION GUIDE:**\n\nThe `showTextRating` prop is now deprecated. If you were using this previously, please migrate to the new `variant` prop using `starsOnly`.\n\n```diff\n<Rating\n  rating={3.7}\n- showTextRating={false}\n+ variant=\"starsOnly\"\n/>\n```"
      },
      {
        "updated": [
          "vars"
        ],
        "summary": "**`apac` and `seekBusiness` themes:** Update colour palette\n\nThe colours used in these themes have been updated to the latest design standards as they were subtly off due to coming from an incorrect source."
      },
      {
        "new": [
          "IconPlatformAndroid",
          "IconPlatformApple",
          "IconSocialYouTube"
        ],
        "summary": "**IconPlatformAndroid, IconPlatformApple, IconSocialYouTube:** Add new icons\n\nAdd icons for the Apple and Android mobile platforms as well as YouTube\n\n**EXAMPLE USAGE:**\n```jsx\n<IconPlatformAndroid />\n<IconPlatformApple />\n<IconSocialYouTube />\n```"
      }
    ]
  },
  {
    "version": "31.15.0",
    "updates": [
      {
        "new": [
          "IconArrow"
        ],
        "summary": "**IconArrow:** Add component\n\nAdd new `IconArrow` component. The orientation of the arrow can be controlled using the `direction` prop.\n\n**EXAMPLE USAGE:**\n```jsx\n<IconArrow direction=\"left\" />\n```"
      },
      {
        "updated": [
          "RadioGroup"
        ],
        "summary": "**RadioGroup:** Remove surrounding white space with no visual label\n\nRemoves additional white space applied above the `RadioItem`s when no visible `label` is provided, i.e. when labelling via `aria-label` or `aria-labelledby`."
      },
      {
        "updated": [
          "Stepper"
        ],
        "summary": "**Stepper:** Add align prop\n\nProvide the `align` prop which now includes support for `left` alignment.\n\n**EXAMPLE USAGE:**\n```jsx\n<Stepper align=\"left\">\n  ...\n</Stepper>\n```"
      },
      {
        "updated": [
          "Stepper"
        ],
        "summary": "**Stepper:** Fix clipping of step name in Safari\n\nFixes issue where the descenders in Step labels were being clipped only in Safari."
      }
    ]
  },
  {
    "version": "31.16.0",
    "updates": [
      {
        "updated": [
          "vars"
        ],
        "summary": "**vars:** Expose shadow palette\n\nProvide access to the themed `shadow` scale on the `vars` object\n\n**EXAMPLE USAGE:**\n```jsx\nimport { vars } from 'braid-design-system/css';\n\nexport const dropShadow = style({\n  boxShadow: vars.shadow.small,\n});\n```"
      }
    ]
  },
  {
    "version": "31.17.0",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Add configurable message for no suggestions\n\nProvides consumers a way to give the user more context when no suggestions are available. The `noSuggestionsMessage` prop accepts a simple message by providing a single piece of text. Alternatively, a more structured prompt can be shown by providing an object containing **title** and **description**.\n\nThis message is only displayed when there are no available suggestions provided.\n\n**EXAMPLE USAGE:**\nFor the simple case:\n\n```jsx\n<Autosuggest\n  ...\n  suggestions={[]}\n  noSuggestionsMessage=\"No results found\"\n/>\n```\n\nOr, for more a structured prompt:\n\n```jsx\n<Autosuggest\n  ...\n  suggestions={[]}\n  noSuggestionsMessage={{\n    title: \"No results found\",\n    description: \"Try searching for something else\",\n  }}\n/>\n```\n\n**MIGRATION GUIDE:**\n\nIn addition, the old mechanism allowing consumers to pass an object to `suggestions` containing a `message` has been deprecated. This will continue to work for now but will be removed in a future release.\n\nIt is recommended to migrate to the `noSuggestionsMessage` prop.\n\n```diff\n <Autosuggest\n   ...\n-  suggestions={{ message: 'No results found' }}\n+  noSuggestionsMessage=\"No results found\"\n />\n```"
      },
      {
        "updated": [
          "useToast"
        ],
        "summary": "**useToast:** Add neutral tone support\n\nAdd support for `neutral` tone. When using a `neutral` tone, an icon may optionally be provided. For consistency, the tone of the icon is set to **secondary** and cannot be customised.\n\n**EXAMPLE USAGE:**\n```jsx\nimport { useToast } from \"braid-design-system\"\n\nexport const DemoButton = () => {\n  const showToast = useToast();\n\n  return (\n    <Button\n      onClick={() =>\n        showToast({\n          tone: \"neutral\",\n          icon: <IconBookmark />,\n          message: \"Neutral with icon\",\n        })\n      }\n    >\n      Show Toast\n    </Button>\n  );\n}\n```"
      }
    ]
  },
  {
    "version": "31.17.1",
    "updates": []
  },
  {
    "version": "31.17.2",
    "updates": [
      {
        "updated": [
          "Heading"
        ],
        "summary": "**Heading**: Nested icons inherit text colour\n\nWhen using icons inside of a `Heading`, the default `tone` was always `neutral`, rather than inheriting the colour of the nearest component.\n\nFor example, when an icon was used inside of a `TextLink` within a `Heading`:\n```jsx\n<Heading level=\"1\">\n  Title with <TextLink>link <IconArrow /></TextLink>\n</Heading>\n// => Previously, IconArrow was the heading text colour\n// `neutral`, now inherits the `link` colour.\n```\n\nor equally, when an icon was used inside of a `Secondary` component within a `Heading`:\n```jsx\n<Heading level=\"1\">\n  Title with <Secondary>secondary <IconArrow /></Secondary>\n</Heading>\n// => Previously, IconArrow was the heading text colour\n// `neutral`, now inherits the `secondary` colour.\n```"
      }
    ]
  },
  {
    "version": "31.18.0",
    "updates": [
      {
        "updated": [
          "Box"
        ],
        "summary": "**Box:** Support custom `data` prop format for attributes\n\nWhile `Box` already supports the native HTML syntax for data attributes, e.g. `data-testid=\"123\"`, it now supports the **data** prop too. This allows data attributes to be provided consistently to all components.\n\n**EXAMPLE USAGE:**\n```diff\n <Box\n+  data={{ testId: 'myComponent' }}\n />\n```\nThe above example results in the following HTML attribute being set on the element:\n`data-testId=\"myComponent\"`."
      },
      {
        "updated": [
          "Pagination"
        ],
        "summary": "**Pagination:** Increase chevron spacing on prev/next links\n\nIncreases the space between the \"Previous\" and \"Next\" text and their chevron icons to balance with the larger icon size."
      },
      {
        "updated": [
          "MenuItemCheckbox"
        ],
        "summary": "**MenuItemCheckbox:** Align with increased icon size\n\nEnsure menu item text has uniform spacing to the checkbox of `MenuItemCheckbox` and the `icon` slot of `MenuItem`."
      },
      {
        "updated": [
          "Text",
          "Heading"
        ],
        "summary": "**Text, Heading:** Increase icon size inside typographic elements\n\nThe size of icons has been increased by 20% when used inside of `Text` and `Heading` components. There is no layout impact expected for consumers, with only the visual ratio of icon to text size changing.\n\nThis applies to icons using the new `icon` slots, as well as inline icons within the text content.\n\n> Icons used outside of typographic elements are not affected by this change."
      },
      {
        "updated": [
          "Text",
          "Heading"
        ],
        "summary": "**Text, Heading:** Add icon slots\n\nProvides a designed slot for adding an icon to `Text` and `Heading` components\n\n**EXAMPLE USAGE:**\n\n```jsx\n<Text icon={<IconPromote />}>{...}</Text>\n```\n\nor with a `Heading`:\n\n```jsx\n<Heading level=\"3\" icon={<IconPromote />}>{...}</Heading>\n```"
      },
      {
        "updated": [
          "useToast"
        ],
        "summary": "**useToast:** Add `data` attribute support\n\nSupport applying custom data attributes to Toast elements.\n\n**EXAMPLE USAGE:**\n```diff\n export const Component = () => {\n   const showToast = useToast();\n\n   return (\n     <Button onClick={() =>\n       showToast({\n+        data: { testId: 'myToastMessage' },\n         ...\n       })\n     }>\n       Show\n     </Button>\n   );\n }\n```\nThe above example results in the following HTML attribute being set on the toast element: \n`data-testId=\"myToastMessage\"`."
      },
      {
        "updated": [
          "ButtonIcon"
        ],
        "summary": "**ButtonIcon:** Increase standard icon size\n\nAdopt the increased standard icon size.\n\n> Note this does not affect overall dimensions of `ButtonIcon`, or the layout of surrounding components."
      },
      {
        "updated": [
          "AccordionItem",
          "Button",
          "FieldMessage",
          "Notice",
          "Tab",
          "Tag"
        ],
        "summary": "Removes custom icon sizing and layout in favour of new typography icon sizes and layout."
      }
    ]
  },
  {
    "version": "31.18.1",
    "updates": [
      {
        "updated": [
          "Button",
          "ButtonLink"
        ],
        "summary": "**Button, ButtonLink:** Improve alignment of transparent buttons with icons against Text with icons\n\nTo improve optical balance of a `Button` with an `icon`, the icon container is bled to the left to balance against the larger horizontal inset of a `standard` button.\nThis alignment correction is now only applied on `standard` sized buttons that are not using the `transparent` variant.\n\nIsolating this alignment correction enables transparent buttons to better align with other components with `icon` slots, for example:\n\n```jsx\n<Stack space=\"small\">\n  <Text icon={<IconSend />}>Text</Text>\n  <Button icon={<IconSend />} variant=\"transparent\" bleed>\n    Button\n  </Button>\n</Stack>\n```\n\nIcons and text will now be perfectly aligned between Button components and others icon slots with the same text size."
      }
    ]
  },
  {
    "version": "31.19.0",
    "updates": [
      {
        "updated": [
          "Rating"
        ],
        "summary": "**Rating:** Only fill star for scores .75 and above\n\nA star is only `filled` when the score is .75 and above. Fixes an issue where all scores .5 or above are shown as half filled stars.\n\n**EXAMPLE USAGE:**\nNow when a rating reaches .75 it will round up to a full star.\n\n```jsx\n<Rating rating={3.75} /> // 4 filled\n```"
      },
      {
        "updated": [
          "ButtonLink"
        ],
        "summary": "**ButtonLink:** Allow native data attributes with anchor api\n\nDisables the validation against the use of data attributes on `ButtonLink`. Given it exposes the full native anchor tag api, it is **not invalid** to use the native syntax."
      },
      {
        "updated": [
          "TextField"
        ],
        "summary": "**TextField:** Add `inputMode` and `step` support\n\nProvide support for the native `inputMode` and `step` attributes.\n\nThe `inputMode` will also be defaulted based on the specified `type`. For example: `<TextField type=\"number\" />` will default the `inputMode` to `numeric`.\n\n**EXAMPLE USAGE:**\n```jsx\n<TextField inputMode=\"numeric\" step=\".01\" />\n```"
      },
      {
        "updated": [
          "Box",
          "atoms"
        ],
        "summary": "**Box, atoms:** Remove native buttons on number input field\n\nExtends the CSS reset behaviour of HTML input fields where `type=\"number\"` to remove the native increment and decrement buttons.\n\n**EXAMPLE USAGE:**\nThe following will now render a HTML input of type `number` without native buttons:\n\n```jsx\n<Box component=\"input\" type=\"number\" />\n```\n\nAdditionally, if using the `atoms` function to build styles, when resetting an `input` field, the native buttons will also be removed.\n\n```ts\nconst customClasses = atoms({\n  reset: 'input',\n  ...\n});\n```"
      }
    ]
  },
  {
    "version": "31.20.0",
    "updates": [
      {
        "updated": [
          "Accordion",
          "AccordionItem",
          "Actions",
          "Alert",
          "Autosuggest",
          "Badge",
          "Box",
          "Button",
          "ButtonIcon",
          "ButtonLink",
          "Card",
          "Checkbox",
          "Columns",
          "ContentBlock",
          "Dialog",
          "Disclosure",
          "Drawer",
          "Dropdown",
          "FieldLabel",
          "FieldMessage",
          "Heading",
          "Hidden",
          "HiddenVisually",
          "IconAdd",
          "IconArrow",
          "IconBookmark",
          "IconCaution",
          "IconChevron",
          "IconClear",
          "IconCompany",
          "IconCompose",
          "IconCopy",
          "IconCreditCard",
          "IconCritical",
          "IconDate",
          "IconDelete",
          "IconDesktop",
          "IconDocument",
          "IconDocumentBroken",
          "IconDownload",
          "IconEdit",
          "IconEducation",
          "IconFilter",
          "IconFlag",
          "IconGrid",
          "IconHeart",
          "IconHelp",
          "IconHistory",
          "IconHome",
          "IconImage",
          "IconInfo",
          "IconInvoice",
          "IconLanguage",
          "IconLink",
          "IconLinkBroken",
          "IconList",
          "IconLocation",
          "IconMail",
          "IconMinus",
          "IconMobile",
          "IconMoney",
          "IconNewWindow",
          "IconNote",
          "IconNotification",
          "IconOverflow",
          "IconPeople",
          "IconPersonAdd",
          "IconPersonVerified",
          "IconPhone",
          "IconPlatformAndroid",
          "IconPlatformApple",
          "IconPositive",
          "IconPrint",
          "IconProfile",
          "IconPromote",
          "IconRecommended",
          "IconRefresh",
          "IconResume",
          "IconSearch",
          "IconSecurity",
          "IconSend",
          "IconSent",
          "IconSettings",
          "IconShare",
          "IconSocialFacebook",
          "IconSocialGitHub",
          "IconSocialInstagram",
          "IconSocialLinkedIn",
          "IconSocialMedium",
          "IconSocialTwitter",
          "IconSocialYouTube",
          "IconStar",
          "IconStatistics",
          "IconSubCategory",
          "IconTag",
          "IconThumb",
          "IconTick",
          "IconTime",
          "IconTip",
          "IconUpload",
          "IconVideo",
          "IconVisibility",
          "IconWorkExperience",
          "IconZoomIn",
          "IconZoomOut",
          "Inline",
          "List",
          "Loader",
          "MenuRenderer",
          "MenuItem",
          "MenuItemCheckbox",
          "MenuItemLink",
          "OverflowMenu",
          "MonthPicker",
          "Notice",
          "Pagination",
          "PasswordField",
          "Radio",
          "RadioGroup",
          "RadioItem",
          "Rating",
          "Secondary",
          "Stack",
          "Stepper",
          "Strong",
          "Tab",
          "Tabs",
          "TabPanel",
          "Tag",
          "Text",
          "Textarea",
          "TextDropdown",
          "TextField",
          "TextLink",
          "TextLinkButton",
          "Tiles",
          "Toggle"
        ],
        "summary": "Support data attribute boolean values\n\nThe `data` attribute map now supports boolean values. This provides an improvement for the developer experience, no longer having to convert values to strings explicitly.\n\n**EXAMPLE USAGE:**\n```tsx\n<Component\n  data={{\n    'custom-attribute': true,\n  }}\n/>\n// => <div data-custom-attribute=\"true\" />\n```"
      },
      {
        "updated": [
          "TextLink"
        ],
        "summary": "**TextLink:** Allow native data attributes with anchor api\n\nDisables the validation against the use of data attributes on `TextLink`. Given it exposes the full native anchor tag api, it is `not invalid` to use the native syntax."
      },
      {
        "updated": [
          "Link"
        ],
        "summary": "**Link:** Support custom `data` prop format for attributes\n\nWhile `Link` already supports the native HTML syntax for data attributes, e.g. `data-testid=\"123\"`, it now supports the `data` prop too. This allows data attributes to be provided consistently to all components.\n\n**EXAMPLE USAGE:**\n```diff\n <Link\n+  data={{ testId: 'myComponent' }}\n />\n\n```\nThe above example results in the following HTML attribute being set on the element: `data-testId=\"myComponent\"`."
      },
      {
        "updated": [
          "Bleed"
        ],
        "summary": "**Bleed:** Add `data` attribute support\n\n**EXAMPLE USAGE:**\n```jsx\n<Bleed data={{ testid: 123 }}>\n  ...\n</Bleed>\n```"
      }
    ]
  },
  {
    "version": "31.21.0",
    "updates": [
      {
        "updated": [
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**TextLink, TextLinkButton:** Add `icon` support\n\nProvides a designed slot for adding an `icon` to a `TextLink` or `TextLinkButton`.\nThis solves for the problem of underlining the space between the icon and text.\n\n**EXAMPLE USAGE:**\n```jsx\n<Text>\n  <TextLink icon={<IconLink />}>...</TextLink>\n</Text>\n```"
      },
      {
        "new": [
          "IconRenderer"
        ],
        "summary": "**IconRenderer:** Support the sizing and alignment of custom icons\n\nProvides support for sizing and aligning custom icons with Braid’s typographic components. The new `IconRenderer` component supports being used within `Text` and `Heading` components as well as inside `icon` slots of other components.\n\nUses the render prop pattern to provide the required classes to style and align a custom icon.\n\n**EXAMPLE USAGE:**\n```jsx\n<Heading level=\"1\">\n  <IconRenderer>\n    {({ className }) => (\n      <svg className={className}>\n        ...\n      </svg>\n    )}\n  </IconRenderer>\n</Heading>\n```"
      }
    ]
  },
  {
    "version": "31.21.1",
    "updates": [
      {
        "updated": [
          "TextDropdown"
        ],
        "summary": "**TextDropdown:** Fix a type error affecting consumers on TypeScript versions >=4.9.0"
      }
    ]
  },
  {
    "version": "31.22.0",
    "updates": []
  },
  {
    "version": "31.22.1",
    "updates": []
  },
  {
    "version": "31.22.2",
    "updates": [
      {
        "updated": [
          "Tab",
          "Tabs"
        ],
        "summary": "**Tab, Tabs:** Updated visual design\n\nThe appearance of a `Tab` has been updated. Changes include:\n- Tab button use `regular` text weight\n- Hover state of inactive tab toggles `neutral` tone instead of underline\n- Active tab indicator underlines content only, without the horizontal gutter and animates between tabs\n- The `minimal` divider under `Tabs` underlines content only, without the horizontal gutter"
      }
    ]
  },
  {
    "version": "31.23.0",
    "updates": []
  },
  {
    "version": "31.24.0",
    "updates": [
      {
        "updated": [
          "Accordion",
          "AccordionItem"
        ],
        "summary": "**Accordion, AccordionItem:** Add `weight` support\n\nAdd support for customising the `weight` of `AccordionItem`s.\nThis can be either at an `Accordion` level or on a standalone `AccordionItem` based on design requirements.\n\nNote, in order to maintain visual consistency, the `weight` prop can only be specified on an `AccordionItem` when outside of an `Accordion`.\n\n**EXAMPLE USAGE:**\n```jsx\n<Accordion weight=\"strong\">\n  <AccordionItem />\n  ...\n</Accordion>\n```\n\nor\n\n```jsx\n<AccordionItem weight=\"strong\" />\n```"
      },
      {
        "updated": [
          "CheckboxStandalone"
        ],
        "summary": "**CheckboxStandalone:** Enable alignment with Text\n\nEnables `CheckboxStandalone` to be wrapped in a `Text` component, ensuring it only occupies the same layout as text.\nThis is useful for visually aligning checkboxes in a custom layout alongside other text-based components, e.g. `AccordionItem`.\n\n**EXAMPLE USAGE:**\n```jsx\n<Columns>\n  <Column>\n    <Text>\n      <CheckboxStandalone />\n    </Text>\n  </Column>\n  <Column>\n    <AccordionItem />\n  </Column>\n</Columns>\n```"
      }
    ]
  },
  {
    "version": "31.24.1",
    "updates": []
  },
  {
    "version": "31.24.2",
    "updates": []
  },
  {
    "version": "32.0.0",
    "updates": [
      {
        "updated": [
          "themes"
        ],
        "summary": "Remove legacy themes: `catho`, `occ` and `seekAnz`\n\nThe `seekAnz` theme facilitated consumers migrating like-for-like from `seek-style-guide`, while the `catho` and `occ` themes intended to enable a specific use case that never eventuated.\n\nRemoving these themes allows us to move faster with upcoming theme uplift work.\n\n**MIGRATION GUIDE:**\n\nAny remaining consumers of the `catho`, `occ` or `seekAnz` themes should migrate to the `apac` theme like so:\n\n```diff\n-import seekAnz from 'braid-design-system/themes/seekAnz';\n+import apac from 'braid-design-system/themes/apac';\n```"
      }
    ]
  },
  {
    "version": "32.1.0",
    "updates": [
      {
        "updated": [
          "Disclosure"
        ],
        "summary": "**Disclosure:** Add `weight` support\n\nProvides support for reducing the visual weight of the Disclosure's call to action. Follows the same contextual styling rules as `TextLink`.\n\n**EXAMPLE USAGE:**\n```jsx\n<Disclosure weight=\"weak\">\n  ...\n</Disclosure>\n```"
      },
      {
        "updated": [
          "Autosuggest",
          "Dropdown",
          "FieldLabel",
          "MonthPicker",
          "PasswordField",
          "RadioGroup",
          "TextField",
          "Textarea"
        ],
        "summary": "Show `description` on form fields when no `label` provided\n\nPreviously, a `FieldLabel` without a `label` would return nothing. However, now that form fields can opt for [indirect or hidden labels] (via `aria-label` or `aria-labelledby`), the `description` should still be shown if provided.\n\n> Note: The `secondaryLabel` and `tertiaryLabel` remain conditional based on the presence of a `label`. This is due to their location in the layout being anchored off the `label`.\n\n**EXAMPLE USAGE:**\n```jsx\n<FieldLabel\n  description=\"Description now visible without label\"\n/>\n```\n\n[indirect or hidden labels]: https://seek-oss.github.io/braid-design-system/components/TextField#indirect-or-hidden-field-labels"
      },
      {
        "updated": [
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**TextLink, TextLinkButton:** Increase text weight of weak links\n\nIncreases the text weight of `weak` links to `medium`, increasing the affordance against standard text.\nAs a result, this makes the weight of all text links consistent."
      },
      {
        "updated": [
          "Disclosure"
        ],
        "summary": "**Disclosure:** Add inline content support\n\nProvides support for using a Disclosure within a sentence by allowing it to be nested within a typographic component, i.e. `Text`.\n\nAll size and weight properties will inherit from the parent component.\n\n**EXAMPLE USAGE:**\n```jsx\n<Text>\n  Preceding text content that is followed by a Disclosure.\n  <Disclosure expandLabel=\"Read more\">\n    ...\n  </Disclosure>\n</Text>\n```"
      },
      {
        "updated": [
          "Disclosure"
        ],
        "summary": "**Disclosure:** Ensure chevron does not wrap alone\n\nFixes the scenario where based on copy length and container size, the chevron could wrap independently of the rest of the label. By using a zero-width, non-breaking space, the chevron will now wrap together with the last word of the label."
      },
      {
        "updated": [
          "Button",
          "ButtonLink",
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**Button, ButtonLink, TextLink, TextLinkButton:** Add support for trailing icons\n\nProvide support for choosing the position of the `icon` slot within a `Button` or `TextLink`.\n\nBy default, the `iconPosition` will be `leading` the label, but optionally, can be set to `trailing`.\n\n**EXAMPLE USAGE:**\n```jsx\n<Button\n  icon={<IconArrow direction=\"right\" />}\n  iconPosition=\"trailing\"\n>\n  Next\n</Button>\n```"
      }
    ]
  },
  {
    "version": "32.1.1",
    "updates": []
  },
  {
    "version": "32.2.0",
    "updates": [
      {
        "updated": [
          "Box",
          "BoxRenderer",
          "atoms",
          "vars"
        ],
        "summary": "**Box, atoms, vars:** Add `small` to border radius scale\n\nExtends the border radius scale to include `small` as a step below `standard`.\nThis addition is to support an upcoming design uplift that requires greater fidelity in the scale.\nNote, the new value is also available as a responsive property.\n\n**EXAMPLE USAGE:**\n```jsx\n<Box borderRadius=\"small\" />\n\n{/* Or responsively: */}\n<Box borderRadius={{ mobile: 'small', tablet: 'standard' }} />\n```\n\n```ts\nimport { atoms } from 'braid-design-system/css';\n\natoms({ borderRadius: 'small' })\n```\n\n```ts\nimport { vars } from 'braid-design-system/css';\n\nconst radius = vars.borderRadius.small;\n```"
      },
      {
        "updated": [
          "theme"
        ],
        "summary": "**theme:** Add support for webfonts beyond Google Fonts\n\nPreviously the `webFont` on the theme was the `familyName` and was being used to construct a link tag to a Google Fonts stylesheet and provide to consumers via a runtime token.\nTo enable fonts beyond Google Fonts, we are changing `webFont` to be a URL.\n\nThis does not impact existing themes (as there are no themes currently with a web font), and the contract of the runtime token (a constructed link tag) remains unchanged."
      },
      {
        "updated": [
          "MenuRenderer"
        ],
        "summary": "**MenuRenderer:** Hide overflow on menu\n\nFixes a bug where the selection/highlight for a `MenuItem` could extend outside of the menu itself."
      },
      {
        "updated": [
          "theme"
        ],
        "summary": "**theme:** Add support for defining line heights with lineGap\n\nProvide support for themes to define their typographic line heights via `lineGap`.\nThis allows us to reason about the white space between wrapping lines of text in the same way we think about `Stack` spacing.\n\nFor a visual preview of this mental model head over to the [Capsize website].\n\n[Capsize website]: https://seek-oss.github.io/capsize/"
      },
      {
        "updated": [
          "Badge"
        ],
        "summary": "**Badge:** Adjust height to support different typographic scales\n\nAdjusts the height of `Badge` to be driven by the capHeight of `xsmall` text plus vertical padding, rather than `xsmall` line height.\nThis enables different typographic scales across themes, while ensuring the `Badge` height is relative."
      },
      {
        "updated": [
          "atoms",
          "Bleed",
          "Box",
          "BoxRenderer",
          "Columns",
          "Disclosure",
          "Inline",
          "List",
          "MenuRenderer",
          "Stack",
          "Tabs",
          "Tiles",
          "useSpace",
          "vars"
        ],
        "summary": "Add `xxxlarge` to the space scale\n\nExtends the range of the space scale to include `xxxlarge`.\nThis addition is to support an upcoming design uplift that requires greater fidelity in the scale.\nNote, the new value is also available as a responsive property.\n\n**EXAMPLE USAGE:**\n```jsx\n<Stack space=\"xxxlarge\">...</Stack>\n\n{/* Or responsively: */}\n<Stack space={{ mobile: 'large', tablet: 'xxxlarge' }}>...</Stack>\n```\n\n```ts\nimport { atoms } from 'braid-design-system/css';\n\natoms({ paddingY: 'xxxlarge' })\n```\n\n```ts\nimport { vars } from 'braid-design-system/css';\n\nconst space = vars.space.xxxlarge;\n```"
      },
      {
        "updated": [
          "Radio",
          "RadioItem",
          "Toggle"
        ],
        "summary": "**RadioItem, Toggle:** Use formAccent border when selected\n\nSwitch to using the `formAccent` border colour, rather than the `field` border color, when in the selected state (e.g. `checked` for `RadioItem`, `on` for `Toggle`)."
      },
      {
        "updated": [
          "TooltipRenderer"
        ],
        "summary": "**TooltipRenderer:** Refine padding to complement radius scale\n\nRemoves the custom padding on tooltips in favour of using the space scale.\nPreviously, a custom value was used to complement the over sized radius which has now be reduced."
      },
      {
        "updated": [
          "Button",
          "ButtonLink"
        ],
        "summary": "**Button, ButtonLink:** Improve support for different typographic scales\n\nEnsure the height of a `small` sized `Button` is not reliant on the text line height.\n\nThis enables different typographic scales across themes, while ensuring the `Button` height is relative."
      },
      {
        "updated": [
          "Alert",
          "Card",
          "useToast"
        ],
        "summary": "**Alert, Card, useToast:** Decouple keyline width from space scale\n\nPreviously the keyline width on the left determined its width using the space scale.\nRe-aligning this to use the grid unit to enable themes with larger space scales."
      },
      {
        "updated": [
          "Autosuggest",
          "Badge",
          "Button",
          "Card",
          "Pagination",
          "Textarea",
          "TooltipRenderer",
          "useToast"
        ],
        "summary": "Improve consistency of border radius usage across components\n\nOver time, individual components have reached for a larger radius in the scale, rather than increasing the scale at a theme level. This resulted in inconsistent use across the system, preventing uplift of the scale.\n\nRe-aligning all components to use the scale consistently enables themes to apply very different radius scales — enabling an upcoming design uplift theme."
      },
      {
        "updated": [
          "Dialog",
          "Drawer"
        ],
        "summary": "**Dialog, Drawer:** Reduce space between title and description\n\nReducing the space between `title` and `description` to `small` to improve association of the header block content"
      }
    ]
  },
  {
    "version": "32.3.0",
    "updates": [
      {
        "updated": [
          "Box",
          "atoms"
        ],
        "summary": "**Box, atoms:** Add `borderBrandAccent` variants to available boxShadows\n\nAdd `borderBrandAccent` and `borderBrandAccentLight` to the available boxShadows, combining the `brandAccent` and `brandAccentLight` border colours with the `standard` border width token.\nPreviously, `brandAccent` was only available with the `large` border width.\n\n**EXAMPLE USAGE:**\n```jsx\n<Box boxShadow=\"borderBrandAccent\" />\n{/* or */}\n<Box boxShadow=\"borderBrandAccentLight\" />\n```\n\n\n```ts\nimport { atoms } from 'braid-design-system/css';\n\natoms({ boxShadow: 'borderBrandAccent' });\natoms({ boxShadow: 'borderBrandAccentLight' });\n```"
      },
      {
        "updated": [
          "Button",
          "ButtonLink"
        ],
        "summary": "**Button, ButtonLink:** Align `ghost` border width with field border width\n\nAlign the border width of `ghost` variants with the border width of fields.\nThis is the final re-alignment piece to ensure all components use theme scales consistently, improving the ability of Braid themes to deliver cohesive design uplift."
      },
      {
        "updated": [
          "Stepper"
        ],
        "summary": "**Stepper:** Reduce size of `Step` indicators\n\nRefine the design of `Step` indicators by reducing their size."
      },
      {
        "updated": [
          "useToast"
        ],
        "summary": "**useToast:** Design uplift with increased page contrast\n\nAs a means to increase constrast against page content, the design has been updated to be presented on inverted backgrounds based on the color mode.\nThe design has also be refined to remove the sidebar/keyline (consistent with `Alert`), while also applying the `tone` to the provided `message`."
      },
      {
        "updated": [
          "Textarea"
        ],
        "summary": "**Textarea:** Add support for disabling built-in spell checker\n\nProvide support for disabling the built-in browser spell checker using the native HTML attribute `spellCheck`.\n\nWhen highlighting ranges you may choose to turn spell check off to prevent colliding highlights. This can be done be setting `spellCheck` to `false`.\n\n**EXAMPLE USAGE:**\n```jsx\n<Textarea spellCheck={false} />\n```"
      },
      {
        "updated": [
          "Autosuggest",
          "Dropdown",
          "FieldMessage",
          "MonthPicker",
          "PasswordField",
          "Textarea",
          "TextField"
        ],
        "summary": "Add support for `caution` tone to form fields\n\nProvide support for applying a `caution` tone to form fields.\nSpecifying this `tone` will show the `IconCaution` alongside the provided `message`.\n\n**EXAMPLE USAGE:**\n```jsx\n<TextField tone=\"caution\" message=\"Caution message\" />\n```"
      },
      {
        "updated": [
          "Textarea"
        ],
        "summary": "**Textarea:** Add support for `caution` highlightRanges\n\nProviding a `tone` of `caution` along with a set of `highlightRanges` will now apply the `caution` tone to the text being highlighted.\nTo complement this feature, the design has been uplifted to work consistently across both the `critical` and `caution` tones.\n\n**EXAMPLE USAGE:**\n```jsx\n<Textarea\n  tone=\"caution\"\n  message=\"Caution message\"\n  highlightRanges={...}\n/>\n```"
      },
      {
        "updated": [
          "TooltipRenderer"
        ],
        "summary": "**TooltipRenderer:** Remove custom background\n\nUse the correct semantic token for the background of tooltips.\nWhile there is no visual change, this is just a clean up to ensure the palette usage remains consistent."
      },
      {
        "updated": [
          "Alert"
        ],
        "summary": "**Alert:** Design uplift\n\nRefine the design to use consistent horizontal container inset, aligning content with elements like `Card`, as well as simplifying the design by removing the sidebar/keyline (consistent with `useToast`)."
      }
    ]
  },
  {
    "version": "32.3.1",
    "updates": [
      {
        "updated": [
          "Checkbox",
          "RadioItem",
          "Radio"
        ],
        "summary": "**RadioItem, Checkbox:** Fix stacking context behaviour\n\nA `RadioItem` and `Checkbox` previously created a new stacking context with an elevated `z-index` applied on hover, resulting in their labels overlaying other elements in an unpredictable ways — most noticable when [toggling nested content].\n\nFor example, toggling nested content containing an `Autosuggest`, would see the list of suggestions list would be overlayed by the next `RadioItem` on hover.\n\nTo fix this, the `z-index` is no longer elevated on hover, and additionally the nested content container applies an elevated index when the field is **checked**.\n\n[toggling nested content]: https://seek-oss.github.io/braid-design-system/components/RadioGroup#toggling-nested-content"
      },
      {
        "updated": [
          "Textarea"
        ],
        "summary": "**Textarea:** Adjust `highlightRange` background to support different line heights\n\nRemove the vertical padding on the highlight element to prevent the background colour overlapping the wavy underline in themes with tighter line heights."
      },
      {
        "updated": [
          "MenuItemCheckbox"
        ],
        "summary": "**MenuItemCheckbox:** Align checkbox size with a `small` Checkbox\n\nAlign the size of a `MenuItemCheckbox` with a `small` sized `Checkbox`."
      },
      {
        "updated": [
          "Checkbox",
          "RadioItem",
          "Radio"
        ],
        "summary": "**Checkbox, RadioItem:** Fix alignment with updated Badge layout\n\nImprove layout to work with updated Badge layout which is no longer driven by line height."
      },
      {
        "updated": [
          "MonthPicker"
        ],
        "summary": "**MonthPicker:** Reduce space between fields\n\nReduce the space between the month and year fields."
      }
    ]
  },
  {
    "version": "32.4.0",
    "updates": [
      {
        "updated": [
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**TextLink, TextLinkButton:** Update underline design\n\nUplift the design of the the text underline used on `TextLink` and `TextLinkButton` components."
      },
      {
        "updated": [
          "Text",
          "Heading"
        ],
        "summary": "**Text, Heading:** Add `maxLines` support\n\nProvide support for limiting the number of lines shown by a `Text` or `Heading` component.\n\n**EXAMPLE USAGE:**\n```jsx\n<Text maxLines={3}>\n  ...\n</Text>\n```\n\n**MIGRATION:**\n\nWith the addition of this feature, the `truncate` prop is now deprecated and will be removed in a future release.\nExisting consumers should start migrating as below:\n\n```diff\n <Text\n-   truncate\n+   maxLines={1}\n />\n```"
      },
      {
        "updated": [
          "Card"
        ],
        "summary": "**Card:** Add full height support\n\nProvide support for making a `Card` use all available vertical space.\nThis is useful when laying out rows of `Card` elements and having them all be equal height.\n\n**EXAMPLE USAGE:**\n```jsx\n<Card height=\"full\">\n  ...\n</Card>\n```"
      },
      {
        "updated": [
          "Columns",
          "Column"
        ],
        "summary": "**Column:** Support full height content\n\nProvide support for full height content by growing all `Column` elements to be uniform in height.\n\nThis will have no effect on the content itself, but enables consumers to create designs of uniform content, such as rows of `Card` elements."
      }
    ]
  },
  {
    "version": "32.4.1",
    "updates": [
      {
        "updated": [
          "Text",
          "Heading"
        ],
        "summary": "**Text, Heading:** Only show truncate deprecation message when true\n\nOnly show the truncate deprecation message when `truncate` is provided and set to `true`"
      },
      {
        "updated": [
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**TextLink, TextLinkButton:** Improve underline position for wrapping text\n\nRefine the underline position to be consistent across the whole typographic hierarchy, ensuring it does not interfere with wrapping lines of text."
      }
    ]
  },
  {
    "version": "32.5.0",
    "updates": [
      {
        "updated": [
          "Autosuggest",
          "Checkbox",
          "CheckboxStandalone",
          "Dropdown",
          "MonthPicker",
          "PasswordField",
          "Radio",
          "RadioItem",
          "Textarea",
          "TextField",
          "Toggle"
        ],
        "summary": "Hide field borders in dark containers\n\nReduce visual noise when a form field is displayed in a dark container by hiding the default border.\nAs fields are light on light backgrounds, the border is used to delineate its bounds against the container, which is not relevant in a dark container."
      },
      {
        "new": [
          "themes"
        ],
        "summary": "Add `seekJobs` theme\n\nThe `seekJobs` theme encapsulates the system changes necessary to apply and deliver the updated visual design language for SEEK Jobs.\nThrough the development of this theme, we have been able improve the fidelity of the various scales in our tokens, while also ensuring that the tokens themselves are consumed and applied more consistently throughout the system itself.\n\n**EXAMPLE USAGE:**\n```tsx\nimport seekJobs from 'braid-design-system/themes/seekJobs';\n\n<BraidProvider theme={seekJobs}>\n  ...\n</BraidProvider>\n```\n\n**MIGRATION**\n\nConsumers of the `apac` theme are not recommended to migrate independently. The `seekJobs` theme represents an uplifted visual identity that is part of a wider visual uplift.\nInstead, we’ll be guiding the initial teams through a staged migration in coordination with the centralised team process.\nThere are some differences in how certain concepts are applied, whether it's the space scale, or `Card` usage, etc., and we will be documenting these in due course.\n\nIf you would like to talk about migrating, please reach out to us in our **#braid-support** channel on slack."
      }
    ]
  },
  {
    "version": "32.6.0",
    "updates": [
      {
        "new": [
          "PageBlock"
        ],
        "summary": "**PageBlock:** Add new component\n\nProvides a top-level page container, constraining the content width (using `ContentBlock`) while establishing common screen gutters on smaller devices.\n\n**EXAMPLE USAGE:**\n```jsx\n<PageBlock width=\"large\">\n  ...\n</PageBlock>\n```"
      },
      {
        "updated": [
          "Button",
          "TextLinkButton"
        ],
        "summary": "**Button, TextLinkButton:** Add `aria-label` support\n\nProvide support for `aria-label`, enabling additional context to be given to assistive technologies where context is typically visual.\n\n**EXAMPLE USAGE:**\n```jsx\n<Button aria-label=\"Save job\">Save</Button>\n```"
      },
      {
        "new": [
          "IconMessage"
        ],
        "summary": "**IconMessage:** Add new component\n\nAdd new `IconMessage` component.\n\n**EXAMPLE USAGE:**\n```jsx\n<IconMessage />\n```"
      }
    ]
  },
  {
    "version": "32.7.0",
    "updates": [
      {
        "updated": [
          "TooltipRenderer"
        ],
        "summary": "**TooltipRenderer:** Fix arrow overlapping tooltip corner radius\n\nFix for an edge case where the arrow on a small tooltip could the overlap the corner radius of the tooltip."
      },
      {
        "updated": [
          "Drawer"
        ],
        "summary": "**Drawer:** Darken backdrop in dark mode\n\nIncrease the weight of the backdrop in dark mode to ensure the content is suffiently obscured."
      },
      {
        "updated": [
          "Drawer"
        ],
        "summary": "**Drawer:** Fix entrance animation from `left` position\n\nApply the entrance animation correctly for a `Drawer` using the `left` position.\nAlso reduced the horizontal overshoot for the transition for a smoother feel."
      },
      {
        "updated": [
          "Drawer",
          "Dialog"
        ],
        "summary": "**Drawer, Dialog:** Support validation blocking closure of modal\n\nTo prevent a `Dialog` or `Drawer` from closing, e.g. due to validation, the `onClose` function can now return **false**.\n\n**EXAMPLE USAGE:**\n```jsx\n<Drawer\n  open={open}\n  onClose={() => {\n    const valid = runValidation();\n    if (!valid) {\n      return false;\n    }\n\n    setOpen(false);\n  }}\n/>\n```"
      },
      {
        "updated": [
          "Drawer"
        ],
        "summary": "**Drawer:** Increase space between `title` and `description` on tablet"
      },
      {
        "updated": [
          "Drawer"
        ],
        "summary": "**Drawer:** Align horizontal gutters with PageBlock\n\nGiven a `Drawer` is full width on a mobile device, applying the same horizontal gutter rules as `PageBlock` makes sense.\nThis ensures content on a mobile will have the same available space whether its in the page, or inside a `Drawer`."
      }
    ]
  },
  {
    "version": "32.8.0",
    "updates": [
      {
        "new": [
          "IconEnlarge"
        ],
        "summary": "**IconEnlarge:** Add new component\n\n**EXAMPLE USAGE:**\n\n```jsx\n<IconEnlarge />\n```\n\nThe `active` prop can be used to toggle the icon into the \"reduce\" state:\n\n```jsx\n<IconEnlarge active={true} />\n```"
      }
    ]
  },
  {
    "version": "32.8.1",
    "updates": []
  },
  {
    "version": "32.8.2",
    "updates": [
      {
        "updated": [
          "Drawer",
          "Dialog"
        ],
        "summary": "**Drawer, Dialog:** Increase gutter around close button\n\nFix for a regression where the gutter around the close button was reduced — resulting in visually clashing with the content when scrolling."
      }
    ]
  },
  {
    "version": "32.8.3",
    "updates": [
      {
        "updated": [
          "vars"
        ],
        "summary": "**apac, seekBusiness:** Increase `medium` font weight\n\nThe unicode range of Thai characters is not satisfied by the preferred fonts specified for the `apac` theme, resulting in these characters falling through and being rendered by `sans-serif` — which applies a platform-specific font.\nThese system fonts do not have support for the semi-bold weight chosen for `medium`, resulting in the visual weight of `medium` text being rounded down to `regular` — providing no differentiation relative to other text in the UI.\n\nIn addition, due to both `Helvetica` and `Arial` not having a `medium` weight, these fallbacks also have the same problem, even for Latin characters.\n\nBy increasing the value of `medium`, it will now round to `strong` when the rendered font cannot satisfy `medium` — preventing the loss of hierarchy.\n\nThis only affects apac-based themes, namely `apac` and `seekBusiness`."
      }
    ]
  },
  {
    "version": "32.9.0",
    "updates": [
      {
        "new": [
          "Page"
        ],
        "summary": "**Page:** Add component\n\nThe new `Page` component establishes a consistent page-level layout by managing the relationship between the footer and the main content.\n\nBy default, for pages with limited content the `footer` will at a minimum be placed at the bottom of the screen, pushed beyond as the page content grows.\n\nFor pages with dynamic content, it is recommended to place the footer out of view by setting the `footerPosition` prop to `belowFold` to prevent the footer from popping in and out of view when the page content changes, e.g. toggling between a loading indicator and content.\n\n**EXAMPLE USAGE:**\n```jsx\n<Page footer={<Footer />}>\n  <Header />\n  {/* page content... */}\n</Page>\n```"
      },
      {
        "updated": [
          "TabPanel"
        ],
        "summary": "**TabPanel:** Align focus outline radius to scale\n\nIncrease the radius of the focus outline to better align to the scale. A `TabPanel` is typically a \"large\" element containing entire sections of UI, so using the `large` radius to better align to the radius scale."
      }
    ]
  },
  {
    "version": "32.9.1",
    "updates": [
      {
        "updated": [
          "Drawer"
        ],
        "summary": "**Drawer:** Prevent close button protruding in left position\n\nFixes an issue where the close button could protrude from a `Drawer`.\nThis was only visible when setting `position` to `left` and between a small range of screen widths — above 660px (`small` content width) and below 768px (`tablet` breakpoint)."
      },
      {
        "updated": [
          "RadioGroup"
        ],
        "summary": "**RadioGroup:** Ensure `reserveMessageSpace` prevents layout shift correctly\n\nConsider the `reserveMessageSpace` prop as well as `message` when conditionally applying internal padding between radio list and field message."
      }
    ]
  },
  {
    "version": "32.9.2",
    "updates": []
  },
  {
    "version": "32.10.0",
    "updates": [
      {
        "updated": [
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**TextLink, TextLinkButton:** Underline regular links in non-legacy themes\n\nTo improve affordance beyond primarily being colour, a `TextLink` (and `TextLinkButton`) will now always be underlined, in line with [best practice accessibility guidelines].\n\nGiven this has not been the case previously, this decision has been applied to non-legacy themes only, as such only affecting consumers of `seekJobs`, `docs` and `wireframe`.\n\n[best practice accessibility guidelines]: https://webaim.org/techniques/hypertext/link_text#appearance"
      },
      {
        "updated": [
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**TextLink, TextLinkButton:** Apply themed focus outline\n\nApply a focus outline using the relevant focus attributes from the theme, bringing `TextLink` (and `TextLinkButton`) into line with the focus treatment applied to rest of the system."
      },
      {
        "updated": [
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**TextLink, TextLinkButton:** Reduce `weak` links to `regular` font weight\n\nThe font weight of a `weak` link is now reduced to `regular` weight, reducing the link's visual prominence in addition to following the neutral text colour."
      },
      {
        "updated": [
          "vars",
          "Box"
        ],
        "summary": "**docs:** Lighten soft background tokens\n\nLighten the `brandAccentSoft` and `formAccentSoft` background tokens for the `docs` theme."
      },
      {
        "updated": [
          "vars",
          "Text",
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**seekJobs:** Change link colour to neutral\n\nChanging the `foregroundColor` token for `link` on the `seekJobs` theme to align with neutral text.\nOur different approach to using colour has seen links dialled back to compete less with other messaging and CTAs.\n\nThis affects the following usages across the system:\n- `vars.foregroundColor.link`\n- `Text` (using `tone=\"link\"`)\n- `TextLink` and (`TextLinkButton`)"
      },
      {
        "updated": [
          "Dialog",
          "Drawer"
        ],
        "summary": "**Dialog, Drawer:** Adapt max height to available viewport space\n\nMake use of the new [dynamic viewport units] for applying a max height to modal elements such as `Dialog` and `Drawer`. These new units take into account dynamic browser toolbars that expand and contract as the user scrolls, ensuring the browser interface never obscures the web site content.\n\nFix also incorporates fallback for older browsers to use regular viewport units.\n\n\n[Dynamic Viewport units]: https://web.dev/viewport-units/"
      }
    ]
  },
  {
    "version": "32.11.0",
    "updates": [
      {
        "updated": [
          "Button",
          "ButtonLink"
        ],
        "summary": "**Button, ButtonLink:** Provide `formAccent` as the name for undefined tone\n\nFormalise the name of the `undefined` tone as `formAccent`, making it more discoverable as an accent available for increased prominence.\n\nNote: Consumers should only apply this tone where an action should be emphasized explicitly. The `undefined` value is still valid for buttons that should follow the default button style of the theme.\n\n**EXAMPLE USAGE:**\n```jsx\n<Button tone=\"formAccent\">\n  ...\n</Button>\n```"
      }
    ]
  },
  {
    "version": "32.12.0",
    "updates": [
      {
        "updated": [
          "Button",
          "ButtonLink"
        ],
        "summary": "**Button, ButtonLink:** Default to neutral ghost in non-legacy themes\n\nBy default, a button now has a `neutral` tone and uses the `ghost` variant, allowing the visual prominence to be increased or decreased as required, enabling colour to be applied as accents and with purpose, rather than by default.\n\n```jsx\n<Button />\n// => tone=\"neutral\" & variant=\"ghost\"\n```\n\nTo compliment this, when a `tone` is purposefully applied, the default variant becomes `solid` to maximise its impact — allowing the visual prominence to be reduced as needed.\n\n```jsx\n<Button tone=\"brandAccent\" />\n// => tone=\"brandAccent\" & variant=\"solid\"\n```\n\n### No change for `apac` and `seekBusiness` consumers\n\nGiven the fundamental change in approach to colour and usage of such a core component, this change has been isolated to newer themes and **does not impact `apac` and `seekBusiness` consumers**.\n\nThese themes will continue to have a tone of `formAccent` and a `solid` variant by default, allowing consumers to adopt this new approach as part of the design uplift when migrating to an updated theme, e.g. `seekJobs`."
      }
    ]
  },
  {
    "version": "32.12.1",
    "updates": [
      {
        "updated": [
          "Loader"
        ],
        "summary": "When animating an SVG circle, it seems that the width changes slightly, which on Loader was causing the right-most one to push off the boundaries of the SVG View Box.\n\nThis has been fixed so clipping should no longer occur."
      }
    ]
  },
  {
    "version": "32.12.1",
    "updates": []
  },
  {
    "version": "32.12.2",
    "updates": [
      {
        "updated": [
          "TooltipRenderer"
        ],
        "summary": "**TooltipRenderer:** Re-evaluate position when `trigger` or `children` changes\n\nFixes an issue where the tooltip would not re-evaluate its position when the `trigger` or `children` prop changed while the tooltip was already open."
      }
    ]
  },
  {
    "version": "32.12.3",
    "updates": []
  },
  {
    "version": "32.12.4",
    "updates": [
      {
        "updated": [
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**TextLink, TextLinkButton:** Ensure consistent underline thickness on weak links\n\nA subtle bug affecting weak links was resulting in a change in underline thickness on hover.\nThis bug has been fixed such that weak links now always have the same underline thickness regardless of hover state."
      }
    ]
  },
  {
    "version": "32.12.5",
    "updates": []
  },
  {
    "version": "32.13.0",
    "updates": [
      {
        "updated": [
          "seekJobs"
        ],
        "summary": "**seekJobs:** Update `formAccent` colour\n\nThe `formAccent` tone, used through our form fields and buttons, is being updated to a derivative of the SEEK brand blue.\n\nAs this update only relates to the `seekJobs` theme, consumers of other themes will not be affected."
      }
    ]
  },
  {
    "version": "32.14.0",
    "updates": [
      {
        "updated": [
          "ButtonIcon"
        ],
        "summary": "Add optional `tooltipPlacement` prop to `ButtonIcon`\n\nThe `tooltipPlacement` prop allows you to specify the placement of the tooltip to either `top` or `bottom`.\nThe default value is `top`.\n\n**EXAMPLE USAGE:**\n\n```jsx\n<ButtonIcon\n  tooltipPlacement=\"bottom\"\n/>\n```"
      }
    ]
  },
  {
    "version": "32.14.1",
    "updates": [
      {
        "updated": [
          "TooltipRenderer"
        ],
        "summary": "**TooltipRenderer:** Fix `useLayoutEffect` warnings during SSR"
      },
      {
        "updated": [
          "Tabs"
        ],
        "summary": "**Tabs:** Improve positioning of the active underline"
      }
    ]
  },
  {
    "version": "32.14.2",
    "updates": []
  },
  {
    "version": "32.14.2",
    "updates": []
  },
  {
    "version": "32.14.3",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Fix aria-label and aria-labelledby features\n\nFixes an issue where the `aria-label` and `aria-labelledby` props provided by a consumer were being overidden internally by the `Autosuggest` component."
      }
    ]
  },
  {
    "version": "32.14.4",
    "updates": []
  },
  {
    "version": "32.15.0",
    "updates": [
      {
        "updated": [
          "Rating"
        ],
        "summary": "**Rating:** Add `weight` support\n\nProvide a `weight` prop to customise the weight of the text rating alongside the stars.\n\n**EXAMPLE USAGE:**\n```jsx\n<Rating rating={3} weight=\"strong\" />\n```"
      }
    ]
  },
  {
    "version": "32.15.1",
    "updates": []
  },
  {
    "version": "32.16.0",
    "updates": [
      {
        "new": [
          "IconSocialX"
        ],
        "summary": "**IconSocialX:** Add new icon\n\nAdd the new `IconSocialX` component to the suite of social icons, enabling teams to migrate across from `IconSocialTwitter` which has now been marked as deprecated.\n\n**EXAMPLE USAGE:**\n```jsx\n<IconSocialX />\n```\n\n**MIGRATION GUIDE:**\nTeams should migrate from `IconSocialTwitter` to `IconSocialX` at their earliest convenience. The `IconSocialTwitter` component will be removed in a future release.\n\n```diff\n-<IconSocialTwitter />\n+<IconSocialX />\n```"
      },
      {
        "updated": [
          "IconSocialFacebook",
          "IconSocialGitHub",
          "IconSocialInstagram",
          "IconSocialLinkedIn",
          "IconSocialMedium",
          "IconSocialYouTube"
        ],
        "summary": "**Icons:** Update social icons\n\nUpdate the suite of social icons to be more uniformly sized alongside each other as well as updating the Medium icon to reflect the latest branding."
      },
      {
        "updated": [
          "IconMoney"
        ],
        "summary": "**IconMoney:** Update artwork to be currency agnostic"
      },
      {
        "new": [
          "IconSort"
        ],
        "summary": "**IconSort:** Add new icon\n\n**EXAMPLE USAGE:**\n```jsx\n<IconSort />\n```"
      }
    ]
  },
  {
    "version": "32.16.1",
    "updates": [
      {
        "updated": [
          "Tab"
        ],
        "summary": "**Tab:** Remove cropping of the icon slot\n\nPreviously the `icon` slot on a `Tab` was cropped on the left to improve alignment with the active tab indicator.\nFor most icons in a `Tab`, this was subtle polish, but for others it had the undesirable side effect of clipping the side of the icon.\n\nRemoving the cropping until we have a better solution for trimming whitespace around icons."
      },
      {
        "updated": [
          "Badge"
        ],
        "summary": "**Badge**: Allow `Badge` to take arrays of values\n\nPreviously, `Badge` only accepted a `string` as children, to prevent the use of other components inside a `Badge`.\n\nHowever, when a variable is included with text inside the `Badge`, the children property is interpreted as an array. This prevents a very reasonable use case from being allowed:\n\n```tsx\n<Badge>{jobs.length} Jobs</Badge>\n// Error: Type '{ children: string[]; }' is not assignable to type 'BadgeProps'.\n```\n\nThis change allows `Badge` to accept a string, number, or array thereof."
      }
    ]
  },
  {
    "version": "32.16.2",
    "updates": [
      {
        "updated": [
          "Text",
          "Heading"
        ],
        "summary": "**Text, Heading:** Fix `maxLines` cropping of decending characters\n\nFixes a bug when using -webkit-box, where the descender on the last line of text could be cropped based on the combination of line height and font size."
      }
    ]
  },
  {
    "version": "32.16.3",
    "updates": [
      {
        "updated": [
          "Checkbox"
        ],
        "summary": "**Checkbox:** Improve tri-state handling\n\nFixes a bug in [tri-state] `Checkbox` where transitioning from `mixed` to `checked` could result in the visual presentation being out of sync with the desired state.\n\n[tri-state]: https://seek-oss.github.io/braid-design-system/components/Checkbox#tri-state-support"
      }
    ]
  },
  {
    "version": "32.17.0",
    "updates": [
      {
        "updated": [
          "IconCritical",
          "IconLanguage"
        ],
        "summary": "Update semantic icon assets.\n\n`IconCritical`: Move from circle to diamond outline. Increase the visual distinction from `IconInfo`.\n`IconLanguage`: Move from globe to characters. Better represents the concept of language. Previous asset available as `IconGlobe`.\n\n\n**MIGRATION GUIDE**\n\nAs the above are updates to semantics icons, consumers are unaffected if their usage follows the icon's semantic intent.\nFor those choosing the icon based on its visual appearance, please review the usage and consider decoupling from the semantic system icon for safer upgrades."
      },
      {
        "new": [
          "IconAI",
          "IconCareer",
          "IconCategory",
          "IconExperience",
          "IconGift",
          "IconGlobe",
          "IconRocket",
          "IconSentiment",
          "IconSkills"
        ],
        "summary": "Add new icons to the library"
      }
    ]
  },
  {
    "version": "32.18.0",
    "updates": [
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "Ensure all paths through `AutoSuggest` state updates are handled."
      },
      {
        "updated": [
          "Drawer"
        ],
        "summary": "Fix minor bug which prevented the `Drawer` exit animation from occurring."
      },
      {
        "updated": [
          "IconPromote"
        ],
        "summary": "**IconPromote:** Update semantic icon from sparkles to a megaphone\n\nWith the introduction of `IconAI` recently adopting the sparkles artwork (aligning with the industry trend), the `IconPromote` semantic is now updated to use a megaphone instead of sparkles.\n\nThis change will run through all semantic usages, for example `Alert`, `Notice`, etc."
      },
      {
        "new": [
          "ButtonIcon"
        ],
        "summary": "**ButtonIcon:** Add `small` size\n\nIntroduce a new `small` size for `ButtonIcon` component.\nThis size sits alongside the existing `standard` and `large` sizes.\n\n**EXAMPLE USAGE:**\n```jsx\n<ButtonIcon\n  size=\"small\"\n  icon={<IconEdit />}\n  label=\"Small size\"\n/>\n```"
      },
      {
        "updated": [
          "Dialog"
        ],
        "summary": "Add exit animation to `Dialog` which mirrors the existing entrance animation."
      },
      {
        "updated": [
          "Autosuggest",
          "PasswordField",
          "TextField"
        ],
        "summary": "Adopt `small` sized `ButtonIcon` for field actions\n\nSwitch over to `small` (previously `standard`) sized `ButtonIcon` for field actions such as clear field, or toggle password visibility."
      },
      {
        "new": [
          "Tag"
        ],
        "summary": "**Tag:** Add `small` size\n\nIntroduce a new `small` size for `Tag` component.\nThis size sits alongside the existing `standard` size, which is the default.\n\n**EXAMPLE USAGE:**\n```jsx\n<Tag size=\"small\">\n  Tag\n</Tag>\n```"
      },
      {
        "updated": [
          "MenuButton"
        ],
        "summary": "**MenuButton:** Improve virtual touch target positioning for narrow elements\n\nTo maintain accessibility for smaller interactive elements, Braid uses a virtual touch target to maintain the minimum hit area.\nThis change ensures that the virtual element is always centered to the visual target, in particular when the width of the visual target is narrower than the minimum hit area."
      },
      {
        "updated": [
          "Accordion",
          "AccordionItem",
          "Alert",
          "Button",
          "ButtonLink",
          "ButtonIcon",
          "Checkbox",
          "RadioItem",
          "Radio",
          "TextDropdown",
          "TextLink",
          "TextLinkButton",
          "Toggle"
        ],
        "summary": "Improve virtual touch target positioning for narrow elements\n\nTo maintain accessibility for smaller interactive elements, Braid uses a virtual touch target to maintain the minimum hit area.\nThis change ensures that the virtual element is always centered to the visual target, in particular when the width of the visual target is narrower than the minimum hit area."
      }
    ]
  },
  {
    "version": "32.18.1",
    "updates": []
  },
  {
    "version": "32.19.0",
    "updates": [
      {
        "updated": [
          "PageBlock"
        ],
        "summary": "**PageBlock:** Add `small` and `full` width options\n\nAdd `small` to available `width` options of `PageBlock` to support narrower max width for page content.\n\nAlso introducing `full` as a `width` option to enable full width content, while still maintaining consistent screen gutters.\n\n**EXAMPLE USAGE:**\n```jsx\n<PageBlock width=\"small\">\n  ...\n</PageBlock>\n```"
      },
      {
        "updated": [
          "ContentBlock"
        ],
        "summary": "**ContentBlock:** Add support for left alignment\n\nIntroduces horizontal alignment support for `ContentBlock`, enabling content to be constrained to a max width and aligned to the left.\n\nUseful inside of larger `PageBlock` or `ContentBlock` elements when constraining the content for readability or length of form fields.\n\n**EXAMPLE USAGE:**\n```jsx\n<ContentBlock align=\"left\">\n  ...\n</ContentBlock>\n```"
      },
      {
        "updated": [
          "ButtonIcon"
        ],
        "summary": "**ButtonIcon:** Add `formAccent` tone\n\nIntroduces support for the `formAccent` tone on `ButtonIcon`.\n\nThe new tone sits alongside the existing `neutral` tone, while the `secondary` tone is now deprecated and will be removed in a future version (see [Migration Guide] below).\n\n**EXAMPLE USAGE:**\n```jsx\n<ButtonIcon tone=\"formAccent\" icon={<IconAdd />} />\n```\n\n**MIGRATION GUIDE:**\n\nFor consumers of the now deprecated `secondary` tone, you can pro-actively migrate away from it by moving the `tone` to the icon itself:\n\n```diff\n <ButtonIcon\n-  tone=\"secondary\"\n-  icon={<IconAdd />}\n+  icon={<IconAdd tone=\"secondary\" />}\n```\n\n\n[Migration Guide]: #migration-guide"
      }
    ]
  },
  {
    "version": "32.19.1",
    "updates": [
      {
        "updated": [
          "Autosuggest",
          "Dialog",
          "Drawer",
          "PasswordField",
          "Tag",
          "TextField",
          "useToast"
        ],
        "summary": "Move secondary ButtonIcon tone to icons\n\nFollowing the deprecation of the `secondary` tone of `ButtonIcon`, this updates all internal usages to apply the `secondary` tone directly to the icon."
      }
    ]
  },
  {
    "version": "32.20.0",
    "updates": [
      {
        "updated": [
          "Toggle"
        ],
        "summary": "**Toggle:** Add `togglePosition` prop\n\nIntroduces the `togglePosition` prop, enabling the toggle to either be `leading` or `trailing` its label text.\n\n**EXAMPLE USAGE:**\n```jsx\n<Toggle togglePosition=\"trailing\" label=\"Label\" />\n```"
      },
      {
        "updated": [
          "Tag"
        ],
        "summary": "**Tag**: Add missing click event parameter to `onClear` prop type"
      },
      {
        "updated": [
          "Toggle"
        ],
        "summary": "**Toggle:** Add `bleedY` prop\n\nIntroduces the `bleedY` prop, enabling vertical bleed for the `Toggle` component. This removes excess vertical space created by the `Toggle` input.\n\n**EXAMPLE USAGE:**\n```jsx\n<Toggle label=\"Label\" bleedY />\n```\n\n**MIGRATION GUIDE:**\n\nVertical bleed will become standard for the `Toggle` component in a future version. Please use the `bleedY` prop with a value of `true` and update your layout accordingly."
      },
      {
        "updated": [
          "Tag"
        ],
        "summary": "**Tag:** Introduce \"addable\" support\n\nTag actions have been extended to now support being “added”.\nA `Tag` will include a small add icon button when both an `onAdd` handler and `addLabel` prop are provided.\n\n**EXAMPLE USAGE:**\n```jsx\n<Tag onAdd={() => {...}} addLabel=\"Add Tag\" />\n```"
      },
      {
        "updated": [
          "seekJobs"
        ],
        "summary": "**seekJobs:** Use Tahoma for Thai fallback font\n\nCurrently in the `seekJobs` theme, the fallback font for the Thai character set resolves to the default system font which differs by operating system.\nBy choosing a deterministic fallback that is available across operating systems, we can use [Capsize] to [improve the alignment] with the SEEK Sans web font, and reduce Cumulative Layout Shift for experiences that use Thai.\n\nAdditionally, adding `sans-serif` as an ultimate fallback in the event that we ever fall all the way through the stack on an obscure operating system.\n\n[Capsize]: https://seek-oss.github.io/capsize/\n[improve the alignment]: https://github.com/seek-oss/capsize?tab=readme-ov-file#createfontstack"
      },
      {
        "updated": [
          "Toggle"
        ],
        "summary": "**Toggle:** Improve label text vertical alignment at `small` size"
      },
      {
        "updated": [
          "Toggle"
        ],
        "summary": "**Toggle:** Remove tick icon & fix antialias haze when selected\n\nSimplying the selected state design by removing the tick icon from the toggle thumb.\n\nAlso fixes the antialias haze that appears around the thumb when selected."
      }
    ]
  },
  {
    "version": "32.21.0",
    "updates": [
      {
        "new": [
          "IconHash"
        ],
        "summary": "**IconHash:** Add component\n\n**EXAMPLE USAGE:**\n```jsx\n<IconHash />\n```"
      },
      {
        "updated": [
          "Checkbox",
          "CheckboxStandalone",
          "MenuItemCheckbox",
          "RadioItem",
          "Toggle"
        ],
        "summary": "Refine the Checkbox, Radio, Toggle & MenuItemCheckbox size\n\nRefines the size of the inline field elements including the `RadioItem`, `Checkbox`, `Toggle` and `MenuItemCheckbox` components.\n\nPrimarily impacts consumers of the `seekJobs` theme, seeing a reduction across all sizes."
      },
      {
        "updated": [
          "Autosuggest",
          "Dropdown",
          "PasswordField",
          "TextField",
          "Textarea"
        ],
        "summary": "Ensure no space above field with `undefined` label\n\nFixes an issue where passing `undefined` as the `label` to a form field would result in an unwanted space above the field."
      },
      {
        "updated": [
          "Autosuggest",
          "Dropdown",
          "MonthPicker",
          "PasswordField",
          "TextField",
          "Textarea",
          "Checkbox",
          "RadioItem",
          "RadioGroup",
          "FieldLabel",
          "FieldMessage"
        ],
        "summary": "Improve internal form field spacing\n\nRefined the spacing between internal elements of form fields to align with the latest spacing guidelines.\n\nThis change impacts the `Stack` spacing between `label` and `description`, the form field itself and the `message` slots."
      },
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest:** Add `suggestionHighlight` prop\n\nIntroduces the `suggestionHighlight` prop, which uses the input value to automatically highlight either the `matching` or `remaining` portion of each suggestion.\n\n**EXAMPLE USAGE:**\n```jsx\n<Autosuggest suggestionHighlight=\"matching\">\n```"
      },
      {
        "updated": [
          "Badge"
        ],
        "summary": "**Badge:** Ensure label follows correct tone\n\nEnsure that the foreground text of a `Badge` always follows the correct tone for the background colour.\nFixes a bug where using a `Badge` in a `List` that overrides the default tone would result in the `Badge` text following the `List` tone instead of the `Badge` tone."
      },
      {
        "updated": [
          "useToast"
        ],
        "summary": "Fix warning in React 18.3.0 when using useToast."
      },
      {
        "updated": [
          "MonthPicker"
        ],
        "summary": "**MonthPicker:** Reduce space between month and year fields\n\nReducing the space between month and year fields to improve correlation between the two fields within the greater context of a form."
      }
    ]
  },
  {
    "version": "32.22.0",
    "updates": [
      {
        "new": [
          "Column"
        ],
        "summary": "**Column:** Add support for hide above/below breakpoint\n\nIntroduce new `hideAbove` and `hideBelow` props on column for responsively hiding columns across breakpoint.\n\nThese props can be used either separately or in combination to optimise content display across different screen sizes.\n\n**EXAMPLE USAGE:**\n```jsx\n<Columns space=\"small\">\n  <Column>\n    <Placeholder height={60} label=\"Always visible\" />\n  </Column>\n  <Column hideBelow=\"tablet\">\n    <Placeholder height={60} label=\"Tablet and above\" />\n  </Column>\n  <Column hideAbove=\"mobile\">\n    <Placeholder height={60} label=\"Mobile Only\" />\n  </Column>\n</Columns>\n```"
      },
      {
        "updated": [
          "AccordionItem",
          "Checkbox",
          "CheckboxStandalone",
          "RadioItem"
        ],
        "summary": "Move `badge` slot inside label\n\nRelocate the `badge` slot inside the `label` slot enabling the `Badge` to sit alongside the last word in wrapping lines of text."
      },
      {
        "updated": [
          "Badge"
        ],
        "summary": "**Badge:** Enable usage inside typographic components\n\nA `Badge` can now be nested inside typographic components, e.g. `Text` and `Heading`, as an inline element alongside text.\nPreviously a `Badge` had to be aligned against text using an `Inline` component, which would result in the `Badge` dropping below the text when the copy wrapped.\n\n**EXAMPLE USAGE:**\n```jsx\n<Text>\n  Lorem ipsum velit in <Badge>amet</Badge>.\n</Text>\n```"
      },
      {
        "new": [
          "Tabs"
        ],
        "summary": "**Tabs:** Add `size` support\n\nIntroduces the ability to customise the `size` of the `Tab` components in the tab list.\nAvailable sizes are `standard` (default) and `small`.\n\n**EXAMPLE USAGE:**\n```jsx\n<Tabs size=\"small\">\n  <Tab>First tab</Tab>\n  <Tab>Second tab</Tab>\n  <Tab>Third tab</Tab>\n</Tabs>\n```"
      },
      {
        "new": [
          "Spread"
        ],
        "summary": "**Spread:** Add new layout component\n\nIntroduce a new layout component, `Spread`, used to justify content with both an equally distributed and a specified minimum amount of space in between each child.\n\n**EXAMPLE USAGE:**\n\nThe `Spread` component works horizontally by default:\n\n```jsx\n<Spread space=\"small\" alignY=\"center\">\n  <Heading level=\"4\">Heading</Heading>\n\n  <OverflowMenu label=\"Options\">\n    <MenuItem>First</MenuItem>\n    <MenuItem>Second</MenuItem>\n  </OverflowMenu>\n</Spread>\n```\n\nBut can be switched to `vertical` via the `direction` prop:\n\n```jsx\n<Spread space=\"large\" direction=\"vertical\">\n  <Stack space=\"small\">\n    <Heading level=\"4\">Heading</Heading>\n    <Text>Text</Text>\n  </Stack>\n\n  <Text size=\"small\" tone=\"secondary\">\n    Date\n  </Text>\n</Spread>\n```"
      }
    ]
  },
  {
    "version": "32.23.0",
    "updates": [
      {
        "new": [
          "Spread"
        ],
        "summary": "**Spread:** Add `component` prop support\n\nEnable support for changing the underlying HTML element of the `Spread` component.\n\n**EXAMPLE USAGE:**\n```jsx\n<Spread component=\"span\">\n  ...\n</Spread>\n```"
      },
      {
        "new": [
          "Spread"
        ],
        "summary": "**Spread:** Add `data` prop support\n\n**EXAMPLE USAGE:**\n```jsx\n<Spread data={{ test: 123 }}>\n  ...\n</Spread>\n```"
      }
    ]
  },
  {
    "version": "32.23.1",
    "updates": [
      {
        "updated": [
          "RadioItem"
        ],
        "summary": "**RadioItem:** Improve `checked` visual affordance when `disabled`\n\nImprove the visual affordance of the `checked` state when `disabled` across all themes and colour modes."
      },
      {
        "updated": [
          "MenuRenderer",
          "OverflowMenu"
        ],
        "summary": "**MenuRenderer, OverflowMenu:** Limit the menu height\n\nLimit the menu to show a maximum of around 10 items before scrolling (a little less so it's evident there is more to scroll to)."
      },
      {
        "updated": [
          "TextLink",
          "TextLinkButton"
        ],
        "summary": "**TextLink:** Default to weak inside secondary tone\n\nAlign the `secondary` tone with other non-neutral text tones, making the foreground color of links inherit the tone of the wrapping `Text` component.\n\n**EXAMPLE USAGE:**\nIn the following example the `TextLink` will now follow the `secondary` tone from the wrapping `Text` component:\n\n```jsx\n<Text tone=\"secondary\">\n  <TextLink href=\"#\">Link</TextLink>\n</Text>\n```\n\nPreviously this would have retained the default link colour from the theme."
      },
      {
        "updated": [
          "Autosuggest",
          "Checkbox",
          "CheckboxStandalone",
          "Dropdown",
          "MonthPicker",
          "PasswordField",
          "RadioGroup",
          "Radio",
          "TextField",
          "Textarea"
        ],
        "summary": "Standardise `disabled` & `critical` state across form fields\n\nImproves the consistency of form fields when combining both `disabled` and `critical` tone, which includes:\n- Hiding `critical` borders\n- Hiding `message` and not reserving space for it unless explicitly providing the `reserveMessageSpace` prop."
      }
    ]
  },
  {
    "version": "32.24.0",
    "updates": [
      {
        "updated": [
          "Stack",
          "Tiles"
        ],
        "summary": "**Stack, Tiles:** Deprecate `dividers` prop\n\nIn preparation for migrating Braid layout components to use [CSS gap], the `dividers` prop has been deprecated on `Stack` and `Tiles`.\n\nConsumers are encouraged to migrate now in advance of its removal in v33.\n\n#### Migration Guide\n\nSee [migration guide] for details on how to migrate off the `dividers` prop.\n\n[CSS gap]: https://developer.mozilla.org/en-US/docs/Web/CSS/gap\n[migration guide]: https://github.com/seek-oss/braid-design-system/blob/master/docs/Removing%20dividers%20support%20from%20layout%20components.md"
      },
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest**: Improve handling of `suggestionHighlight` prop when set to `remaining`\n\nFixes a bug in `Autosuggest` when using `suggestionHighlight` prop set to `remaining`.\nIf the input contained multiple words, the highlighted portion would be appended to the end of matching suggestions."
      },
      {
        "updated": [
          "Divider"
        ],
        "summary": "**Divider:** Ensure full width in flex container\n\nEnsures the `Divider` component remains full width when used as a flex child inside a flex container."
      },
      {
        "updated": [
          "Autosuggest"
        ],
        "summary": "**Autosuggest**: Optimise automatic scrolling to selected suggestion by using native browser methods."
      }
    ]
  }
]
