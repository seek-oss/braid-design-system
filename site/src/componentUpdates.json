[{"version":"29.2.0","updates":[{"updated":["Box"],"summary":"**Box:** Added `zIndex` prop\n\nThe following z-index palette is now available on `Box`:\n\n**Local stacking**\n\n- `0`\n- `1`\n- `2`\n\n**Global stacking**\n\n- `\"dropdownBackdrop\"`\n- `\"dropdown\"`\n- `\"sticky\"`\n- `\"modalBackdrop\"`\n- `\"modal\"`\n- `\"notification\"`\n\n**EXAMPLE USAGE**\n\n```jsx\n<Box position=\"fixed\" zIndex=\"sticky\">\n  ...\n</Box>\n```"},{"updated":["TabPanels"],"summary":"TabPanels: Add `renderInactivePanels` prop\n\nBy default, the children of `TabPanel` components are only rendered when they are selected. However, in cases where you want to preserve local component state when switching tabs, this behaviour is undesirable. Setting `renderInactivePanels` will cause the `TabPanel` children to be rendered even when visually hidden.\n\n**Note:** This is not a visual change, the panels will still be hidden from the user. \n\ne.g.\n```js\n<TabsProvider selectedItem={0}>\n    <Tabs>\n      <Tab>First</Tab>\n      <Tab>Second</Tab>\n    </Tabs>\n    <TabPanels renderInactivePanels>\n      <TabPanel>\n        <Text>Tab 1</Text>\n      </TabPanel>\n      <TabPanel>\n        {/* This TabPanel is hidden but still in the DOM */}\n        <Text>Tab 2</Text>\n      </TabPanel>\n    </TabPanels>\n</TabsProvider>\n```"},{"updated":["BraidProvider","BraidTestProvider","BraidLoadableProvider","Link"],"summary":"Added support for refs on [Link](https://seek-oss.github.io/braid-design-system/components/Link)\n\nForwarding refs is necessary for certain accessibility patterns (e.g. managing focus states), but the `Link` component wasn't doing this correctly.\n\nPlease note that, if you're passing a custom `linkComponent` implementation to [BraidProvider](https://seek-oss.github.io/braid-design-system/components/BraidProvider), you'll need to ensure that you're using the new `makeLinkComponent` helper function to forward refs, otherwise any attempt to pass a ref to `Link` will throw an error.\n\n**MIGRATION GUIDE**\n\n```diff\n-import { BraidProvider, LinkComponent } from 'braid-design-system';\n+import { BraidProvider, makeLinkComponent } from 'braid-design-system';\n\n-const CustomLink: LinkComponent = ({ href, ...restProps }) =>\n+const CustomLink = makeLinkComponent({ href, ...restProps }, ref) =>\n  href[0] === '/' ? (\n-    <ReactRouterLink to={href} {...restProps} />\n+    <ReactRouterLink to={href} {...restProps} ref={ref} />\n  ) : (\n-    <a href={href} {...restProps} />\n+    <a href={href} {...restProps} ref={ref} />\n  );\n\nexport const App = () => (\n  <BraidProvider linkComponent={CustomLink} {...rest}>\n    ...\n  </BraidProvider>\n);\n```"},{"updated":["Link"],"summary":"**Link:** Fixed types for `className` prop to support the full [classnames](https://www.npmjs.com/package/classnames) API\n\nYou can now pass arrays and objects to the `className` prop on `Link` without type errors.\n\nFor example:\n\n```jsx\n<Link\n  href=\"#\"\n  className={[\n    'someClass',\n    ['anotherClass', 'yetAnotherClass'],\n    { someConditionalClass: someBoolean }\n  ]}>\n  ...\n</Link>\n```"},{"new":["MenuItemLink"],"summary":"Added **MenuItemLink** component\n\nYou can now render semantic links within menu components, e.g. [OverflowMenu](https://seek-oss.github.io/braid-design-system/components/OverflowMenu), [MenuRenderer](https://seek-oss.github.io/braid-design-system/components/MenuRenderer)\n\nFor example:\n\n```jsx\n<OverflowMenu label=\"Options\">\n  <MenuItem onClick={() => {}}>Button</MenuItem>\n  <MenuItemLink href=\"...\">Link</MenuItemLink>\n</OverflowMenu>\n```\n\nNote that links are rendered internally using [Link](https://seek-oss.github.io/braid-design-system/components/Link). If you want to customise the rendering of these links, you need to provide a custom `linkComponent` implementation to [BraidProvider](https://seek-oss.github.io/braid-design-system/components/BraidProvider)."}]},{"version":"29.2.1","updates":[{"updated":["Loader"],"summary":"**Loader:** Fix rendering issues due to browser rounding errors"}]},{"version":"29.2.2","updates":[{"updated":["OverflowMenu","MenuRenderer"],"summary":"**OverflowMenu, MenuRenderer:** Assert that all child nodes are valid menu items\n\nIn order to maintain accessibility, we now throw assertion errors in development if any child node within an [OverflowMenu](https://seek-oss.github.io/braid-design-system/components/OverflowMenu) or [MenuRenderer](https://seek-oss.github.io/braid-design-system/components/MenuRenderer) component is not a [MenuItem/MenuItemLink](https://seek-oss.github.io/braid-design-system/components/MenuItem)."}]}]
